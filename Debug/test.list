
test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005348  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e8  080054e8  080054e8  000154e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080055d0  080055d0  00020100  2**0
                  CONTENTS
  4 .ARM          00000008  080055d0  080055d0  000155d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080055d8  080055d8  00020100  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080055d8  080055d8  000155d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080055dc  080055dc  000155dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000100  20000000  080055e0  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000134  20000100  080056e0  00020100  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20000234  080056e0  00020234  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020100  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000bcc5  00000000  00000000  00020130  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001a3f  00000000  00000000  0002bdf5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000998  00000000  00000000  0002d838  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000908  00000000  00000000  0002e1d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001651f  00000000  00000000  0002ead8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000cde6  00000000  00000000  00044ff7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00088cd0  00000000  00000000  00051ddd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000daaad  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002e70  00000000  00000000  000dab00  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000100 	.word	0x20000100
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080054d0 	.word	0x080054d0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000104 	.word	0x20000104
 80001dc:	080054d0 	.word	0x080054d0

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_uldivmod>:
 8000b58:	b953      	cbnz	r3, 8000b70 <__aeabi_uldivmod+0x18>
 8000b5a:	b94a      	cbnz	r2, 8000b70 <__aeabi_uldivmod+0x18>
 8000b5c:	2900      	cmp	r1, #0
 8000b5e:	bf08      	it	eq
 8000b60:	2800      	cmpeq	r0, #0
 8000b62:	bf1c      	itt	ne
 8000b64:	f04f 31ff 	movne.w	r1, #4294967295
 8000b68:	f04f 30ff 	movne.w	r0, #4294967295
 8000b6c:	f000 b974 	b.w	8000e58 <__aeabi_idiv0>
 8000b70:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b74:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b78:	f000 f806 	bl	8000b88 <__udivmoddi4>
 8000b7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b84:	b004      	add	sp, #16
 8000b86:	4770      	bx	lr

08000b88 <__udivmoddi4>:
 8000b88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b8c:	9d08      	ldr	r5, [sp, #32]
 8000b8e:	4604      	mov	r4, r0
 8000b90:	468e      	mov	lr, r1
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	d14d      	bne.n	8000c32 <__udivmoddi4+0xaa>
 8000b96:	428a      	cmp	r2, r1
 8000b98:	4694      	mov	ip, r2
 8000b9a:	d969      	bls.n	8000c70 <__udivmoddi4+0xe8>
 8000b9c:	fab2 f282 	clz	r2, r2
 8000ba0:	b152      	cbz	r2, 8000bb8 <__udivmoddi4+0x30>
 8000ba2:	fa01 f302 	lsl.w	r3, r1, r2
 8000ba6:	f1c2 0120 	rsb	r1, r2, #32
 8000baa:	fa20 f101 	lsr.w	r1, r0, r1
 8000bae:	fa0c fc02 	lsl.w	ip, ip, r2
 8000bb2:	ea41 0e03 	orr.w	lr, r1, r3
 8000bb6:	4094      	lsls	r4, r2
 8000bb8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000bbc:	0c21      	lsrs	r1, r4, #16
 8000bbe:	fbbe f6f8 	udiv	r6, lr, r8
 8000bc2:	fa1f f78c 	uxth.w	r7, ip
 8000bc6:	fb08 e316 	mls	r3, r8, r6, lr
 8000bca:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000bce:	fb06 f107 	mul.w	r1, r6, r7
 8000bd2:	4299      	cmp	r1, r3
 8000bd4:	d90a      	bls.n	8000bec <__udivmoddi4+0x64>
 8000bd6:	eb1c 0303 	adds.w	r3, ip, r3
 8000bda:	f106 30ff 	add.w	r0, r6, #4294967295
 8000bde:	f080 811f 	bcs.w	8000e20 <__udivmoddi4+0x298>
 8000be2:	4299      	cmp	r1, r3
 8000be4:	f240 811c 	bls.w	8000e20 <__udivmoddi4+0x298>
 8000be8:	3e02      	subs	r6, #2
 8000bea:	4463      	add	r3, ip
 8000bec:	1a5b      	subs	r3, r3, r1
 8000bee:	b2a4      	uxth	r4, r4
 8000bf0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000bf4:	fb08 3310 	mls	r3, r8, r0, r3
 8000bf8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000bfc:	fb00 f707 	mul.w	r7, r0, r7
 8000c00:	42a7      	cmp	r7, r4
 8000c02:	d90a      	bls.n	8000c1a <__udivmoddi4+0x92>
 8000c04:	eb1c 0404 	adds.w	r4, ip, r4
 8000c08:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c0c:	f080 810a 	bcs.w	8000e24 <__udivmoddi4+0x29c>
 8000c10:	42a7      	cmp	r7, r4
 8000c12:	f240 8107 	bls.w	8000e24 <__udivmoddi4+0x29c>
 8000c16:	4464      	add	r4, ip
 8000c18:	3802      	subs	r0, #2
 8000c1a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c1e:	1be4      	subs	r4, r4, r7
 8000c20:	2600      	movs	r6, #0
 8000c22:	b11d      	cbz	r5, 8000c2c <__udivmoddi4+0xa4>
 8000c24:	40d4      	lsrs	r4, r2
 8000c26:	2300      	movs	r3, #0
 8000c28:	e9c5 4300 	strd	r4, r3, [r5]
 8000c2c:	4631      	mov	r1, r6
 8000c2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c32:	428b      	cmp	r3, r1
 8000c34:	d909      	bls.n	8000c4a <__udivmoddi4+0xc2>
 8000c36:	2d00      	cmp	r5, #0
 8000c38:	f000 80ef 	beq.w	8000e1a <__udivmoddi4+0x292>
 8000c3c:	2600      	movs	r6, #0
 8000c3e:	e9c5 0100 	strd	r0, r1, [r5]
 8000c42:	4630      	mov	r0, r6
 8000c44:	4631      	mov	r1, r6
 8000c46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c4a:	fab3 f683 	clz	r6, r3
 8000c4e:	2e00      	cmp	r6, #0
 8000c50:	d14a      	bne.n	8000ce8 <__udivmoddi4+0x160>
 8000c52:	428b      	cmp	r3, r1
 8000c54:	d302      	bcc.n	8000c5c <__udivmoddi4+0xd4>
 8000c56:	4282      	cmp	r2, r0
 8000c58:	f200 80f9 	bhi.w	8000e4e <__udivmoddi4+0x2c6>
 8000c5c:	1a84      	subs	r4, r0, r2
 8000c5e:	eb61 0303 	sbc.w	r3, r1, r3
 8000c62:	2001      	movs	r0, #1
 8000c64:	469e      	mov	lr, r3
 8000c66:	2d00      	cmp	r5, #0
 8000c68:	d0e0      	beq.n	8000c2c <__udivmoddi4+0xa4>
 8000c6a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000c6e:	e7dd      	b.n	8000c2c <__udivmoddi4+0xa4>
 8000c70:	b902      	cbnz	r2, 8000c74 <__udivmoddi4+0xec>
 8000c72:	deff      	udf	#255	; 0xff
 8000c74:	fab2 f282 	clz	r2, r2
 8000c78:	2a00      	cmp	r2, #0
 8000c7a:	f040 8092 	bne.w	8000da2 <__udivmoddi4+0x21a>
 8000c7e:	eba1 010c 	sub.w	r1, r1, ip
 8000c82:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c86:	fa1f fe8c 	uxth.w	lr, ip
 8000c8a:	2601      	movs	r6, #1
 8000c8c:	0c20      	lsrs	r0, r4, #16
 8000c8e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000c92:	fb07 1113 	mls	r1, r7, r3, r1
 8000c96:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000c9a:	fb0e f003 	mul.w	r0, lr, r3
 8000c9e:	4288      	cmp	r0, r1
 8000ca0:	d908      	bls.n	8000cb4 <__udivmoddi4+0x12c>
 8000ca2:	eb1c 0101 	adds.w	r1, ip, r1
 8000ca6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000caa:	d202      	bcs.n	8000cb2 <__udivmoddi4+0x12a>
 8000cac:	4288      	cmp	r0, r1
 8000cae:	f200 80cb 	bhi.w	8000e48 <__udivmoddi4+0x2c0>
 8000cb2:	4643      	mov	r3, r8
 8000cb4:	1a09      	subs	r1, r1, r0
 8000cb6:	b2a4      	uxth	r4, r4
 8000cb8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000cbc:	fb07 1110 	mls	r1, r7, r0, r1
 8000cc0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000cc4:	fb0e fe00 	mul.w	lr, lr, r0
 8000cc8:	45a6      	cmp	lr, r4
 8000cca:	d908      	bls.n	8000cde <__udivmoddi4+0x156>
 8000ccc:	eb1c 0404 	adds.w	r4, ip, r4
 8000cd0:	f100 31ff 	add.w	r1, r0, #4294967295
 8000cd4:	d202      	bcs.n	8000cdc <__udivmoddi4+0x154>
 8000cd6:	45a6      	cmp	lr, r4
 8000cd8:	f200 80bb 	bhi.w	8000e52 <__udivmoddi4+0x2ca>
 8000cdc:	4608      	mov	r0, r1
 8000cde:	eba4 040e 	sub.w	r4, r4, lr
 8000ce2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000ce6:	e79c      	b.n	8000c22 <__udivmoddi4+0x9a>
 8000ce8:	f1c6 0720 	rsb	r7, r6, #32
 8000cec:	40b3      	lsls	r3, r6
 8000cee:	fa22 fc07 	lsr.w	ip, r2, r7
 8000cf2:	ea4c 0c03 	orr.w	ip, ip, r3
 8000cf6:	fa20 f407 	lsr.w	r4, r0, r7
 8000cfa:	fa01 f306 	lsl.w	r3, r1, r6
 8000cfe:	431c      	orrs	r4, r3
 8000d00:	40f9      	lsrs	r1, r7
 8000d02:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d06:	fa00 f306 	lsl.w	r3, r0, r6
 8000d0a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d0e:	0c20      	lsrs	r0, r4, #16
 8000d10:	fa1f fe8c 	uxth.w	lr, ip
 8000d14:	fb09 1118 	mls	r1, r9, r8, r1
 8000d18:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d1c:	fb08 f00e 	mul.w	r0, r8, lr
 8000d20:	4288      	cmp	r0, r1
 8000d22:	fa02 f206 	lsl.w	r2, r2, r6
 8000d26:	d90b      	bls.n	8000d40 <__udivmoddi4+0x1b8>
 8000d28:	eb1c 0101 	adds.w	r1, ip, r1
 8000d2c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d30:	f080 8088 	bcs.w	8000e44 <__udivmoddi4+0x2bc>
 8000d34:	4288      	cmp	r0, r1
 8000d36:	f240 8085 	bls.w	8000e44 <__udivmoddi4+0x2bc>
 8000d3a:	f1a8 0802 	sub.w	r8, r8, #2
 8000d3e:	4461      	add	r1, ip
 8000d40:	1a09      	subs	r1, r1, r0
 8000d42:	b2a4      	uxth	r4, r4
 8000d44:	fbb1 f0f9 	udiv	r0, r1, r9
 8000d48:	fb09 1110 	mls	r1, r9, r0, r1
 8000d4c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000d50:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d54:	458e      	cmp	lr, r1
 8000d56:	d908      	bls.n	8000d6a <__udivmoddi4+0x1e2>
 8000d58:	eb1c 0101 	adds.w	r1, ip, r1
 8000d5c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d60:	d26c      	bcs.n	8000e3c <__udivmoddi4+0x2b4>
 8000d62:	458e      	cmp	lr, r1
 8000d64:	d96a      	bls.n	8000e3c <__udivmoddi4+0x2b4>
 8000d66:	3802      	subs	r0, #2
 8000d68:	4461      	add	r1, ip
 8000d6a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000d6e:	fba0 9402 	umull	r9, r4, r0, r2
 8000d72:	eba1 010e 	sub.w	r1, r1, lr
 8000d76:	42a1      	cmp	r1, r4
 8000d78:	46c8      	mov	r8, r9
 8000d7a:	46a6      	mov	lr, r4
 8000d7c:	d356      	bcc.n	8000e2c <__udivmoddi4+0x2a4>
 8000d7e:	d053      	beq.n	8000e28 <__udivmoddi4+0x2a0>
 8000d80:	b15d      	cbz	r5, 8000d9a <__udivmoddi4+0x212>
 8000d82:	ebb3 0208 	subs.w	r2, r3, r8
 8000d86:	eb61 010e 	sbc.w	r1, r1, lr
 8000d8a:	fa01 f707 	lsl.w	r7, r1, r7
 8000d8e:	fa22 f306 	lsr.w	r3, r2, r6
 8000d92:	40f1      	lsrs	r1, r6
 8000d94:	431f      	orrs	r7, r3
 8000d96:	e9c5 7100 	strd	r7, r1, [r5]
 8000d9a:	2600      	movs	r6, #0
 8000d9c:	4631      	mov	r1, r6
 8000d9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000da2:	f1c2 0320 	rsb	r3, r2, #32
 8000da6:	40d8      	lsrs	r0, r3
 8000da8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000dac:	fa21 f303 	lsr.w	r3, r1, r3
 8000db0:	4091      	lsls	r1, r2
 8000db2:	4301      	orrs	r1, r0
 8000db4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000db8:	fa1f fe8c 	uxth.w	lr, ip
 8000dbc:	fbb3 f0f7 	udiv	r0, r3, r7
 8000dc0:	fb07 3610 	mls	r6, r7, r0, r3
 8000dc4:	0c0b      	lsrs	r3, r1, #16
 8000dc6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000dca:	fb00 f60e 	mul.w	r6, r0, lr
 8000dce:	429e      	cmp	r6, r3
 8000dd0:	fa04 f402 	lsl.w	r4, r4, r2
 8000dd4:	d908      	bls.n	8000de8 <__udivmoddi4+0x260>
 8000dd6:	eb1c 0303 	adds.w	r3, ip, r3
 8000dda:	f100 38ff 	add.w	r8, r0, #4294967295
 8000dde:	d22f      	bcs.n	8000e40 <__udivmoddi4+0x2b8>
 8000de0:	429e      	cmp	r6, r3
 8000de2:	d92d      	bls.n	8000e40 <__udivmoddi4+0x2b8>
 8000de4:	3802      	subs	r0, #2
 8000de6:	4463      	add	r3, ip
 8000de8:	1b9b      	subs	r3, r3, r6
 8000dea:	b289      	uxth	r1, r1
 8000dec:	fbb3 f6f7 	udiv	r6, r3, r7
 8000df0:	fb07 3316 	mls	r3, r7, r6, r3
 8000df4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000df8:	fb06 f30e 	mul.w	r3, r6, lr
 8000dfc:	428b      	cmp	r3, r1
 8000dfe:	d908      	bls.n	8000e12 <__udivmoddi4+0x28a>
 8000e00:	eb1c 0101 	adds.w	r1, ip, r1
 8000e04:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e08:	d216      	bcs.n	8000e38 <__udivmoddi4+0x2b0>
 8000e0a:	428b      	cmp	r3, r1
 8000e0c:	d914      	bls.n	8000e38 <__udivmoddi4+0x2b0>
 8000e0e:	3e02      	subs	r6, #2
 8000e10:	4461      	add	r1, ip
 8000e12:	1ac9      	subs	r1, r1, r3
 8000e14:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e18:	e738      	b.n	8000c8c <__udivmoddi4+0x104>
 8000e1a:	462e      	mov	r6, r5
 8000e1c:	4628      	mov	r0, r5
 8000e1e:	e705      	b.n	8000c2c <__udivmoddi4+0xa4>
 8000e20:	4606      	mov	r6, r0
 8000e22:	e6e3      	b.n	8000bec <__udivmoddi4+0x64>
 8000e24:	4618      	mov	r0, r3
 8000e26:	e6f8      	b.n	8000c1a <__udivmoddi4+0x92>
 8000e28:	454b      	cmp	r3, r9
 8000e2a:	d2a9      	bcs.n	8000d80 <__udivmoddi4+0x1f8>
 8000e2c:	ebb9 0802 	subs.w	r8, r9, r2
 8000e30:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000e34:	3801      	subs	r0, #1
 8000e36:	e7a3      	b.n	8000d80 <__udivmoddi4+0x1f8>
 8000e38:	4646      	mov	r6, r8
 8000e3a:	e7ea      	b.n	8000e12 <__udivmoddi4+0x28a>
 8000e3c:	4620      	mov	r0, r4
 8000e3e:	e794      	b.n	8000d6a <__udivmoddi4+0x1e2>
 8000e40:	4640      	mov	r0, r8
 8000e42:	e7d1      	b.n	8000de8 <__udivmoddi4+0x260>
 8000e44:	46d0      	mov	r8, sl
 8000e46:	e77b      	b.n	8000d40 <__udivmoddi4+0x1b8>
 8000e48:	3b02      	subs	r3, #2
 8000e4a:	4461      	add	r1, ip
 8000e4c:	e732      	b.n	8000cb4 <__udivmoddi4+0x12c>
 8000e4e:	4630      	mov	r0, r6
 8000e50:	e709      	b.n	8000c66 <__udivmoddi4+0xde>
 8000e52:	4464      	add	r4, ip
 8000e54:	3802      	subs	r0, #2
 8000e56:	e742      	b.n	8000cde <__udivmoddi4+0x156>

08000e58 <__aeabi_idiv0>:
 8000e58:	4770      	bx	lr
 8000e5a:	bf00      	nop

08000e5c <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c1;  // change your handler here accordingly

#define SLAVE_ADDRESS_LCD 0x4E // change this according to ur setup

void lcd_send_cmd (char cmd)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b086      	sub	sp, #24
 8000e60:	af02      	add	r7, sp, #8
 8000e62:	4603      	mov	r3, r0
 8000e64:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 8000e66:	79fb      	ldrb	r3, [r7, #7]
 8000e68:	f023 030f 	bic.w	r3, r3, #15
 8000e6c:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 8000e6e:	79fb      	ldrb	r3, [r7, #7]
 8000e70:	011b      	lsls	r3, r3, #4
 8000e72:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8000e74:	7bfb      	ldrb	r3, [r7, #15]
 8000e76:	f043 030c 	orr.w	r3, r3, #12
 8000e7a:	b2db      	uxtb	r3, r3
 8000e7c:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 8000e7e:	7bfb      	ldrb	r3, [r7, #15]
 8000e80:	f043 0308 	orr.w	r3, r3, #8
 8000e84:	b2db      	uxtb	r3, r3
 8000e86:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 8000e88:	7bbb      	ldrb	r3, [r7, #14]
 8000e8a:	f043 030c 	orr.w	r3, r3, #12
 8000e8e:	b2db      	uxtb	r3, r3
 8000e90:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 8000e92:	7bbb      	ldrb	r3, [r7, #14]
 8000e94:	f043 0308 	orr.w	r3, r3, #8
 8000e98:	b2db      	uxtb	r3, r3
 8000e9a:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8000e9c:	f107 0208 	add.w	r2, r7, #8
 8000ea0:	2364      	movs	r3, #100	; 0x64
 8000ea2:	9300      	str	r3, [sp, #0]
 8000ea4:	2304      	movs	r3, #4
 8000ea6:	214e      	movs	r1, #78	; 0x4e
 8000ea8:	4803      	ldr	r0, [pc, #12]	; (8000eb8 <lcd_send_cmd+0x5c>)
 8000eaa:	f001 fbc5 	bl	8002638 <HAL_I2C_Master_Transmit>
}
 8000eae:	bf00      	nop
 8000eb0:	3710      	adds	r7, #16
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	bd80      	pop	{r7, pc}
 8000eb6:	bf00      	nop
 8000eb8:	2000011c 	.word	0x2000011c

08000ebc <lcd_send_data>:

void lcd_send_data (char data)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b086      	sub	sp, #24
 8000ec0:	af02      	add	r7, sp, #8
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 8000ec6:	79fb      	ldrb	r3, [r7, #7]
 8000ec8:	f023 030f 	bic.w	r3, r3, #15
 8000ecc:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 8000ece:	79fb      	ldrb	r3, [r7, #7]
 8000ed0:	011b      	lsls	r3, r3, #4
 8000ed2:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  //en=1, rs=1
 8000ed4:	7bfb      	ldrb	r3, [r7, #15]
 8000ed6:	f043 030d 	orr.w	r3, r3, #13
 8000eda:	b2db      	uxtb	r3, r3
 8000edc:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=1
 8000ede:	7bfb      	ldrb	r3, [r7, #15]
 8000ee0:	f043 0309 	orr.w	r3, r3, #9
 8000ee4:	b2db      	uxtb	r3, r3
 8000ee6:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=1
 8000ee8:	7bbb      	ldrb	r3, [r7, #14]
 8000eea:	f043 030d 	orr.w	r3, r3, #13
 8000eee:	b2db      	uxtb	r3, r3
 8000ef0:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=1
 8000ef2:	7bbb      	ldrb	r3, [r7, #14]
 8000ef4:	f043 0309 	orr.w	r3, r3, #9
 8000ef8:	b2db      	uxtb	r3, r3
 8000efa:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8000efc:	f107 0208 	add.w	r2, r7, #8
 8000f00:	2364      	movs	r3, #100	; 0x64
 8000f02:	9300      	str	r3, [sp, #0]
 8000f04:	2304      	movs	r3, #4
 8000f06:	214e      	movs	r1, #78	; 0x4e
 8000f08:	4803      	ldr	r0, [pc, #12]	; (8000f18 <lcd_send_data+0x5c>)
 8000f0a:	f001 fb95 	bl	8002638 <HAL_I2C_Master_Transmit>
}
 8000f0e:	bf00      	nop
 8000f10:	3710      	adds	r7, #16
 8000f12:	46bd      	mov	sp, r7
 8000f14:	bd80      	pop	{r7, pc}
 8000f16:	bf00      	nop
 8000f18:	2000011c 	.word	0x2000011c

08000f1c <lcd_clear>:

void lcd_clear (void)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b082      	sub	sp, #8
 8000f20:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x00);
 8000f22:	2000      	movs	r0, #0
 8000f24:	f7ff ff9a 	bl	8000e5c <lcd_send_cmd>
	for (int i=0; i<100; i++)
 8000f28:	2300      	movs	r3, #0
 8000f2a:	607b      	str	r3, [r7, #4]
 8000f2c:	e005      	b.n	8000f3a <lcd_clear+0x1e>
	{
		lcd_send_data (' ');
 8000f2e:	2020      	movs	r0, #32
 8000f30:	f7ff ffc4 	bl	8000ebc <lcd_send_data>
	for (int i=0; i<100; i++)
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	3301      	adds	r3, #1
 8000f38:	607b      	str	r3, [r7, #4]
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	2b63      	cmp	r3, #99	; 0x63
 8000f3e:	ddf6      	ble.n	8000f2e <lcd_clear+0x12>
	}
}
 8000f40:	bf00      	nop
 8000f42:	bf00      	nop
 8000f44:	3708      	adds	r7, #8
 8000f46:	46bd      	mov	sp, r7
 8000f48:	bd80      	pop	{r7, pc}

08000f4a <lcd_init>:

void lcd_init (void)
{
 8000f4a:	b580      	push	{r7, lr}
 8000f4c:	af00      	add	r7, sp, #0
	// 4 bit initialisation
	HAL_Delay(50);  // wait for >40ms
 8000f4e:	2032      	movs	r0, #50	; 0x32
 8000f50:	f000 ff86 	bl	8001e60 <HAL_Delay>
	lcd_send_cmd (0x30);
 8000f54:	2030      	movs	r0, #48	; 0x30
 8000f56:	f7ff ff81 	bl	8000e5c <lcd_send_cmd>
	HAL_Delay(5);  // wait for >4.1ms
 8000f5a:	2005      	movs	r0, #5
 8000f5c:	f000 ff80 	bl	8001e60 <HAL_Delay>
	lcd_send_cmd (0x30);
 8000f60:	2030      	movs	r0, #48	; 0x30
 8000f62:	f7ff ff7b 	bl	8000e5c <lcd_send_cmd>
	HAL_Delay(1);  // wait for >100us
 8000f66:	2001      	movs	r0, #1
 8000f68:	f000 ff7a 	bl	8001e60 <HAL_Delay>
	lcd_send_cmd (0x30);
 8000f6c:	2030      	movs	r0, #48	; 0x30
 8000f6e:	f7ff ff75 	bl	8000e5c <lcd_send_cmd>
	HAL_Delay(10);
 8000f72:	200a      	movs	r0, #10
 8000f74:	f000 ff74 	bl	8001e60 <HAL_Delay>
	lcd_send_cmd (0x20);  // 4bit mode
 8000f78:	2020      	movs	r0, #32
 8000f7a:	f7ff ff6f 	bl	8000e5c <lcd_send_cmd>
	HAL_Delay(10);
 8000f7e:	200a      	movs	r0, #10
 8000f80:	f000 ff6e 	bl	8001e60 <HAL_Delay>

  // dislay initialisation
	lcd_send_cmd (0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 8000f84:	2028      	movs	r0, #40	; 0x28
 8000f86:	f7ff ff69 	bl	8000e5c <lcd_send_cmd>
	HAL_Delay(1);
 8000f8a:	2001      	movs	r0, #1
 8000f8c:	f000 ff68 	bl	8001e60 <HAL_Delay>
	lcd_send_cmd (0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
 8000f90:	2008      	movs	r0, #8
 8000f92:	f7ff ff63 	bl	8000e5c <lcd_send_cmd>
	HAL_Delay(1);
 8000f96:	2001      	movs	r0, #1
 8000f98:	f000 ff62 	bl	8001e60 <HAL_Delay>
	lcd_send_cmd (0x01);  // clear display
 8000f9c:	2001      	movs	r0, #1
 8000f9e:	f7ff ff5d 	bl	8000e5c <lcd_send_cmd>
	HAL_Delay(1);
 8000fa2:	2001      	movs	r0, #1
 8000fa4:	f000 ff5c 	bl	8001e60 <HAL_Delay>
	HAL_Delay(1);
 8000fa8:	2001      	movs	r0, #1
 8000faa:	f000 ff59 	bl	8001e60 <HAL_Delay>
	lcd_send_cmd (0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 8000fae:	2006      	movs	r0, #6
 8000fb0:	f7ff ff54 	bl	8000e5c <lcd_send_cmd>
	HAL_Delay(1);
 8000fb4:	2001      	movs	r0, #1
 8000fb6:	f000 ff53 	bl	8001e60 <HAL_Delay>
	lcd_send_cmd (0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 8000fba:	200c      	movs	r0, #12
 8000fbc:	f7ff ff4e 	bl	8000e5c <lcd_send_cmd>
}
 8000fc0:	bf00      	nop
 8000fc2:	bd80      	pop	{r7, pc}

08000fc4 <lcd_send_string>:

void lcd_send_string (char *str)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b082      	sub	sp, #8
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 8000fcc:	e006      	b.n	8000fdc <lcd_send_string+0x18>
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	1c5a      	adds	r2, r3, #1
 8000fd2:	607a      	str	r2, [r7, #4]
 8000fd4:	781b      	ldrb	r3, [r3, #0]
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	f7ff ff70 	bl	8000ebc <lcd_send_data>
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	781b      	ldrb	r3, [r3, #0]
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d1f4      	bne.n	8000fce <lcd_send_string+0xa>
}
 8000fe4:	bf00      	nop
 8000fe6:	bf00      	nop
 8000fe8:	3708      	adds	r7, #8
 8000fea:	46bd      	mov	sp, r7
 8000fec:	bd80      	pop	{r7, pc}
	...

08000ff0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b082      	sub	sp, #8
 8000ff4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ff6:	f000 fec1 	bl	8001d7c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ffa:	f000 f89f 	bl	800113c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ffe:	f000 f95d 	bl	80012bc <MX_GPIO_Init>
  MX_I2C1_Init();
 8001002:	f000 f903 	bl	800120c <MX_I2C1_Init>
  MX_USART2_UART_Init();
 8001006:	f000 f92f 	bl	8001268 <MX_USART2_UART_Init>
  lcd_init();
 800100a:	f7ff ff9e 	bl	8000f4a <lcd_init>
  lcd_clear();
 800100e:	f7ff ff85 	bl	8000f1c <lcd_clear>
  /* USER CODE BEGIN 2 */
  while (MPU6050_Init(&hi2c1) == 1);
 8001012:	bf00      	nop
 8001014:	483f      	ldr	r0, [pc, #252]	; (8001114 <main+0x124>)
 8001016:	f000 f9b6 	bl	8001386 <MPU6050_Init>
 800101a:	4603      	mov	r3, r0
 800101c:	2b01      	cmp	r3, #1
 800101e:	d0f9      	beq.n	8001014 <main+0x24>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  MPU6050_Read_All(&hi2c1, &MPU6050);
 8001020:	493d      	ldr	r1, [pc, #244]	; (8001118 <main+0x128>)
 8001022:	483c      	ldr	r0, [pc, #240]	; (8001114 <main+0x124>)
 8001024:	f000 fa08 	bl	8001438 <MPU6050_Read_All>
	 	  HAL_Delay (100);
 8001028:	2064      	movs	r0, #100	; 0x64
 800102a:	f000 ff19 	bl	8001e60 <HAL_Delay>

		  lcd_send_cmd (0x80|0x00);  // goto 1,1
 800102e:	2080      	movs	r0, #128	; 0x80
 8001030:	f7ff ff14 	bl	8000e5c <lcd_send_cmd>
		  lcd_send_string ("Ax=");
 8001034:	4839      	ldr	r0, [pc, #228]	; (800111c <main+0x12c>)
 8001036:	f7ff ffc5 	bl	8000fc4 <lcd_send_string>
		  sprintf (buf, "%.2f", MPU6050.KalmanAngleX);
 800103a:	4b37      	ldr	r3, [pc, #220]	; (8001118 <main+0x128>)
 800103c:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 8001040:	1d38      	adds	r0, r7, #4
 8001042:	4937      	ldr	r1, [pc, #220]	; (8001120 <main+0x130>)
 8001044:	f003 fa80 	bl	8004548 <siprintf>
		  lcd_send_string (&buf);
 8001048:	1d3b      	adds	r3, r7, #4
 800104a:	4618      	mov	r0, r3
 800104c:	f7ff ffba 	bl	8000fc4 <lcd_send_string>
		  lcd_send_string ("g ");
 8001050:	4834      	ldr	r0, [pc, #208]	; (8001124 <main+0x134>)
 8001052:	f7ff ffb7 	bl	8000fc4 <lcd_send_string>

		  lcd_send_cmd (0x80|0x40);  // goto 2,1
 8001056:	20c0      	movs	r0, #192	; 0xc0
 8001058:	f7ff ff00 	bl	8000e5c <lcd_send_cmd>
		  lcd_send_string ("Ay=");
 800105c:	4832      	ldr	r0, [pc, #200]	; (8001128 <main+0x138>)
 800105e:	f7ff ffb1 	bl	8000fc4 <lcd_send_string>
		  sprintf (buf, "%.2f", MPU6050.KalmanAngleY);
 8001062:	4b2d      	ldr	r3, [pc, #180]	; (8001118 <main+0x128>)
 8001064:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	; 0x58
 8001068:	1d38      	adds	r0, r7, #4
 800106a:	492d      	ldr	r1, [pc, #180]	; (8001120 <main+0x130>)
 800106c:	f003 fa6c 	bl	8004548 <siprintf>
		  lcd_send_string (buf);
 8001070:	1d3b      	adds	r3, r7, #4
 8001072:	4618      	mov	r0, r3
 8001074:	f7ff ffa6 	bl	8000fc4 <lcd_send_string>
		  lcd_send_string ("g ");
 8001078:	482a      	ldr	r0, [pc, #168]	; (8001124 <main+0x134>)
 800107a:	f7ff ffa3 	bl	8000fc4 <lcd_send_string>

		  lcd_send_cmd (0x80|0x0B);  // goto 3,1
 800107e:	208b      	movs	r0, #139	; 0x8b
 8001080:	f7ff feec 	bl	8000e5c <lcd_send_cmd>
		  lcd_send_string ("Az=");
 8001084:	4829      	ldr	r0, [pc, #164]	; (800112c <main+0x13c>)
 8001086:	f7ff ff9d 	bl	8000fc4 <lcd_send_string>
		  sprintf (buf, "%.2f", MPU6050.AngleZ);
 800108a:	4b23      	ldr	r3, [pc, #140]	; (8001118 <main+0x128>)
 800108c:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 8001090:	1d38      	adds	r0, r7, #4
 8001092:	4923      	ldr	r1, [pc, #140]	; (8001120 <main+0x130>)
 8001094:	f003 fa58 	bl	8004548 <siprintf>
		  lcd_send_string (buf);
 8001098:	1d3b      	adds	r3, r7, #4
 800109a:	4618      	mov	r0, r3
 800109c:	f7ff ff92 	bl	8000fc4 <lcd_send_string>
		  lcd_send_string ("g ");
 80010a0:	4820      	ldr	r0, [pc, #128]	; (8001124 <main+0x134>)
 80010a2:	f7ff ff8f 	bl	8000fc4 <lcd_send_string>

		  lcd_send_cmd (0x80|0x06);  // goto 1,11
 80010a6:	2086      	movs	r0, #134	; 0x86
 80010a8:	f7ff fed8 	bl	8000e5c <lcd_send_cmd>
		  lcd_send_string ("Gx=");
 80010ac:	4820      	ldr	r0, [pc, #128]	; (8001130 <main+0x140>)
 80010ae:	f7ff ff89 	bl	8000fc4 <lcd_send_string>
		  sprintf (buf, "%.2f", MPU6050.Gx);
 80010b2:	4b19      	ldr	r3, [pc, #100]	; (8001118 <main+0x128>)
 80010b4:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 80010b8:	1d38      	adds	r0, r7, #4
 80010ba:	4919      	ldr	r1, [pc, #100]	; (8001120 <main+0x130>)
 80010bc:	f003 fa44 	bl	8004548 <siprintf>
		  lcd_send_string (buf);
 80010c0:	1d3b      	adds	r3, r7, #4
 80010c2:	4618      	mov	r0, r3
 80010c4:	f7ff ff7e 	bl	8000fc4 <lcd_send_string>

		  lcd_send_cmd (0x80|0x46);  // goto 2,11
 80010c8:	20c6      	movs	r0, #198	; 0xc6
 80010ca:	f7ff fec7 	bl	8000e5c <lcd_send_cmd>
		  lcd_send_string ("Gy=");
 80010ce:	4819      	ldr	r0, [pc, #100]	; (8001134 <main+0x144>)
 80010d0:	f7ff ff78 	bl	8000fc4 <lcd_send_string>
		  sprintf (buf, "%.2f", MPU6050.Gy);
 80010d4:	4b10      	ldr	r3, [pc, #64]	; (8001118 <main+0x128>)
 80010d6:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 80010da:	1d38      	adds	r0, r7, #4
 80010dc:	4910      	ldr	r1, [pc, #64]	; (8001120 <main+0x130>)
 80010de:	f003 fa33 	bl	8004548 <siprintf>
		  lcd_send_string (buf);
 80010e2:	1d3b      	adds	r3, r7, #4
 80010e4:	4618      	mov	r0, r3
 80010e6:	f7ff ff6d 	bl	8000fc4 <lcd_send_string>

		  lcd_send_cmd (0x80|0x4B);  // goto 3,11
 80010ea:	20cb      	movs	r0, #203	; 0xcb
 80010ec:	f7ff feb6 	bl	8000e5c <lcd_send_cmd>
		  lcd_send_string ("Gz=");
 80010f0:	4811      	ldr	r0, [pc, #68]	; (8001138 <main+0x148>)
 80010f2:	f7ff ff67 	bl	8000fc4 <lcd_send_string>
		  sprintf (buf, "%.2f", MPU6050.Gz);
 80010f6:	4b08      	ldr	r3, [pc, #32]	; (8001118 <main+0x128>)
 80010f8:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 80010fc:	1d38      	adds	r0, r7, #4
 80010fe:	4908      	ldr	r1, [pc, #32]	; (8001120 <main+0x130>)
 8001100:	f003 fa22 	bl	8004548 <siprintf>
		  lcd_send_string (buf);
 8001104:	1d3b      	adds	r3, r7, #4
 8001106:	4618      	mov	r0, r3
 8001108:	f7ff ff5c 	bl	8000fc4 <lcd_send_string>

		  HAL_Delay (250);  // wait for a while
 800110c:	20fa      	movs	r0, #250	; 0xfa
 800110e:	f000 fea7 	bl	8001e60 <HAL_Delay>
	  MPU6050_Read_All(&hi2c1, &MPU6050);
 8001112:	e785      	b.n	8001020 <main+0x30>
 8001114:	2000011c 	.word	0x2000011c
 8001118:	200001b8 	.word	0x200001b8
 800111c:	080054ec 	.word	0x080054ec
 8001120:	080054f0 	.word	0x080054f0
 8001124:	080054f8 	.word	0x080054f8
 8001128:	080054fc 	.word	0x080054fc
 800112c:	08005500 	.word	0x08005500
 8001130:	08005504 	.word	0x08005504
 8001134:	08005508 	.word	0x08005508
 8001138:	0800550c 	.word	0x0800550c

0800113c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	b094      	sub	sp, #80	; 0x50
 8001140:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001142:	f107 0320 	add.w	r3, r7, #32
 8001146:	2230      	movs	r2, #48	; 0x30
 8001148:	2100      	movs	r1, #0
 800114a:	4618      	mov	r0, r3
 800114c:	f003 f9f4 	bl	8004538 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001150:	f107 030c 	add.w	r3, r7, #12
 8001154:	2200      	movs	r2, #0
 8001156:	601a      	str	r2, [r3, #0]
 8001158:	605a      	str	r2, [r3, #4]
 800115a:	609a      	str	r2, [r3, #8]
 800115c:	60da      	str	r2, [r3, #12]
 800115e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001160:	2300      	movs	r3, #0
 8001162:	60bb      	str	r3, [r7, #8]
 8001164:	4b27      	ldr	r3, [pc, #156]	; (8001204 <SystemClock_Config+0xc8>)
 8001166:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001168:	4a26      	ldr	r2, [pc, #152]	; (8001204 <SystemClock_Config+0xc8>)
 800116a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800116e:	6413      	str	r3, [r2, #64]	; 0x40
 8001170:	4b24      	ldr	r3, [pc, #144]	; (8001204 <SystemClock_Config+0xc8>)
 8001172:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001174:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001178:	60bb      	str	r3, [r7, #8]
 800117a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800117c:	2300      	movs	r3, #0
 800117e:	607b      	str	r3, [r7, #4]
 8001180:	4b21      	ldr	r3, [pc, #132]	; (8001208 <SystemClock_Config+0xcc>)
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	4a20      	ldr	r2, [pc, #128]	; (8001208 <SystemClock_Config+0xcc>)
 8001186:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800118a:	6013      	str	r3, [r2, #0]
 800118c:	4b1e      	ldr	r3, [pc, #120]	; (8001208 <SystemClock_Config+0xcc>)
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001194:	607b      	str	r3, [r7, #4]
 8001196:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001198:	2301      	movs	r3, #1
 800119a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800119c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80011a0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80011a2:	2302      	movs	r3, #2
 80011a4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80011a6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80011aa:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80011ac:	2308      	movs	r3, #8
 80011ae:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 170;
 80011b0:	23aa      	movs	r3, #170	; 0xaa
 80011b2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80011b4:	2302      	movs	r3, #2
 80011b6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80011b8:	2304      	movs	r3, #4
 80011ba:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011bc:	f107 0320 	add.w	r3, r7, #32
 80011c0:	4618      	mov	r0, r3
 80011c2:	f002 fa35 	bl	8003630 <HAL_RCC_OscConfig>
 80011c6:	4603      	mov	r3, r0
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d001      	beq.n	80011d0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80011cc:	f000 f8d6 	bl	800137c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011d0:	230f      	movs	r3, #15
 80011d2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80011d4:	2302      	movs	r3, #2
 80011d6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80011d8:	2300      	movs	r3, #0
 80011da:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80011dc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011e0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80011e2:	2300      	movs	r3, #0
 80011e4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80011e6:	f107 030c 	add.w	r3, r7, #12
 80011ea:	2102      	movs	r1, #2
 80011ec:	4618      	mov	r0, r3
 80011ee:	f002 fc97 	bl	8003b20 <HAL_RCC_ClockConfig>
 80011f2:	4603      	mov	r3, r0
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d001      	beq.n	80011fc <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80011f8:	f000 f8c0 	bl	800137c <Error_Handler>
  }
}
 80011fc:	bf00      	nop
 80011fe:	3750      	adds	r7, #80	; 0x50
 8001200:	46bd      	mov	sp, r7
 8001202:	bd80      	pop	{r7, pc}
 8001204:	40023800 	.word	0x40023800
 8001208:	40007000 	.word	0x40007000

0800120c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001210:	4b12      	ldr	r3, [pc, #72]	; (800125c <MX_I2C1_Init+0x50>)
 8001212:	4a13      	ldr	r2, [pc, #76]	; (8001260 <MX_I2C1_Init+0x54>)
 8001214:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001216:	4b11      	ldr	r3, [pc, #68]	; (800125c <MX_I2C1_Init+0x50>)
 8001218:	4a12      	ldr	r2, [pc, #72]	; (8001264 <MX_I2C1_Init+0x58>)
 800121a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800121c:	4b0f      	ldr	r3, [pc, #60]	; (800125c <MX_I2C1_Init+0x50>)
 800121e:	2200      	movs	r2, #0
 8001220:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001222:	4b0e      	ldr	r3, [pc, #56]	; (800125c <MX_I2C1_Init+0x50>)
 8001224:	2200      	movs	r2, #0
 8001226:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001228:	4b0c      	ldr	r3, [pc, #48]	; (800125c <MX_I2C1_Init+0x50>)
 800122a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800122e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001230:	4b0a      	ldr	r3, [pc, #40]	; (800125c <MX_I2C1_Init+0x50>)
 8001232:	2200      	movs	r2, #0
 8001234:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001236:	4b09      	ldr	r3, [pc, #36]	; (800125c <MX_I2C1_Init+0x50>)
 8001238:	2200      	movs	r2, #0
 800123a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800123c:	4b07      	ldr	r3, [pc, #28]	; (800125c <MX_I2C1_Init+0x50>)
 800123e:	2200      	movs	r2, #0
 8001240:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001242:	4b06      	ldr	r3, [pc, #24]	; (800125c <MX_I2C1_Init+0x50>)
 8001244:	2200      	movs	r2, #0
 8001246:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001248:	4804      	ldr	r0, [pc, #16]	; (800125c <MX_I2C1_Init+0x50>)
 800124a:	f001 f8b1 	bl	80023b0 <HAL_I2C_Init>
 800124e:	4603      	mov	r3, r0
 8001250:	2b00      	cmp	r3, #0
 8001252:	d001      	beq.n	8001258 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001254:	f000 f892 	bl	800137c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001258:	bf00      	nop
 800125a:	bd80      	pop	{r7, pc}
 800125c:	2000011c 	.word	0x2000011c
 8001260:	40005400 	.word	0x40005400
 8001264:	000186a0 	.word	0x000186a0

08001268 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800126c:	4b11      	ldr	r3, [pc, #68]	; (80012b4 <MX_USART2_UART_Init+0x4c>)
 800126e:	4a12      	ldr	r2, [pc, #72]	; (80012b8 <MX_USART2_UART_Init+0x50>)
 8001270:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001272:	4b10      	ldr	r3, [pc, #64]	; (80012b4 <MX_USART2_UART_Init+0x4c>)
 8001274:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001278:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800127a:	4b0e      	ldr	r3, [pc, #56]	; (80012b4 <MX_USART2_UART_Init+0x4c>)
 800127c:	2200      	movs	r2, #0
 800127e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001280:	4b0c      	ldr	r3, [pc, #48]	; (80012b4 <MX_USART2_UART_Init+0x4c>)
 8001282:	2200      	movs	r2, #0
 8001284:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001286:	4b0b      	ldr	r3, [pc, #44]	; (80012b4 <MX_USART2_UART_Init+0x4c>)
 8001288:	2200      	movs	r2, #0
 800128a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800128c:	4b09      	ldr	r3, [pc, #36]	; (80012b4 <MX_USART2_UART_Init+0x4c>)
 800128e:	220c      	movs	r2, #12
 8001290:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001292:	4b08      	ldr	r3, [pc, #32]	; (80012b4 <MX_USART2_UART_Init+0x4c>)
 8001294:	2200      	movs	r2, #0
 8001296:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001298:	4b06      	ldr	r3, [pc, #24]	; (80012b4 <MX_USART2_UART_Init+0x4c>)
 800129a:	2200      	movs	r2, #0
 800129c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800129e:	4805      	ldr	r0, [pc, #20]	; (80012b4 <MX_USART2_UART_Init+0x4c>)
 80012a0:	f002 fe5e 	bl	8003f60 <HAL_UART_Init>
 80012a4:	4603      	mov	r3, r0
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d001      	beq.n	80012ae <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80012aa:	f000 f867 	bl	800137c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80012ae:	bf00      	nop
 80012b0:	bd80      	pop	{r7, pc}
 80012b2:	bf00      	nop
 80012b4:	20000170 	.word	0x20000170
 80012b8:	40004400 	.word	0x40004400

080012bc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	b08a      	sub	sp, #40	; 0x28
 80012c0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012c2:	f107 0314 	add.w	r3, r7, #20
 80012c6:	2200      	movs	r2, #0
 80012c8:	601a      	str	r2, [r3, #0]
 80012ca:	605a      	str	r2, [r3, #4]
 80012cc:	609a      	str	r2, [r3, #8]
 80012ce:	60da      	str	r2, [r3, #12]
 80012d0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80012d2:	2300      	movs	r3, #0
 80012d4:	613b      	str	r3, [r7, #16]
 80012d6:	4b27      	ldr	r3, [pc, #156]	; (8001374 <MX_GPIO_Init+0xb8>)
 80012d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012da:	4a26      	ldr	r2, [pc, #152]	; (8001374 <MX_GPIO_Init+0xb8>)
 80012dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80012e0:	6313      	str	r3, [r2, #48]	; 0x30
 80012e2:	4b24      	ldr	r3, [pc, #144]	; (8001374 <MX_GPIO_Init+0xb8>)
 80012e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80012ea:	613b      	str	r3, [r7, #16]
 80012ec:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012ee:	2300      	movs	r3, #0
 80012f0:	60fb      	str	r3, [r7, #12]
 80012f2:	4b20      	ldr	r3, [pc, #128]	; (8001374 <MX_GPIO_Init+0xb8>)
 80012f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012f6:	4a1f      	ldr	r2, [pc, #124]	; (8001374 <MX_GPIO_Init+0xb8>)
 80012f8:	f043 0301 	orr.w	r3, r3, #1
 80012fc:	6313      	str	r3, [r2, #48]	; 0x30
 80012fe:	4b1d      	ldr	r3, [pc, #116]	; (8001374 <MX_GPIO_Init+0xb8>)
 8001300:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001302:	f003 0301 	and.w	r3, r3, #1
 8001306:	60fb      	str	r3, [r7, #12]
 8001308:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800130a:	2300      	movs	r3, #0
 800130c:	60bb      	str	r3, [r7, #8]
 800130e:	4b19      	ldr	r3, [pc, #100]	; (8001374 <MX_GPIO_Init+0xb8>)
 8001310:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001312:	4a18      	ldr	r2, [pc, #96]	; (8001374 <MX_GPIO_Init+0xb8>)
 8001314:	f043 0308 	orr.w	r3, r3, #8
 8001318:	6313      	str	r3, [r2, #48]	; 0x30
 800131a:	4b16      	ldr	r3, [pc, #88]	; (8001374 <MX_GPIO_Init+0xb8>)
 800131c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800131e:	f003 0308 	and.w	r3, r3, #8
 8001322:	60bb      	str	r3, [r7, #8]
 8001324:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001326:	2300      	movs	r3, #0
 8001328:	607b      	str	r3, [r7, #4]
 800132a:	4b12      	ldr	r3, [pc, #72]	; (8001374 <MX_GPIO_Init+0xb8>)
 800132c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800132e:	4a11      	ldr	r2, [pc, #68]	; (8001374 <MX_GPIO_Init+0xb8>)
 8001330:	f043 0302 	orr.w	r3, r3, #2
 8001334:	6313      	str	r3, [r2, #48]	; 0x30
 8001336:	4b0f      	ldr	r3, [pc, #60]	; (8001374 <MX_GPIO_Init+0xb8>)
 8001338:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800133a:	f003 0302 	and.w	r3, r3, #2
 800133e:	607b      	str	r3, [r7, #4]
 8001340:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8001342:	2200      	movs	r2, #0
 8001344:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8001348:	480b      	ldr	r0, [pc, #44]	; (8001378 <MX_GPIO_Init+0xbc>)
 800134a:	f001 f817 	bl	800237c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PD12 PD13 PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 800134e:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8001352:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001354:	2301      	movs	r3, #1
 8001356:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001358:	2300      	movs	r3, #0
 800135a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800135c:	2300      	movs	r3, #0
 800135e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001360:	f107 0314 	add.w	r3, r7, #20
 8001364:	4619      	mov	r1, r3
 8001366:	4804      	ldr	r0, [pc, #16]	; (8001378 <MX_GPIO_Init+0xbc>)
 8001368:	f000 fe84 	bl	8002074 <HAL_GPIO_Init>

}
 800136c:	bf00      	nop
 800136e:	3728      	adds	r7, #40	; 0x28
 8001370:	46bd      	mov	sp, r7
 8001372:	bd80      	pop	{r7, pc}
 8001374:	40023800 	.word	0x40023800
 8001378:	40020c00 	.word	0x40020c00

0800137c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800137c:	b480      	push	{r7}
 800137e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001380:	b672      	cpsid	i
}
 8001382:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001384:	e7fe      	b.n	8001384 <Error_Handler+0x8>

08001386 <MPU6050_Init>:
        .Q_angle = 0.001f,
        .Q_bias = 0.003f,
        .R_measure = 0.03f,
};

uint8_t MPU6050_Init(I2C_HandleTypeDef *I2Cx) {
 8001386:	b580      	push	{r7, lr}
 8001388:	b088      	sub	sp, #32
 800138a:	af04      	add	r7, sp, #16
 800138c:	6078      	str	r0, [r7, #4]
    uint8_t check;
    uint8_t Data;

    // check device ID WHO_AM_I

    HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, WHO_AM_I_REG, 1, &check, 1, i2c_timeout);
 800138e:	2364      	movs	r3, #100	; 0x64
 8001390:	9302      	str	r3, [sp, #8]
 8001392:	2301      	movs	r3, #1
 8001394:	9301      	str	r3, [sp, #4]
 8001396:	f107 030f 	add.w	r3, r7, #15
 800139a:	9300      	str	r3, [sp, #0]
 800139c:	2301      	movs	r3, #1
 800139e:	2275      	movs	r2, #117	; 0x75
 80013a0:	21d0      	movs	r1, #208	; 0xd0
 80013a2:	6878      	ldr	r0, [r7, #4]
 80013a4:	f001 fb40 	bl	8002a28 <HAL_I2C_Mem_Read>

    if (check == 104)  // 0x68 will be returned by the sensor if everything goes well
 80013a8:	7bfb      	ldrb	r3, [r7, #15]
 80013aa:	2b68      	cmp	r3, #104	; 0x68
 80013ac:	d13d      	bne.n	800142a <MPU6050_Init+0xa4>
    {
        // power management register 0X6B we should write all 0's to wake the sensor up
        Data = 0;
 80013ae:	2300      	movs	r3, #0
 80013b0:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, PWR_MGMT_1_REG, 1, &Data, 1, i2c_timeout);
 80013b2:	2364      	movs	r3, #100	; 0x64
 80013b4:	9302      	str	r3, [sp, #8]
 80013b6:	2301      	movs	r3, #1
 80013b8:	9301      	str	r3, [sp, #4]
 80013ba:	f107 030e 	add.w	r3, r7, #14
 80013be:	9300      	str	r3, [sp, #0]
 80013c0:	2301      	movs	r3, #1
 80013c2:	226b      	movs	r2, #107	; 0x6b
 80013c4:	21d0      	movs	r1, #208	; 0xd0
 80013c6:	6878      	ldr	r0, [r7, #4]
 80013c8:	f001 fa34 	bl	8002834 <HAL_I2C_Mem_Write>

        // Set DATA RATE of 1KHz by writing SMPLRT_DIV register
        Data = 0x07;
 80013cc:	2307      	movs	r3, #7
 80013ce:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, SMPLRT_DIV_REG, 1, &Data, 1, i2c_timeout);
 80013d0:	2364      	movs	r3, #100	; 0x64
 80013d2:	9302      	str	r3, [sp, #8]
 80013d4:	2301      	movs	r3, #1
 80013d6:	9301      	str	r3, [sp, #4]
 80013d8:	f107 030e 	add.w	r3, r7, #14
 80013dc:	9300      	str	r3, [sp, #0]
 80013de:	2301      	movs	r3, #1
 80013e0:	2219      	movs	r2, #25
 80013e2:	21d0      	movs	r1, #208	; 0xd0
 80013e4:	6878      	ldr	r0, [r7, #4]
 80013e6:	f001 fa25 	bl	8002834 <HAL_I2C_Mem_Write>

        // Set accelerometer configuration in ACCEL_CONFIG Register
        // XA_ST=0,YA_ST=0,ZA_ST=0, FS_SEL=0 -> � 2g
        Data = 0x00;
 80013ea:	2300      	movs	r3, #0
 80013ec:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, ACCEL_CONFIG_REG, 1, &Data, 1, i2c_timeout);
 80013ee:	2364      	movs	r3, #100	; 0x64
 80013f0:	9302      	str	r3, [sp, #8]
 80013f2:	2301      	movs	r3, #1
 80013f4:	9301      	str	r3, [sp, #4]
 80013f6:	f107 030e 	add.w	r3, r7, #14
 80013fa:	9300      	str	r3, [sp, #0]
 80013fc:	2301      	movs	r3, #1
 80013fe:	221c      	movs	r2, #28
 8001400:	21d0      	movs	r1, #208	; 0xd0
 8001402:	6878      	ldr	r0, [r7, #4]
 8001404:	f001 fa16 	bl	8002834 <HAL_I2C_Mem_Write>

        // Set Gyroscopic configuration in GYRO_CONFIG Register
        // XG_ST=0,YG_ST=0,ZG_ST=0, FS_SEL=0 -> � 250 �/s
        Data = 0x00;
 8001408:	2300      	movs	r3, #0
 800140a:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, GYRO_CONFIG_REG, 1, &Data, 1, i2c_timeout);
 800140c:	2364      	movs	r3, #100	; 0x64
 800140e:	9302      	str	r3, [sp, #8]
 8001410:	2301      	movs	r3, #1
 8001412:	9301      	str	r3, [sp, #4]
 8001414:	f107 030e 	add.w	r3, r7, #14
 8001418:	9300      	str	r3, [sp, #0]
 800141a:	2301      	movs	r3, #1
 800141c:	221b      	movs	r2, #27
 800141e:	21d0      	movs	r1, #208	; 0xd0
 8001420:	6878      	ldr	r0, [r7, #4]
 8001422:	f001 fa07 	bl	8002834 <HAL_I2C_Mem_Write>
        return 0;
 8001426:	2300      	movs	r3, #0
 8001428:	e000      	b.n	800142c <MPU6050_Init+0xa6>
    }
    return 1;
 800142a:	2301      	movs	r3, #1
}
 800142c:	4618      	mov	r0, r3
 800142e:	3710      	adds	r7, #16
 8001430:	46bd      	mov	sp, r7
 8001432:	bd80      	pop	{r7, pc}
 8001434:	0000      	movs	r0, r0
	...

08001438 <MPU6050_Read_All>:

    temp = (int16_t) (Rec_Data[0] << 8 | Rec_Data[1]);
    DataStruct->Temperature = (float) ((int16_t) temp / (float) 340.0 + (float) 36.53);
}

void MPU6050_Read_All(I2C_HandleTypeDef *I2Cx, MPU6050_t *DataStruct) {
 8001438:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800143c:	b094      	sub	sp, #80	; 0x50
 800143e:	af04      	add	r7, sp, #16
 8001440:	6078      	str	r0, [r7, #4]
 8001442:	6039      	str	r1, [r7, #0]
    uint8_t Rec_Data[14];
    int16_t temp;

    // Read 14 BYTES of data starting from ACCEL_XOUT_H register

    HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, ACCEL_XOUT_H_REG, 1, Rec_Data, 14, i2c_timeout);
 8001444:	2364      	movs	r3, #100	; 0x64
 8001446:	9302      	str	r3, [sp, #8]
 8001448:	230e      	movs	r3, #14
 800144a:	9301      	str	r3, [sp, #4]
 800144c:	f107 0308 	add.w	r3, r7, #8
 8001450:	9300      	str	r3, [sp, #0]
 8001452:	2301      	movs	r3, #1
 8001454:	223b      	movs	r2, #59	; 0x3b
 8001456:	21d0      	movs	r1, #208	; 0xd0
 8001458:	6878      	ldr	r0, [r7, #4]
 800145a:	f001 fae5 	bl	8002a28 <HAL_I2C_Mem_Read>

    DataStruct->Accel_X_RAW = (int16_t) (Rec_Data[0] << 8 | Rec_Data[1]);
 800145e:	7a3b      	ldrb	r3, [r7, #8]
 8001460:	021b      	lsls	r3, r3, #8
 8001462:	b21a      	sxth	r2, r3
 8001464:	7a7b      	ldrb	r3, [r7, #9]
 8001466:	b21b      	sxth	r3, r3
 8001468:	4313      	orrs	r3, r2
 800146a:	b21a      	sxth	r2, r3
 800146c:	683b      	ldr	r3, [r7, #0]
 800146e:	801a      	strh	r2, [r3, #0]
    DataStruct->Accel_Y_RAW = (int16_t) (Rec_Data[2] << 8 | Rec_Data[3]);
 8001470:	7abb      	ldrb	r3, [r7, #10]
 8001472:	021b      	lsls	r3, r3, #8
 8001474:	b21a      	sxth	r2, r3
 8001476:	7afb      	ldrb	r3, [r7, #11]
 8001478:	b21b      	sxth	r3, r3
 800147a:	4313      	orrs	r3, r2
 800147c:	b21a      	sxth	r2, r3
 800147e:	683b      	ldr	r3, [r7, #0]
 8001480:	805a      	strh	r2, [r3, #2]
    DataStruct->Accel_Z_RAW = (int16_t) (Rec_Data[4] << 8 | Rec_Data[5]);
 8001482:	7b3b      	ldrb	r3, [r7, #12]
 8001484:	021b      	lsls	r3, r3, #8
 8001486:	b21a      	sxth	r2, r3
 8001488:	7b7b      	ldrb	r3, [r7, #13]
 800148a:	b21b      	sxth	r3, r3
 800148c:	4313      	orrs	r3, r2
 800148e:	b21a      	sxth	r2, r3
 8001490:	683b      	ldr	r3, [r7, #0]
 8001492:	809a      	strh	r2, [r3, #4]
    temp = (int16_t) (Rec_Data[6] << 8 | Rec_Data[7]);
 8001494:	7bbb      	ldrb	r3, [r7, #14]
 8001496:	021b      	lsls	r3, r3, #8
 8001498:	b21a      	sxth	r2, r3
 800149a:	7bfb      	ldrb	r3, [r7, #15]
 800149c:	b21b      	sxth	r3, r3
 800149e:	4313      	orrs	r3, r2
 80014a0:	86fb      	strh	r3, [r7, #54]	; 0x36
    DataStruct->Gyro_X_RAW = (int16_t) (Rec_Data[8] << 8 | Rec_Data[9]);
 80014a2:	7c3b      	ldrb	r3, [r7, #16]
 80014a4:	021b      	lsls	r3, r3, #8
 80014a6:	b21a      	sxth	r2, r3
 80014a8:	7c7b      	ldrb	r3, [r7, #17]
 80014aa:	b21b      	sxth	r3, r3
 80014ac:	4313      	orrs	r3, r2
 80014ae:	b21a      	sxth	r2, r3
 80014b0:	683b      	ldr	r3, [r7, #0]
 80014b2:	841a      	strh	r2, [r3, #32]
    DataStruct->Gyro_Y_RAW = (int16_t) (Rec_Data[10] << 8 | Rec_Data[11]);
 80014b4:	7cbb      	ldrb	r3, [r7, #18]
 80014b6:	021b      	lsls	r3, r3, #8
 80014b8:	b21a      	sxth	r2, r3
 80014ba:	7cfb      	ldrb	r3, [r7, #19]
 80014bc:	b21b      	sxth	r3, r3
 80014be:	4313      	orrs	r3, r2
 80014c0:	b21a      	sxth	r2, r3
 80014c2:	683b      	ldr	r3, [r7, #0]
 80014c4:	845a      	strh	r2, [r3, #34]	; 0x22
    DataStruct->Gyro_Z_RAW = (int16_t) (Rec_Data[12] << 8 | Rec_Data[13]);
 80014c6:	7d3b      	ldrb	r3, [r7, #20]
 80014c8:	021b      	lsls	r3, r3, #8
 80014ca:	b21a      	sxth	r2, r3
 80014cc:	7d7b      	ldrb	r3, [r7, #21]
 80014ce:	b21b      	sxth	r3, r3
 80014d0:	4313      	orrs	r3, r2
 80014d2:	b21a      	sxth	r2, r3
 80014d4:	683b      	ldr	r3, [r7, #0]
 80014d6:	849a      	strh	r2, [r3, #36]	; 0x24

    DataStruct->Ax = DataStruct->Accel_X_RAW / 16384.0;
 80014d8:	683b      	ldr	r3, [r7, #0]
 80014da:	f9b3 3000 	ldrsh.w	r3, [r3]
 80014de:	4618      	mov	r0, r3
 80014e0:	f7ff f820 	bl	8000524 <__aeabi_i2d>
 80014e4:	f04f 0200 	mov.w	r2, #0
 80014e8:	4b9d      	ldr	r3, [pc, #628]	; (8001760 <MPU6050_Read_All+0x328>)
 80014ea:	f7ff f9af 	bl	800084c <__aeabi_ddiv>
 80014ee:	4602      	mov	r2, r0
 80014f0:	460b      	mov	r3, r1
 80014f2:	6839      	ldr	r1, [r7, #0]
 80014f4:	e9c1 2302 	strd	r2, r3, [r1, #8]
    DataStruct->Ay = DataStruct->Accel_Y_RAW / 16384.0;
 80014f8:	683b      	ldr	r3, [r7, #0]
 80014fa:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80014fe:	4618      	mov	r0, r3
 8001500:	f7ff f810 	bl	8000524 <__aeabi_i2d>
 8001504:	f04f 0200 	mov.w	r2, #0
 8001508:	4b95      	ldr	r3, [pc, #596]	; (8001760 <MPU6050_Read_All+0x328>)
 800150a:	f7ff f99f 	bl	800084c <__aeabi_ddiv>
 800150e:	4602      	mov	r2, r0
 8001510:	460b      	mov	r3, r1
 8001512:	6839      	ldr	r1, [r7, #0]
 8001514:	e9c1 2304 	strd	r2, r3, [r1, #16]
    DataStruct->Az = DataStruct->Accel_Z_RAW / Accel_Z_corrector;
 8001518:	683b      	ldr	r3, [r7, #0]
 800151a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800151e:	4618      	mov	r0, r3
 8001520:	f7ff f800 	bl	8000524 <__aeabi_i2d>
 8001524:	a388      	add	r3, pc, #544	; (adr r3, 8001748 <MPU6050_Read_All+0x310>)
 8001526:	e9d3 2300 	ldrd	r2, r3, [r3]
 800152a:	f7ff f98f 	bl	800084c <__aeabi_ddiv>
 800152e:	4602      	mov	r2, r0
 8001530:	460b      	mov	r3, r1
 8001532:	6839      	ldr	r1, [r7, #0]
 8001534:	e9c1 2306 	strd	r2, r3, [r1, #24]
    DataStruct->Temperature = (float) ((int16_t) temp / (float) 340.0 + (float) 36.53);
 8001538:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 800153c:	ee07 3a90 	vmov	s15, r3
 8001540:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001544:	eddf 6a87 	vldr	s13, [pc, #540]	; 8001764 <MPU6050_Read_All+0x32c>
 8001548:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800154c:	ed9f 7a86 	vldr	s14, [pc, #536]	; 8001768 <MPU6050_Read_All+0x330>
 8001550:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001554:	683b      	ldr	r3, [r7, #0]
 8001556:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40
    DataStruct->Gx = DataStruct->Gyro_X_RAW / 131.0;
 800155a:	683b      	ldr	r3, [r7, #0]
 800155c:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8001560:	4618      	mov	r0, r3
 8001562:	f7fe ffdf 	bl	8000524 <__aeabi_i2d>
 8001566:	a37a      	add	r3, pc, #488	; (adr r3, 8001750 <MPU6050_Read_All+0x318>)
 8001568:	e9d3 2300 	ldrd	r2, r3, [r3]
 800156c:	f7ff f96e 	bl	800084c <__aeabi_ddiv>
 8001570:	4602      	mov	r2, r0
 8001572:	460b      	mov	r3, r1
 8001574:	6839      	ldr	r1, [r7, #0]
 8001576:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    DataStruct->Gy = DataStruct->Gyro_Y_RAW / 131.0;
 800157a:	683b      	ldr	r3, [r7, #0]
 800157c:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 8001580:	4618      	mov	r0, r3
 8001582:	f7fe ffcf 	bl	8000524 <__aeabi_i2d>
 8001586:	a372      	add	r3, pc, #456	; (adr r3, 8001750 <MPU6050_Read_All+0x318>)
 8001588:	e9d3 2300 	ldrd	r2, r3, [r3]
 800158c:	f7ff f95e 	bl	800084c <__aeabi_ddiv>
 8001590:	4602      	mov	r2, r0
 8001592:	460b      	mov	r3, r1
 8001594:	6839      	ldr	r1, [r7, #0]
 8001596:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
    DataStruct->Gz = DataStruct->Gyro_Z_RAW / 131.0;
 800159a:	683b      	ldr	r3, [r7, #0]
 800159c:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 80015a0:	4618      	mov	r0, r3
 80015a2:	f7fe ffbf 	bl	8000524 <__aeabi_i2d>
 80015a6:	a36a      	add	r3, pc, #424	; (adr r3, 8001750 <MPU6050_Read_All+0x318>)
 80015a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015ac:	f7ff f94e 	bl	800084c <__aeabi_ddiv>
 80015b0:	4602      	mov	r2, r0
 80015b2:	460b      	mov	r3, r1
 80015b4:	6839      	ldr	r1, [r7, #0]
 80015b6:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38

    // Kalman angle solve
    double dt = (double) (HAL_GetTick() - timer) / 1000;
 80015ba:	f000 fc45 	bl	8001e48 <HAL_GetTick>
 80015be:	4602      	mov	r2, r0
 80015c0:	4b6a      	ldr	r3, [pc, #424]	; (800176c <MPU6050_Read_All+0x334>)
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	1ad3      	subs	r3, r2, r3
 80015c6:	4618      	mov	r0, r3
 80015c8:	f7fe ff9c 	bl	8000504 <__aeabi_ui2d>
 80015cc:	f04f 0200 	mov.w	r2, #0
 80015d0:	4b67      	ldr	r3, [pc, #412]	; (8001770 <MPU6050_Read_All+0x338>)
 80015d2:	f7ff f93b 	bl	800084c <__aeabi_ddiv>
 80015d6:	4602      	mov	r2, r0
 80015d8:	460b      	mov	r3, r1
 80015da:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    timer = HAL_GetTick();
 80015de:	f000 fc33 	bl	8001e48 <HAL_GetTick>
 80015e2:	4603      	mov	r3, r0
 80015e4:	4a61      	ldr	r2, [pc, #388]	; (800176c <MPU6050_Read_All+0x334>)
 80015e6:	6013      	str	r3, [r2, #0]
    double roll;
    double roll_sqrt = sqrt(
            DataStruct->Accel_X_RAW * DataStruct->Accel_X_RAW + DataStruct->Accel_Z_RAW * DataStruct->Accel_Z_RAW);
 80015e8:	683b      	ldr	r3, [r7, #0]
 80015ea:	f9b3 3000 	ldrsh.w	r3, [r3]
 80015ee:	461a      	mov	r2, r3
 80015f0:	683b      	ldr	r3, [r7, #0]
 80015f2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80015f6:	fb03 f202 	mul.w	r2, r3, r2
 80015fa:	683b      	ldr	r3, [r7, #0]
 80015fc:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001600:	4619      	mov	r1, r3
 8001602:	683b      	ldr	r3, [r7, #0]
 8001604:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001608:	fb01 f303 	mul.w	r3, r1, r3
 800160c:	4413      	add	r3, r2
    double roll_sqrt = sqrt(
 800160e:	4618      	mov	r0, r3
 8001610:	f7fe ff88 	bl	8000524 <__aeabi_i2d>
 8001614:	4602      	mov	r2, r0
 8001616:	460b      	mov	r3, r1
 8001618:	ec43 2b10 	vmov	d0, r2, r3
 800161c:	f003 fdaf 	bl	800517e <sqrt>
 8001620:	ed87 0b08 	vstr	d0, [r7, #32]
    if (roll_sqrt != 0.0) {
 8001624:	f04f 0200 	mov.w	r2, #0
 8001628:	f04f 0300 	mov.w	r3, #0
 800162c:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001630:	f7ff fa4a 	bl	8000ac8 <__aeabi_dcmpeq>
 8001634:	4603      	mov	r3, r0
 8001636:	2b00      	cmp	r3, #0
 8001638:	d124      	bne.n	8001684 <MPU6050_Read_All+0x24c>
        roll = atan(DataStruct->Accel_Y_RAW / roll_sqrt) * RAD_TO_DEG;
 800163a:	683b      	ldr	r3, [r7, #0]
 800163c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001640:	4618      	mov	r0, r3
 8001642:	f7fe ff6f 	bl	8000524 <__aeabi_i2d>
 8001646:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800164a:	f7ff f8ff 	bl	800084c <__aeabi_ddiv>
 800164e:	4602      	mov	r2, r0
 8001650:	460b      	mov	r3, r1
 8001652:	ec43 2b17 	vmov	d7, r2, r3
 8001656:	eeb0 0a47 	vmov.f32	s0, s14
 800165a:	eef0 0a67 	vmov.f32	s1, s15
 800165e:	f003 fbe3 	bl	8004e28 <atan>
 8001662:	ec51 0b10 	vmov	r0, r1, d0
 8001666:	a33c      	add	r3, pc, #240	; (adr r3, 8001758 <MPU6050_Read_All+0x320>)
 8001668:	e9d3 2300 	ldrd	r2, r3, [r3]
 800166c:	f7fe ffc4 	bl	80005f8 <__aeabi_dmul>
 8001670:	4602      	mov	r2, r0
 8001672:	460b      	mov	r3, r1
 8001674:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
        DataStruct->AngleZ =roll;
 8001678:	6839      	ldr	r1, [r7, #0]
 800167a:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800167e:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
 8001682:	e00a      	b.n	800169a <MPU6050_Read_All+0x262>
    } else {
        roll = 0.0;
 8001684:	f04f 0200 	mov.w	r2, #0
 8001688:	f04f 0300 	mov.w	r3, #0
 800168c:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
        DataStruct->AngleZ =roll;
 8001690:	6839      	ldr	r1, [r7, #0]
 8001692:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8001696:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
    }
    double pitch = atan2(-DataStruct->Accel_X_RAW, DataStruct->Accel_Z_RAW) * RAD_TO_DEG;
 800169a:	683b      	ldr	r3, [r7, #0]
 800169c:	f9b3 3000 	ldrsh.w	r3, [r3]
 80016a0:	425b      	negs	r3, r3
 80016a2:	4618      	mov	r0, r3
 80016a4:	f7fe ff3e 	bl	8000524 <__aeabi_i2d>
 80016a8:	4682      	mov	sl, r0
 80016aa:	468b      	mov	fp, r1
 80016ac:	683b      	ldr	r3, [r7, #0]
 80016ae:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80016b2:	4618      	mov	r0, r3
 80016b4:	f7fe ff36 	bl	8000524 <__aeabi_i2d>
 80016b8:	4602      	mov	r2, r0
 80016ba:	460b      	mov	r3, r1
 80016bc:	ec43 2b11 	vmov	d1, r2, r3
 80016c0:	ec4b ab10 	vmov	d0, sl, fp
 80016c4:	f003 fd59 	bl	800517a <atan2>
 80016c8:	ec51 0b10 	vmov	r0, r1, d0
 80016cc:	a322      	add	r3, pc, #136	; (adr r3, 8001758 <MPU6050_Read_All+0x320>)
 80016ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016d2:	f7fe ff91 	bl	80005f8 <__aeabi_dmul>
 80016d6:	4602      	mov	r2, r0
 80016d8:	460b      	mov	r3, r1
 80016da:	e9c7 2306 	strd	r2, r3, [r7, #24]
    if ((pitch < -90 && DataStruct->KalmanAngleY > 90) || (pitch > 90 && DataStruct->KalmanAngleY < -90)) {
 80016de:	f04f 0200 	mov.w	r2, #0
 80016e2:	4b24      	ldr	r3, [pc, #144]	; (8001774 <MPU6050_Read_All+0x33c>)
 80016e4:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80016e8:	f7ff f9f8 	bl	8000adc <__aeabi_dcmplt>
 80016ec:	4603      	mov	r3, r0
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d00a      	beq.n	8001708 <MPU6050_Read_All+0x2d0>
 80016f2:	683b      	ldr	r3, [r7, #0]
 80016f4:	e9d3 0116 	ldrd	r0, r1, [r3, #88]	; 0x58
 80016f8:	f04f 0200 	mov.w	r2, #0
 80016fc:	4b1e      	ldr	r3, [pc, #120]	; (8001778 <MPU6050_Read_All+0x340>)
 80016fe:	f7ff fa0b 	bl	8000b18 <__aeabi_dcmpgt>
 8001702:	4603      	mov	r3, r0
 8001704:	2b00      	cmp	r3, #0
 8001706:	d114      	bne.n	8001732 <MPU6050_Read_All+0x2fa>
 8001708:	f04f 0200 	mov.w	r2, #0
 800170c:	4b1a      	ldr	r3, [pc, #104]	; (8001778 <MPU6050_Read_All+0x340>)
 800170e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001712:	f7ff fa01 	bl	8000b18 <__aeabi_dcmpgt>
 8001716:	4603      	mov	r3, r0
 8001718:	2b00      	cmp	r3, #0
 800171a:	d031      	beq.n	8001780 <MPU6050_Read_All+0x348>
 800171c:	683b      	ldr	r3, [r7, #0]
 800171e:	e9d3 0116 	ldrd	r0, r1, [r3, #88]	; 0x58
 8001722:	f04f 0200 	mov.w	r2, #0
 8001726:	4b13      	ldr	r3, [pc, #76]	; (8001774 <MPU6050_Read_All+0x33c>)
 8001728:	f7ff f9d8 	bl	8000adc <__aeabi_dcmplt>
 800172c:	4603      	mov	r3, r0
 800172e:	2b00      	cmp	r3, #0
 8001730:	d026      	beq.n	8001780 <MPU6050_Read_All+0x348>
        KalmanY.angle = pitch;
 8001732:	4912      	ldr	r1, [pc, #72]	; (800177c <MPU6050_Read_All+0x344>)
 8001734:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001738:	e9c1 2306 	strd	r2, r3, [r1, #24]
        DataStruct->KalmanAngleY = pitch;
 800173c:	6839      	ldr	r1, [r7, #0]
 800173e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001742:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
 8001746:	e030      	b.n	80017aa <MPU6050_Read_All+0x372>
 8001748:	00000000 	.word	0x00000000
 800174c:	40cc2900 	.word	0x40cc2900
 8001750:	00000000 	.word	0x00000000
 8001754:	40606000 	.word	0x40606000
 8001758:	1a63c1f8 	.word	0x1a63c1f8
 800175c:	404ca5dc 	.word	0x404ca5dc
 8001760:	40d00000 	.word	0x40d00000
 8001764:	43aa0000 	.word	0x43aa0000
 8001768:	42121eb8 	.word	0x42121eb8
 800176c:	20000218 	.word	0x20000218
 8001770:	408f4000 	.word	0x408f4000
 8001774:	c0568000 	.word	0xc0568000
 8001778:	40568000 	.word	0x40568000
 800177c:	20000048 	.word	0x20000048
    } else {
        DataStruct->KalmanAngleY = Kalman_getAngle(&KalmanY, pitch, DataStruct->Gy, dt);
 8001780:	683b      	ldr	r3, [r7, #0]
 8001782:	ed93 7b0c 	vldr	d7, [r3, #48]	; 0x30
 8001786:	ed97 2b0a 	vldr	d2, [r7, #40]	; 0x28
 800178a:	eeb0 1a47 	vmov.f32	s2, s14
 800178e:	eef0 1a67 	vmov.f32	s3, s15
 8001792:	ed97 0b06 	vldr	d0, [r7, #24]
 8001796:	481e      	ldr	r0, [pc, #120]	; (8001810 <MPU6050_Read_All+0x3d8>)
 8001798:	f000 f840 	bl	800181c <Kalman_getAngle>
 800179c:	eeb0 7a40 	vmov.f32	s14, s0
 80017a0:	eef0 7a60 	vmov.f32	s15, s1
 80017a4:	683b      	ldr	r3, [r7, #0]
 80017a6:	ed83 7b16 	vstr	d7, [r3, #88]	; 0x58
    }
    if (fabs(DataStruct->KalmanAngleY) > 90)
 80017aa:	683b      	ldr	r3, [r7, #0]
 80017ac:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	; 0x58
 80017b0:	4690      	mov	r8, r2
 80017b2:	f023 4900 	bic.w	r9, r3, #2147483648	; 0x80000000
 80017b6:	f04f 0200 	mov.w	r2, #0
 80017ba:	4b16      	ldr	r3, [pc, #88]	; (8001814 <MPU6050_Read_All+0x3dc>)
 80017bc:	4640      	mov	r0, r8
 80017be:	4649      	mov	r1, r9
 80017c0:	f7ff f9aa 	bl	8000b18 <__aeabi_dcmpgt>
 80017c4:	4603      	mov	r3, r0
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d008      	beq.n	80017dc <MPU6050_Read_All+0x3a4>
        DataStruct->Gx = -DataStruct->Gx;
 80017ca:	683b      	ldr	r3, [r7, #0]
 80017cc:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 80017d0:	4614      	mov	r4, r2
 80017d2:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 80017d6:	683b      	ldr	r3, [r7, #0]
 80017d8:	e9c3 450a 	strd	r4, r5, [r3, #40]	; 0x28
    DataStruct->KalmanAngleX = Kalman_getAngle(&KalmanX, roll, DataStruct->Gy, dt);
 80017dc:	683b      	ldr	r3, [r7, #0]
 80017de:	ed93 7b0c 	vldr	d7, [r3, #48]	; 0x30
 80017e2:	ed97 2b0a 	vldr	d2, [r7, #40]	; 0x28
 80017e6:	eeb0 1a47 	vmov.f32	s2, s14
 80017ea:	eef0 1a67 	vmov.f32	s3, s15
 80017ee:	ed97 0b0e 	vldr	d0, [r7, #56]	; 0x38
 80017f2:	4809      	ldr	r0, [pc, #36]	; (8001818 <MPU6050_Read_All+0x3e0>)
 80017f4:	f000 f812 	bl	800181c <Kalman_getAngle>
 80017f8:	eeb0 7a40 	vmov.f32	s14, s0
 80017fc:	eef0 7a60 	vmov.f32	s15, s1
 8001800:	683b      	ldr	r3, [r7, #0]
 8001802:	ed83 7b14 	vstr	d7, [r3, #80]	; 0x50

}
 8001806:	bf00      	nop
 8001808:	3740      	adds	r7, #64	; 0x40
 800180a:	46bd      	mov	sp, r7
 800180c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001810:	20000048 	.word	0x20000048
 8001814:	40568000 	.word	0x40568000
 8001818:	20000000 	.word	0x20000000

0800181c <Kalman_getAngle>:

double Kalman_getAngle(Kalman_t *Kalman, double newAngle, double newRate, double dt) {
 800181c:	b5b0      	push	{r4, r5, r7, lr}
 800181e:	b096      	sub	sp, #88	; 0x58
 8001820:	af00      	add	r7, sp, #0
 8001822:	61f8      	str	r0, [r7, #28]
 8001824:	ed87 0b04 	vstr	d0, [r7, #16]
 8001828:	ed87 1b02 	vstr	d1, [r7, #8]
 800182c:	ed87 2b00 	vstr	d2, [r7]
    double rate = newRate - Kalman->bias;
 8001830:	69fb      	ldr	r3, [r7, #28]
 8001832:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8001836:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800183a:	f7fe fd25 	bl	8000288 <__aeabi_dsub>
 800183e:	4602      	mov	r2, r0
 8001840:	460b      	mov	r3, r1
 8001842:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
    Kalman->angle += dt * rate;
 8001846:	69fb      	ldr	r3, [r7, #28]
 8001848:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 800184c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8001850:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001854:	f7fe fed0 	bl	80005f8 <__aeabi_dmul>
 8001858:	4602      	mov	r2, r0
 800185a:	460b      	mov	r3, r1
 800185c:	4620      	mov	r0, r4
 800185e:	4629      	mov	r1, r5
 8001860:	f7fe fd14 	bl	800028c <__adddf3>
 8001864:	4602      	mov	r2, r0
 8001866:	460b      	mov	r3, r1
 8001868:	69f9      	ldr	r1, [r7, #28]
 800186a:	e9c1 2306 	strd	r2, r3, [r1, #24]

    Kalman->P[0][0] += dt * (dt * Kalman->P[1][1] - Kalman->P[0][1] - Kalman->P[1][0] + Kalman->Q_angle);
 800186e:	69fb      	ldr	r3, [r7, #28]
 8001870:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	; 0x28
 8001874:	69fb      	ldr	r3, [r7, #28]
 8001876:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 800187a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800187e:	f7fe febb 	bl	80005f8 <__aeabi_dmul>
 8001882:	4602      	mov	r2, r0
 8001884:	460b      	mov	r3, r1
 8001886:	4610      	mov	r0, r2
 8001888:	4619      	mov	r1, r3
 800188a:	69fb      	ldr	r3, [r7, #28]
 800188c:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8001890:	f7fe fcfa 	bl	8000288 <__aeabi_dsub>
 8001894:	4602      	mov	r2, r0
 8001896:	460b      	mov	r3, r1
 8001898:	4610      	mov	r0, r2
 800189a:	4619      	mov	r1, r3
 800189c:	69fb      	ldr	r3, [r7, #28]
 800189e:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 80018a2:	f7fe fcf1 	bl	8000288 <__aeabi_dsub>
 80018a6:	4602      	mov	r2, r0
 80018a8:	460b      	mov	r3, r1
 80018aa:	4610      	mov	r0, r2
 80018ac:	4619      	mov	r1, r3
 80018ae:	69fb      	ldr	r3, [r7, #28]
 80018b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018b4:	f7fe fcea 	bl	800028c <__adddf3>
 80018b8:	4602      	mov	r2, r0
 80018ba:	460b      	mov	r3, r1
 80018bc:	4610      	mov	r0, r2
 80018be:	4619      	mov	r1, r3
 80018c0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80018c4:	f7fe fe98 	bl	80005f8 <__aeabi_dmul>
 80018c8:	4602      	mov	r2, r0
 80018ca:	460b      	mov	r3, r1
 80018cc:	4620      	mov	r0, r4
 80018ce:	4629      	mov	r1, r5
 80018d0:	f7fe fcdc 	bl	800028c <__adddf3>
 80018d4:	4602      	mov	r2, r0
 80018d6:	460b      	mov	r3, r1
 80018d8:	69f9      	ldr	r1, [r7, #28]
 80018da:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    Kalman->P[0][1] -= dt * Kalman->P[1][1];
 80018de:	69fb      	ldr	r3, [r7, #28]
 80018e0:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	; 0x30
 80018e4:	69fb      	ldr	r3, [r7, #28]
 80018e6:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 80018ea:	e9d7 2300 	ldrd	r2, r3, [r7]
 80018ee:	f7fe fe83 	bl	80005f8 <__aeabi_dmul>
 80018f2:	4602      	mov	r2, r0
 80018f4:	460b      	mov	r3, r1
 80018f6:	4620      	mov	r0, r4
 80018f8:	4629      	mov	r1, r5
 80018fa:	f7fe fcc5 	bl	8000288 <__aeabi_dsub>
 80018fe:	4602      	mov	r2, r0
 8001900:	460b      	mov	r3, r1
 8001902:	69f9      	ldr	r1, [r7, #28]
 8001904:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
    Kalman->P[1][0] -= dt * Kalman->P[1][1];
 8001908:	69fb      	ldr	r3, [r7, #28]
 800190a:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	; 0x38
 800190e:	69fb      	ldr	r3, [r7, #28]
 8001910:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 8001914:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001918:	f7fe fe6e 	bl	80005f8 <__aeabi_dmul>
 800191c:	4602      	mov	r2, r0
 800191e:	460b      	mov	r3, r1
 8001920:	4620      	mov	r0, r4
 8001922:	4629      	mov	r1, r5
 8001924:	f7fe fcb0 	bl	8000288 <__aeabi_dsub>
 8001928:	4602      	mov	r2, r0
 800192a:	460b      	mov	r3, r1
 800192c:	69f9      	ldr	r1, [r7, #28]
 800192e:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
    Kalman->P[1][1] += Kalman->Q_bias * dt;
 8001932:	69fb      	ldr	r3, [r7, #28]
 8001934:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	; 0x40
 8001938:	69fb      	ldr	r3, [r7, #28]
 800193a:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 800193e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001942:	f7fe fe59 	bl	80005f8 <__aeabi_dmul>
 8001946:	4602      	mov	r2, r0
 8001948:	460b      	mov	r3, r1
 800194a:	4620      	mov	r0, r4
 800194c:	4629      	mov	r1, r5
 800194e:	f7fe fc9d 	bl	800028c <__adddf3>
 8001952:	4602      	mov	r2, r0
 8001954:	460b      	mov	r3, r1
 8001956:	69f9      	ldr	r1, [r7, #28]
 8001958:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40

    double S = Kalman->P[0][0] + Kalman->R_measure;
 800195c:	69fb      	ldr	r3, [r7, #28]
 800195e:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 8001962:	69fb      	ldr	r3, [r7, #28]
 8001964:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8001968:	f7fe fc90 	bl	800028c <__adddf3>
 800196c:	4602      	mov	r2, r0
 800196e:	460b      	mov	r3, r1
 8001970:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
    double K[2];
    K[0] = Kalman->P[0][0] / S;
 8001974:	69fb      	ldr	r3, [r7, #28]
 8001976:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 800197a:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800197e:	f7fe ff65 	bl	800084c <__aeabi_ddiv>
 8001982:	4602      	mov	r2, r0
 8001984:	460b      	mov	r3, r1
 8001986:	e9c7 2308 	strd	r2, r3, [r7, #32]
    K[1] = Kalman->P[1][0] / S;
 800198a:	69fb      	ldr	r3, [r7, #28]
 800198c:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8001990:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8001994:	f7fe ff5a 	bl	800084c <__aeabi_ddiv>
 8001998:	4602      	mov	r2, r0
 800199a:	460b      	mov	r3, r1
 800199c:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28

    double y = newAngle - Kalman->angle;
 80019a0:	69fb      	ldr	r3, [r7, #28]
 80019a2:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80019a6:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80019aa:	f7fe fc6d 	bl	8000288 <__aeabi_dsub>
 80019ae:	4602      	mov	r2, r0
 80019b0:	460b      	mov	r3, r1
 80019b2:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
    Kalman->angle += K[0] * y;
 80019b6:	69fb      	ldr	r3, [r7, #28]
 80019b8:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 80019bc:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80019c0:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80019c4:	f7fe fe18 	bl	80005f8 <__aeabi_dmul>
 80019c8:	4602      	mov	r2, r0
 80019ca:	460b      	mov	r3, r1
 80019cc:	4620      	mov	r0, r4
 80019ce:	4629      	mov	r1, r5
 80019d0:	f7fe fc5c 	bl	800028c <__adddf3>
 80019d4:	4602      	mov	r2, r0
 80019d6:	460b      	mov	r3, r1
 80019d8:	69f9      	ldr	r1, [r7, #28]
 80019da:	e9c1 2306 	strd	r2, r3, [r1, #24]
    Kalman->bias += K[1] * y;
 80019de:	69fb      	ldr	r3, [r7, #28]
 80019e0:	e9d3 4508 	ldrd	r4, r5, [r3, #32]
 80019e4:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80019e8:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80019ec:	f7fe fe04 	bl	80005f8 <__aeabi_dmul>
 80019f0:	4602      	mov	r2, r0
 80019f2:	460b      	mov	r3, r1
 80019f4:	4620      	mov	r0, r4
 80019f6:	4629      	mov	r1, r5
 80019f8:	f7fe fc48 	bl	800028c <__adddf3>
 80019fc:	4602      	mov	r2, r0
 80019fe:	460b      	mov	r3, r1
 8001a00:	69f9      	ldr	r1, [r7, #28]
 8001a02:	e9c1 2308 	strd	r2, r3, [r1, #32]

    double P00_temp = Kalman->P[0][0];
 8001a06:	69fb      	ldr	r3, [r7, #28]
 8001a08:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8001a0c:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    double P01_temp = Kalman->P[0][1];
 8001a10:	69fb      	ldr	r3, [r7, #28]
 8001a12:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8001a16:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30

    Kalman->P[0][0] -= K[0] * P00_temp;
 8001a1a:	69fb      	ldr	r3, [r7, #28]
 8001a1c:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	; 0x28
 8001a20:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001a24:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8001a28:	f7fe fde6 	bl	80005f8 <__aeabi_dmul>
 8001a2c:	4602      	mov	r2, r0
 8001a2e:	460b      	mov	r3, r1
 8001a30:	4620      	mov	r0, r4
 8001a32:	4629      	mov	r1, r5
 8001a34:	f7fe fc28 	bl	8000288 <__aeabi_dsub>
 8001a38:	4602      	mov	r2, r0
 8001a3a:	460b      	mov	r3, r1
 8001a3c:	69f9      	ldr	r1, [r7, #28]
 8001a3e:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    Kalman->P[0][1] -= K[0] * P01_temp;
 8001a42:	69fb      	ldr	r3, [r7, #28]
 8001a44:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	; 0x30
 8001a48:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001a4c:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001a50:	f7fe fdd2 	bl	80005f8 <__aeabi_dmul>
 8001a54:	4602      	mov	r2, r0
 8001a56:	460b      	mov	r3, r1
 8001a58:	4620      	mov	r0, r4
 8001a5a:	4629      	mov	r1, r5
 8001a5c:	f7fe fc14 	bl	8000288 <__aeabi_dsub>
 8001a60:	4602      	mov	r2, r0
 8001a62:	460b      	mov	r3, r1
 8001a64:	69f9      	ldr	r1, [r7, #28]
 8001a66:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
    Kalman->P[1][0] -= K[1] * P00_temp;
 8001a6a:	69fb      	ldr	r3, [r7, #28]
 8001a6c:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	; 0x38
 8001a70:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001a74:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8001a78:	f7fe fdbe 	bl	80005f8 <__aeabi_dmul>
 8001a7c:	4602      	mov	r2, r0
 8001a7e:	460b      	mov	r3, r1
 8001a80:	4620      	mov	r0, r4
 8001a82:	4629      	mov	r1, r5
 8001a84:	f7fe fc00 	bl	8000288 <__aeabi_dsub>
 8001a88:	4602      	mov	r2, r0
 8001a8a:	460b      	mov	r3, r1
 8001a8c:	69f9      	ldr	r1, [r7, #28]
 8001a8e:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
    Kalman->P[1][1] -= K[1] * P01_temp;
 8001a92:	69fb      	ldr	r3, [r7, #28]
 8001a94:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	; 0x40
 8001a98:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001a9c:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001aa0:	f7fe fdaa 	bl	80005f8 <__aeabi_dmul>
 8001aa4:	4602      	mov	r2, r0
 8001aa6:	460b      	mov	r3, r1
 8001aa8:	4620      	mov	r0, r4
 8001aaa:	4629      	mov	r1, r5
 8001aac:	f7fe fbec 	bl	8000288 <__aeabi_dsub>
 8001ab0:	4602      	mov	r2, r0
 8001ab2:	460b      	mov	r3, r1
 8001ab4:	69f9      	ldr	r1, [r7, #28]
 8001ab6:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40

    return Kalman->angle;
 8001aba:	69fb      	ldr	r3, [r7, #28]
 8001abc:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8001ac0:	ec43 2b17 	vmov	d7, r2, r3
};
 8001ac4:	eeb0 0a47 	vmov.f32	s0, s14
 8001ac8:	eef0 0a67 	vmov.f32	s1, s15
 8001acc:	3758      	adds	r7, #88	; 0x58
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	bdb0      	pop	{r4, r5, r7, pc}
	...

08001ad4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ad4:	b480      	push	{r7}
 8001ad6:	b083      	sub	sp, #12
 8001ad8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ada:	2300      	movs	r3, #0
 8001adc:	607b      	str	r3, [r7, #4]
 8001ade:	4b10      	ldr	r3, [pc, #64]	; (8001b20 <HAL_MspInit+0x4c>)
 8001ae0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ae2:	4a0f      	ldr	r2, [pc, #60]	; (8001b20 <HAL_MspInit+0x4c>)
 8001ae4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ae8:	6453      	str	r3, [r2, #68]	; 0x44
 8001aea:	4b0d      	ldr	r3, [pc, #52]	; (8001b20 <HAL_MspInit+0x4c>)
 8001aec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001aee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001af2:	607b      	str	r3, [r7, #4]
 8001af4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001af6:	2300      	movs	r3, #0
 8001af8:	603b      	str	r3, [r7, #0]
 8001afa:	4b09      	ldr	r3, [pc, #36]	; (8001b20 <HAL_MspInit+0x4c>)
 8001afc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001afe:	4a08      	ldr	r2, [pc, #32]	; (8001b20 <HAL_MspInit+0x4c>)
 8001b00:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b04:	6413      	str	r3, [r2, #64]	; 0x40
 8001b06:	4b06      	ldr	r3, [pc, #24]	; (8001b20 <HAL_MspInit+0x4c>)
 8001b08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b0e:	603b      	str	r3, [r7, #0]
 8001b10:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b12:	bf00      	nop
 8001b14:	370c      	adds	r7, #12
 8001b16:	46bd      	mov	sp, r7
 8001b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1c:	4770      	bx	lr
 8001b1e:	bf00      	nop
 8001b20:	40023800 	.word	0x40023800

08001b24 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001b24:	b580      	push	{r7, lr}
 8001b26:	b08a      	sub	sp, #40	; 0x28
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b2c:	f107 0314 	add.w	r3, r7, #20
 8001b30:	2200      	movs	r2, #0
 8001b32:	601a      	str	r2, [r3, #0]
 8001b34:	605a      	str	r2, [r3, #4]
 8001b36:	609a      	str	r2, [r3, #8]
 8001b38:	60da      	str	r2, [r3, #12]
 8001b3a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	4a19      	ldr	r2, [pc, #100]	; (8001ba8 <HAL_I2C_MspInit+0x84>)
 8001b42:	4293      	cmp	r3, r2
 8001b44:	d12b      	bne.n	8001b9e <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b46:	2300      	movs	r3, #0
 8001b48:	613b      	str	r3, [r7, #16]
 8001b4a:	4b18      	ldr	r3, [pc, #96]	; (8001bac <HAL_I2C_MspInit+0x88>)
 8001b4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b4e:	4a17      	ldr	r2, [pc, #92]	; (8001bac <HAL_I2C_MspInit+0x88>)
 8001b50:	f043 0302 	orr.w	r3, r3, #2
 8001b54:	6313      	str	r3, [r2, #48]	; 0x30
 8001b56:	4b15      	ldr	r3, [pc, #84]	; (8001bac <HAL_I2C_MspInit+0x88>)
 8001b58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b5a:	f003 0302 	and.w	r3, r3, #2
 8001b5e:	613b      	str	r3, [r7, #16]
 8001b60:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001b62:	23c0      	movs	r3, #192	; 0xc0
 8001b64:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001b66:	2312      	movs	r3, #18
 8001b68:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b6e:	2303      	movs	r3, #3
 8001b70:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001b72:	2304      	movs	r3, #4
 8001b74:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b76:	f107 0314 	add.w	r3, r7, #20
 8001b7a:	4619      	mov	r1, r3
 8001b7c:	480c      	ldr	r0, [pc, #48]	; (8001bb0 <HAL_I2C_MspInit+0x8c>)
 8001b7e:	f000 fa79 	bl	8002074 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001b82:	2300      	movs	r3, #0
 8001b84:	60fb      	str	r3, [r7, #12]
 8001b86:	4b09      	ldr	r3, [pc, #36]	; (8001bac <HAL_I2C_MspInit+0x88>)
 8001b88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b8a:	4a08      	ldr	r2, [pc, #32]	; (8001bac <HAL_I2C_MspInit+0x88>)
 8001b8c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001b90:	6413      	str	r3, [r2, #64]	; 0x40
 8001b92:	4b06      	ldr	r3, [pc, #24]	; (8001bac <HAL_I2C_MspInit+0x88>)
 8001b94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b96:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b9a:	60fb      	str	r3, [r7, #12]
 8001b9c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001b9e:	bf00      	nop
 8001ba0:	3728      	adds	r7, #40	; 0x28
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	bd80      	pop	{r7, pc}
 8001ba6:	bf00      	nop
 8001ba8:	40005400 	.word	0x40005400
 8001bac:	40023800 	.word	0x40023800
 8001bb0:	40020400 	.word	0x40020400

08001bb4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	b08a      	sub	sp, #40	; 0x28
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bbc:	f107 0314 	add.w	r3, r7, #20
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	601a      	str	r2, [r3, #0]
 8001bc4:	605a      	str	r2, [r3, #4]
 8001bc6:	609a      	str	r2, [r3, #8]
 8001bc8:	60da      	str	r2, [r3, #12]
 8001bca:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	4a19      	ldr	r2, [pc, #100]	; (8001c38 <HAL_UART_MspInit+0x84>)
 8001bd2:	4293      	cmp	r3, r2
 8001bd4:	d12b      	bne.n	8001c2e <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	613b      	str	r3, [r7, #16]
 8001bda:	4b18      	ldr	r3, [pc, #96]	; (8001c3c <HAL_UART_MspInit+0x88>)
 8001bdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bde:	4a17      	ldr	r2, [pc, #92]	; (8001c3c <HAL_UART_MspInit+0x88>)
 8001be0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001be4:	6413      	str	r3, [r2, #64]	; 0x40
 8001be6:	4b15      	ldr	r3, [pc, #84]	; (8001c3c <HAL_UART_MspInit+0x88>)
 8001be8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bee:	613b      	str	r3, [r7, #16]
 8001bf0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	60fb      	str	r3, [r7, #12]
 8001bf6:	4b11      	ldr	r3, [pc, #68]	; (8001c3c <HAL_UART_MspInit+0x88>)
 8001bf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bfa:	4a10      	ldr	r2, [pc, #64]	; (8001c3c <HAL_UART_MspInit+0x88>)
 8001bfc:	f043 0301 	orr.w	r3, r3, #1
 8001c00:	6313      	str	r3, [r2, #48]	; 0x30
 8001c02:	4b0e      	ldr	r3, [pc, #56]	; (8001c3c <HAL_UART_MspInit+0x88>)
 8001c04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c06:	f003 0301 	and.w	r3, r3, #1
 8001c0a:	60fb      	str	r3, [r7, #12]
 8001c0c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001c0e:	230c      	movs	r3, #12
 8001c10:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c12:	2302      	movs	r3, #2
 8001c14:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c16:	2300      	movs	r3, #0
 8001c18:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c1a:	2303      	movs	r3, #3
 8001c1c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001c1e:	2307      	movs	r3, #7
 8001c20:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c22:	f107 0314 	add.w	r3, r7, #20
 8001c26:	4619      	mov	r1, r3
 8001c28:	4805      	ldr	r0, [pc, #20]	; (8001c40 <HAL_UART_MspInit+0x8c>)
 8001c2a:	f000 fa23 	bl	8002074 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001c2e:	bf00      	nop
 8001c30:	3728      	adds	r7, #40	; 0x28
 8001c32:	46bd      	mov	sp, r7
 8001c34:	bd80      	pop	{r7, pc}
 8001c36:	bf00      	nop
 8001c38:	40004400 	.word	0x40004400
 8001c3c:	40023800 	.word	0x40023800
 8001c40:	40020000 	.word	0x40020000

08001c44 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c44:	b480      	push	{r7}
 8001c46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001c48:	e7fe      	b.n	8001c48 <NMI_Handler+0x4>

08001c4a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c4a:	b480      	push	{r7}
 8001c4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c4e:	e7fe      	b.n	8001c4e <HardFault_Handler+0x4>

08001c50 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001c50:	b480      	push	{r7}
 8001c52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001c54:	e7fe      	b.n	8001c54 <MemManage_Handler+0x4>

08001c56 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001c56:	b480      	push	{r7}
 8001c58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c5a:	e7fe      	b.n	8001c5a <BusFault_Handler+0x4>

08001c5c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001c5c:	b480      	push	{r7}
 8001c5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c60:	e7fe      	b.n	8001c60 <UsageFault_Handler+0x4>

08001c62 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001c62:	b480      	push	{r7}
 8001c64:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001c66:	bf00      	nop
 8001c68:	46bd      	mov	sp, r7
 8001c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6e:	4770      	bx	lr

08001c70 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001c70:	b480      	push	{r7}
 8001c72:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c74:	bf00      	nop
 8001c76:	46bd      	mov	sp, r7
 8001c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7c:	4770      	bx	lr

08001c7e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001c7e:	b480      	push	{r7}
 8001c80:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001c82:	bf00      	nop
 8001c84:	46bd      	mov	sp, r7
 8001c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8a:	4770      	bx	lr

08001c8c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001c90:	f000 f8c6 	bl	8001e20 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001c94:	bf00      	nop
 8001c96:	bd80      	pop	{r7, pc}

08001c98 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	b086      	sub	sp, #24
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001ca0:	4a14      	ldr	r2, [pc, #80]	; (8001cf4 <_sbrk+0x5c>)
 8001ca2:	4b15      	ldr	r3, [pc, #84]	; (8001cf8 <_sbrk+0x60>)
 8001ca4:	1ad3      	subs	r3, r2, r3
 8001ca6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001ca8:	697b      	ldr	r3, [r7, #20]
 8001caa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001cac:	4b13      	ldr	r3, [pc, #76]	; (8001cfc <_sbrk+0x64>)
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d102      	bne.n	8001cba <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001cb4:	4b11      	ldr	r3, [pc, #68]	; (8001cfc <_sbrk+0x64>)
 8001cb6:	4a12      	ldr	r2, [pc, #72]	; (8001d00 <_sbrk+0x68>)
 8001cb8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001cba:	4b10      	ldr	r3, [pc, #64]	; (8001cfc <_sbrk+0x64>)
 8001cbc:	681a      	ldr	r2, [r3, #0]
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	4413      	add	r3, r2
 8001cc2:	693a      	ldr	r2, [r7, #16]
 8001cc4:	429a      	cmp	r2, r3
 8001cc6:	d207      	bcs.n	8001cd8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001cc8:	f002 fc0c 	bl	80044e4 <__errno>
 8001ccc:	4603      	mov	r3, r0
 8001cce:	220c      	movs	r2, #12
 8001cd0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001cd2:	f04f 33ff 	mov.w	r3, #4294967295
 8001cd6:	e009      	b.n	8001cec <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001cd8:	4b08      	ldr	r3, [pc, #32]	; (8001cfc <_sbrk+0x64>)
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001cde:	4b07      	ldr	r3, [pc, #28]	; (8001cfc <_sbrk+0x64>)
 8001ce0:	681a      	ldr	r2, [r3, #0]
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	4413      	add	r3, r2
 8001ce6:	4a05      	ldr	r2, [pc, #20]	; (8001cfc <_sbrk+0x64>)
 8001ce8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001cea:	68fb      	ldr	r3, [r7, #12]
}
 8001cec:	4618      	mov	r0, r3
 8001cee:	3718      	adds	r7, #24
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	bd80      	pop	{r7, pc}
 8001cf4:	20020000 	.word	0x20020000
 8001cf8:	00000400 	.word	0x00000400
 8001cfc:	2000021c 	.word	0x2000021c
 8001d00:	20000238 	.word	0x20000238

08001d04 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001d04:	b480      	push	{r7}
 8001d06:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001d08:	4b06      	ldr	r3, [pc, #24]	; (8001d24 <SystemInit+0x20>)
 8001d0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d0e:	4a05      	ldr	r2, [pc, #20]	; (8001d24 <SystemInit+0x20>)
 8001d10:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001d14:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001d18:	bf00      	nop
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d20:	4770      	bx	lr
 8001d22:	bf00      	nop
 8001d24:	e000ed00 	.word	0xe000ed00

08001d28 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001d28:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001d60 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001d2c:	480d      	ldr	r0, [pc, #52]	; (8001d64 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001d2e:	490e      	ldr	r1, [pc, #56]	; (8001d68 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001d30:	4a0e      	ldr	r2, [pc, #56]	; (8001d6c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001d32:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001d34:	e002      	b.n	8001d3c <LoopCopyDataInit>

08001d36 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001d36:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001d38:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001d3a:	3304      	adds	r3, #4

08001d3c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001d3c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001d3e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001d40:	d3f9      	bcc.n	8001d36 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001d42:	4a0b      	ldr	r2, [pc, #44]	; (8001d70 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001d44:	4c0b      	ldr	r4, [pc, #44]	; (8001d74 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001d46:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001d48:	e001      	b.n	8001d4e <LoopFillZerobss>

08001d4a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001d4a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001d4c:	3204      	adds	r2, #4

08001d4e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001d4e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001d50:	d3fb      	bcc.n	8001d4a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001d52:	f7ff ffd7 	bl	8001d04 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001d56:	f002 fbcb 	bl	80044f0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001d5a:	f7ff f949 	bl	8000ff0 <main>
  bx  lr    
 8001d5e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001d60:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001d64:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001d68:	20000100 	.word	0x20000100
  ldr r2, =_sidata
 8001d6c:	080055e0 	.word	0x080055e0
  ldr r2, =_sbss
 8001d70:	20000100 	.word	0x20000100
  ldr r4, =_ebss
 8001d74:	20000234 	.word	0x20000234

08001d78 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001d78:	e7fe      	b.n	8001d78 <ADC_IRQHandler>
	...

08001d7c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001d80:	4b0e      	ldr	r3, [pc, #56]	; (8001dbc <HAL_Init+0x40>)
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	4a0d      	ldr	r2, [pc, #52]	; (8001dbc <HAL_Init+0x40>)
 8001d86:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001d8a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001d8c:	4b0b      	ldr	r3, [pc, #44]	; (8001dbc <HAL_Init+0x40>)
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	4a0a      	ldr	r2, [pc, #40]	; (8001dbc <HAL_Init+0x40>)
 8001d92:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001d96:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001d98:	4b08      	ldr	r3, [pc, #32]	; (8001dbc <HAL_Init+0x40>)
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	4a07      	ldr	r2, [pc, #28]	; (8001dbc <HAL_Init+0x40>)
 8001d9e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001da2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001da4:	2003      	movs	r0, #3
 8001da6:	f000 f931 	bl	800200c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001daa:	200f      	movs	r0, #15
 8001dac:	f000 f808 	bl	8001dc0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001db0:	f7ff fe90 	bl	8001ad4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001db4:	2300      	movs	r3, #0
}
 8001db6:	4618      	mov	r0, r3
 8001db8:	bd80      	pop	{r7, pc}
 8001dba:	bf00      	nop
 8001dbc:	40023c00 	.word	0x40023c00

08001dc0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	b082      	sub	sp, #8
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001dc8:	4b12      	ldr	r3, [pc, #72]	; (8001e14 <HAL_InitTick+0x54>)
 8001dca:	681a      	ldr	r2, [r3, #0]
 8001dcc:	4b12      	ldr	r3, [pc, #72]	; (8001e18 <HAL_InitTick+0x58>)
 8001dce:	781b      	ldrb	r3, [r3, #0]
 8001dd0:	4619      	mov	r1, r3
 8001dd2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001dd6:	fbb3 f3f1 	udiv	r3, r3, r1
 8001dda:	fbb2 f3f3 	udiv	r3, r2, r3
 8001dde:	4618      	mov	r0, r3
 8001de0:	f000 f93b 	bl	800205a <HAL_SYSTICK_Config>
 8001de4:	4603      	mov	r3, r0
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d001      	beq.n	8001dee <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001dea:	2301      	movs	r3, #1
 8001dec:	e00e      	b.n	8001e0c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	2b0f      	cmp	r3, #15
 8001df2:	d80a      	bhi.n	8001e0a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001df4:	2200      	movs	r2, #0
 8001df6:	6879      	ldr	r1, [r7, #4]
 8001df8:	f04f 30ff 	mov.w	r0, #4294967295
 8001dfc:	f000 f911 	bl	8002022 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001e00:	4a06      	ldr	r2, [pc, #24]	; (8001e1c <HAL_InitTick+0x5c>)
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001e06:	2300      	movs	r3, #0
 8001e08:	e000      	b.n	8001e0c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001e0a:	2301      	movs	r3, #1
}
 8001e0c:	4618      	mov	r0, r3
 8001e0e:	3708      	adds	r7, #8
 8001e10:	46bd      	mov	sp, r7
 8001e12:	bd80      	pop	{r7, pc}
 8001e14:	20000090 	.word	0x20000090
 8001e18:	20000098 	.word	0x20000098
 8001e1c:	20000094 	.word	0x20000094

08001e20 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e20:	b480      	push	{r7}
 8001e22:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001e24:	4b06      	ldr	r3, [pc, #24]	; (8001e40 <HAL_IncTick+0x20>)
 8001e26:	781b      	ldrb	r3, [r3, #0]
 8001e28:	461a      	mov	r2, r3
 8001e2a:	4b06      	ldr	r3, [pc, #24]	; (8001e44 <HAL_IncTick+0x24>)
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	4413      	add	r3, r2
 8001e30:	4a04      	ldr	r2, [pc, #16]	; (8001e44 <HAL_IncTick+0x24>)
 8001e32:	6013      	str	r3, [r2, #0]
}
 8001e34:	bf00      	nop
 8001e36:	46bd      	mov	sp, r7
 8001e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3c:	4770      	bx	lr
 8001e3e:	bf00      	nop
 8001e40:	20000098 	.word	0x20000098
 8001e44:	20000220 	.word	0x20000220

08001e48 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e48:	b480      	push	{r7}
 8001e4a:	af00      	add	r7, sp, #0
  return uwTick;
 8001e4c:	4b03      	ldr	r3, [pc, #12]	; (8001e5c <HAL_GetTick+0x14>)
 8001e4e:	681b      	ldr	r3, [r3, #0]
}
 8001e50:	4618      	mov	r0, r3
 8001e52:	46bd      	mov	sp, r7
 8001e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e58:	4770      	bx	lr
 8001e5a:	bf00      	nop
 8001e5c:	20000220 	.word	0x20000220

08001e60 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001e60:	b580      	push	{r7, lr}
 8001e62:	b084      	sub	sp, #16
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001e68:	f7ff ffee 	bl	8001e48 <HAL_GetTick>
 8001e6c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e78:	d005      	beq.n	8001e86 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001e7a:	4b0a      	ldr	r3, [pc, #40]	; (8001ea4 <HAL_Delay+0x44>)
 8001e7c:	781b      	ldrb	r3, [r3, #0]
 8001e7e:	461a      	mov	r2, r3
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	4413      	add	r3, r2
 8001e84:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001e86:	bf00      	nop
 8001e88:	f7ff ffde 	bl	8001e48 <HAL_GetTick>
 8001e8c:	4602      	mov	r2, r0
 8001e8e:	68bb      	ldr	r3, [r7, #8]
 8001e90:	1ad3      	subs	r3, r2, r3
 8001e92:	68fa      	ldr	r2, [r7, #12]
 8001e94:	429a      	cmp	r2, r3
 8001e96:	d8f7      	bhi.n	8001e88 <HAL_Delay+0x28>
  {
  }
}
 8001e98:	bf00      	nop
 8001e9a:	bf00      	nop
 8001e9c:	3710      	adds	r7, #16
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	bd80      	pop	{r7, pc}
 8001ea2:	bf00      	nop
 8001ea4:	20000098 	.word	0x20000098

08001ea8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ea8:	b480      	push	{r7}
 8001eaa:	b085      	sub	sp, #20
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	f003 0307 	and.w	r3, r3, #7
 8001eb6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001eb8:	4b0c      	ldr	r3, [pc, #48]	; (8001eec <__NVIC_SetPriorityGrouping+0x44>)
 8001eba:	68db      	ldr	r3, [r3, #12]
 8001ebc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001ebe:	68ba      	ldr	r2, [r7, #8]
 8001ec0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001ec4:	4013      	ands	r3, r2
 8001ec6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ecc:	68bb      	ldr	r3, [r7, #8]
 8001ece:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ed0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001ed4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ed8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001eda:	4a04      	ldr	r2, [pc, #16]	; (8001eec <__NVIC_SetPriorityGrouping+0x44>)
 8001edc:	68bb      	ldr	r3, [r7, #8]
 8001ede:	60d3      	str	r3, [r2, #12]
}
 8001ee0:	bf00      	nop
 8001ee2:	3714      	adds	r7, #20
 8001ee4:	46bd      	mov	sp, r7
 8001ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eea:	4770      	bx	lr
 8001eec:	e000ed00 	.word	0xe000ed00

08001ef0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001ef0:	b480      	push	{r7}
 8001ef2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ef4:	4b04      	ldr	r3, [pc, #16]	; (8001f08 <__NVIC_GetPriorityGrouping+0x18>)
 8001ef6:	68db      	ldr	r3, [r3, #12]
 8001ef8:	0a1b      	lsrs	r3, r3, #8
 8001efa:	f003 0307 	and.w	r3, r3, #7
}
 8001efe:	4618      	mov	r0, r3
 8001f00:	46bd      	mov	sp, r7
 8001f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f06:	4770      	bx	lr
 8001f08:	e000ed00 	.word	0xe000ed00

08001f0c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001f0c:	b480      	push	{r7}
 8001f0e:	b083      	sub	sp, #12
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	4603      	mov	r3, r0
 8001f14:	6039      	str	r1, [r7, #0]
 8001f16:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	db0a      	blt.n	8001f36 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f20:	683b      	ldr	r3, [r7, #0]
 8001f22:	b2da      	uxtb	r2, r3
 8001f24:	490c      	ldr	r1, [pc, #48]	; (8001f58 <__NVIC_SetPriority+0x4c>)
 8001f26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f2a:	0112      	lsls	r2, r2, #4
 8001f2c:	b2d2      	uxtb	r2, r2
 8001f2e:	440b      	add	r3, r1
 8001f30:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001f34:	e00a      	b.n	8001f4c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f36:	683b      	ldr	r3, [r7, #0]
 8001f38:	b2da      	uxtb	r2, r3
 8001f3a:	4908      	ldr	r1, [pc, #32]	; (8001f5c <__NVIC_SetPriority+0x50>)
 8001f3c:	79fb      	ldrb	r3, [r7, #7]
 8001f3e:	f003 030f 	and.w	r3, r3, #15
 8001f42:	3b04      	subs	r3, #4
 8001f44:	0112      	lsls	r2, r2, #4
 8001f46:	b2d2      	uxtb	r2, r2
 8001f48:	440b      	add	r3, r1
 8001f4a:	761a      	strb	r2, [r3, #24]
}
 8001f4c:	bf00      	nop
 8001f4e:	370c      	adds	r7, #12
 8001f50:	46bd      	mov	sp, r7
 8001f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f56:	4770      	bx	lr
 8001f58:	e000e100 	.word	0xe000e100
 8001f5c:	e000ed00 	.word	0xe000ed00

08001f60 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f60:	b480      	push	{r7}
 8001f62:	b089      	sub	sp, #36	; 0x24
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	60f8      	str	r0, [r7, #12]
 8001f68:	60b9      	str	r1, [r7, #8]
 8001f6a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	f003 0307 	and.w	r3, r3, #7
 8001f72:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f74:	69fb      	ldr	r3, [r7, #28]
 8001f76:	f1c3 0307 	rsb	r3, r3, #7
 8001f7a:	2b04      	cmp	r3, #4
 8001f7c:	bf28      	it	cs
 8001f7e:	2304      	movcs	r3, #4
 8001f80:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f82:	69fb      	ldr	r3, [r7, #28]
 8001f84:	3304      	adds	r3, #4
 8001f86:	2b06      	cmp	r3, #6
 8001f88:	d902      	bls.n	8001f90 <NVIC_EncodePriority+0x30>
 8001f8a:	69fb      	ldr	r3, [r7, #28]
 8001f8c:	3b03      	subs	r3, #3
 8001f8e:	e000      	b.n	8001f92 <NVIC_EncodePriority+0x32>
 8001f90:	2300      	movs	r3, #0
 8001f92:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f94:	f04f 32ff 	mov.w	r2, #4294967295
 8001f98:	69bb      	ldr	r3, [r7, #24]
 8001f9a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f9e:	43da      	mvns	r2, r3
 8001fa0:	68bb      	ldr	r3, [r7, #8]
 8001fa2:	401a      	ands	r2, r3
 8001fa4:	697b      	ldr	r3, [r7, #20]
 8001fa6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001fa8:	f04f 31ff 	mov.w	r1, #4294967295
 8001fac:	697b      	ldr	r3, [r7, #20]
 8001fae:	fa01 f303 	lsl.w	r3, r1, r3
 8001fb2:	43d9      	mvns	r1, r3
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fb8:	4313      	orrs	r3, r2
         );
}
 8001fba:	4618      	mov	r0, r3
 8001fbc:	3724      	adds	r7, #36	; 0x24
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc4:	4770      	bx	lr
	...

08001fc8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	b082      	sub	sp, #8
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	3b01      	subs	r3, #1
 8001fd4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001fd8:	d301      	bcc.n	8001fde <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001fda:	2301      	movs	r3, #1
 8001fdc:	e00f      	b.n	8001ffe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001fde:	4a0a      	ldr	r2, [pc, #40]	; (8002008 <SysTick_Config+0x40>)
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	3b01      	subs	r3, #1
 8001fe4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001fe6:	210f      	movs	r1, #15
 8001fe8:	f04f 30ff 	mov.w	r0, #4294967295
 8001fec:	f7ff ff8e 	bl	8001f0c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ff0:	4b05      	ldr	r3, [pc, #20]	; (8002008 <SysTick_Config+0x40>)
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001ff6:	4b04      	ldr	r3, [pc, #16]	; (8002008 <SysTick_Config+0x40>)
 8001ff8:	2207      	movs	r2, #7
 8001ffa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ffc:	2300      	movs	r3, #0
}
 8001ffe:	4618      	mov	r0, r3
 8002000:	3708      	adds	r7, #8
 8002002:	46bd      	mov	sp, r7
 8002004:	bd80      	pop	{r7, pc}
 8002006:	bf00      	nop
 8002008:	e000e010 	.word	0xe000e010

0800200c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800200c:	b580      	push	{r7, lr}
 800200e:	b082      	sub	sp, #8
 8002010:	af00      	add	r7, sp, #0
 8002012:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002014:	6878      	ldr	r0, [r7, #4]
 8002016:	f7ff ff47 	bl	8001ea8 <__NVIC_SetPriorityGrouping>
}
 800201a:	bf00      	nop
 800201c:	3708      	adds	r7, #8
 800201e:	46bd      	mov	sp, r7
 8002020:	bd80      	pop	{r7, pc}

08002022 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002022:	b580      	push	{r7, lr}
 8002024:	b086      	sub	sp, #24
 8002026:	af00      	add	r7, sp, #0
 8002028:	4603      	mov	r3, r0
 800202a:	60b9      	str	r1, [r7, #8]
 800202c:	607a      	str	r2, [r7, #4]
 800202e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002030:	2300      	movs	r3, #0
 8002032:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002034:	f7ff ff5c 	bl	8001ef0 <__NVIC_GetPriorityGrouping>
 8002038:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800203a:	687a      	ldr	r2, [r7, #4]
 800203c:	68b9      	ldr	r1, [r7, #8]
 800203e:	6978      	ldr	r0, [r7, #20]
 8002040:	f7ff ff8e 	bl	8001f60 <NVIC_EncodePriority>
 8002044:	4602      	mov	r2, r0
 8002046:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800204a:	4611      	mov	r1, r2
 800204c:	4618      	mov	r0, r3
 800204e:	f7ff ff5d 	bl	8001f0c <__NVIC_SetPriority>
}
 8002052:	bf00      	nop
 8002054:	3718      	adds	r7, #24
 8002056:	46bd      	mov	sp, r7
 8002058:	bd80      	pop	{r7, pc}

0800205a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800205a:	b580      	push	{r7, lr}
 800205c:	b082      	sub	sp, #8
 800205e:	af00      	add	r7, sp, #0
 8002060:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002062:	6878      	ldr	r0, [r7, #4]
 8002064:	f7ff ffb0 	bl	8001fc8 <SysTick_Config>
 8002068:	4603      	mov	r3, r0
}
 800206a:	4618      	mov	r0, r3
 800206c:	3708      	adds	r7, #8
 800206e:	46bd      	mov	sp, r7
 8002070:	bd80      	pop	{r7, pc}
	...

08002074 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002074:	b480      	push	{r7}
 8002076:	b089      	sub	sp, #36	; 0x24
 8002078:	af00      	add	r7, sp, #0
 800207a:	6078      	str	r0, [r7, #4]
 800207c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800207e:	2300      	movs	r3, #0
 8002080:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002082:	2300      	movs	r3, #0
 8002084:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002086:	2300      	movs	r3, #0
 8002088:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800208a:	2300      	movs	r3, #0
 800208c:	61fb      	str	r3, [r7, #28]
 800208e:	e159      	b.n	8002344 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002090:	2201      	movs	r2, #1
 8002092:	69fb      	ldr	r3, [r7, #28]
 8002094:	fa02 f303 	lsl.w	r3, r2, r3
 8002098:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800209a:	683b      	ldr	r3, [r7, #0]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	697a      	ldr	r2, [r7, #20]
 80020a0:	4013      	ands	r3, r2
 80020a2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80020a4:	693a      	ldr	r2, [r7, #16]
 80020a6:	697b      	ldr	r3, [r7, #20]
 80020a8:	429a      	cmp	r2, r3
 80020aa:	f040 8148 	bne.w	800233e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80020ae:	683b      	ldr	r3, [r7, #0]
 80020b0:	685b      	ldr	r3, [r3, #4]
 80020b2:	f003 0303 	and.w	r3, r3, #3
 80020b6:	2b01      	cmp	r3, #1
 80020b8:	d005      	beq.n	80020c6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80020ba:	683b      	ldr	r3, [r7, #0]
 80020bc:	685b      	ldr	r3, [r3, #4]
 80020be:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80020c2:	2b02      	cmp	r3, #2
 80020c4:	d130      	bne.n	8002128 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	689b      	ldr	r3, [r3, #8]
 80020ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80020cc:	69fb      	ldr	r3, [r7, #28]
 80020ce:	005b      	lsls	r3, r3, #1
 80020d0:	2203      	movs	r2, #3
 80020d2:	fa02 f303 	lsl.w	r3, r2, r3
 80020d6:	43db      	mvns	r3, r3
 80020d8:	69ba      	ldr	r2, [r7, #24]
 80020da:	4013      	ands	r3, r2
 80020dc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80020de:	683b      	ldr	r3, [r7, #0]
 80020e0:	68da      	ldr	r2, [r3, #12]
 80020e2:	69fb      	ldr	r3, [r7, #28]
 80020e4:	005b      	lsls	r3, r3, #1
 80020e6:	fa02 f303 	lsl.w	r3, r2, r3
 80020ea:	69ba      	ldr	r2, [r7, #24]
 80020ec:	4313      	orrs	r3, r2
 80020ee:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	69ba      	ldr	r2, [r7, #24]
 80020f4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	685b      	ldr	r3, [r3, #4]
 80020fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80020fc:	2201      	movs	r2, #1
 80020fe:	69fb      	ldr	r3, [r7, #28]
 8002100:	fa02 f303 	lsl.w	r3, r2, r3
 8002104:	43db      	mvns	r3, r3
 8002106:	69ba      	ldr	r2, [r7, #24]
 8002108:	4013      	ands	r3, r2
 800210a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800210c:	683b      	ldr	r3, [r7, #0]
 800210e:	685b      	ldr	r3, [r3, #4]
 8002110:	091b      	lsrs	r3, r3, #4
 8002112:	f003 0201 	and.w	r2, r3, #1
 8002116:	69fb      	ldr	r3, [r7, #28]
 8002118:	fa02 f303 	lsl.w	r3, r2, r3
 800211c:	69ba      	ldr	r2, [r7, #24]
 800211e:	4313      	orrs	r3, r2
 8002120:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	69ba      	ldr	r2, [r7, #24]
 8002126:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002128:	683b      	ldr	r3, [r7, #0]
 800212a:	685b      	ldr	r3, [r3, #4]
 800212c:	f003 0303 	and.w	r3, r3, #3
 8002130:	2b03      	cmp	r3, #3
 8002132:	d017      	beq.n	8002164 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	68db      	ldr	r3, [r3, #12]
 8002138:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800213a:	69fb      	ldr	r3, [r7, #28]
 800213c:	005b      	lsls	r3, r3, #1
 800213e:	2203      	movs	r2, #3
 8002140:	fa02 f303 	lsl.w	r3, r2, r3
 8002144:	43db      	mvns	r3, r3
 8002146:	69ba      	ldr	r2, [r7, #24]
 8002148:	4013      	ands	r3, r2
 800214a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800214c:	683b      	ldr	r3, [r7, #0]
 800214e:	689a      	ldr	r2, [r3, #8]
 8002150:	69fb      	ldr	r3, [r7, #28]
 8002152:	005b      	lsls	r3, r3, #1
 8002154:	fa02 f303 	lsl.w	r3, r2, r3
 8002158:	69ba      	ldr	r2, [r7, #24]
 800215a:	4313      	orrs	r3, r2
 800215c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	69ba      	ldr	r2, [r7, #24]
 8002162:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002164:	683b      	ldr	r3, [r7, #0]
 8002166:	685b      	ldr	r3, [r3, #4]
 8002168:	f003 0303 	and.w	r3, r3, #3
 800216c:	2b02      	cmp	r3, #2
 800216e:	d123      	bne.n	80021b8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002170:	69fb      	ldr	r3, [r7, #28]
 8002172:	08da      	lsrs	r2, r3, #3
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	3208      	adds	r2, #8
 8002178:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800217c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800217e:	69fb      	ldr	r3, [r7, #28]
 8002180:	f003 0307 	and.w	r3, r3, #7
 8002184:	009b      	lsls	r3, r3, #2
 8002186:	220f      	movs	r2, #15
 8002188:	fa02 f303 	lsl.w	r3, r2, r3
 800218c:	43db      	mvns	r3, r3
 800218e:	69ba      	ldr	r2, [r7, #24]
 8002190:	4013      	ands	r3, r2
 8002192:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002194:	683b      	ldr	r3, [r7, #0]
 8002196:	691a      	ldr	r2, [r3, #16]
 8002198:	69fb      	ldr	r3, [r7, #28]
 800219a:	f003 0307 	and.w	r3, r3, #7
 800219e:	009b      	lsls	r3, r3, #2
 80021a0:	fa02 f303 	lsl.w	r3, r2, r3
 80021a4:	69ba      	ldr	r2, [r7, #24]
 80021a6:	4313      	orrs	r3, r2
 80021a8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80021aa:	69fb      	ldr	r3, [r7, #28]
 80021ac:	08da      	lsrs	r2, r3, #3
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	3208      	adds	r2, #8
 80021b2:	69b9      	ldr	r1, [r7, #24]
 80021b4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80021be:	69fb      	ldr	r3, [r7, #28]
 80021c0:	005b      	lsls	r3, r3, #1
 80021c2:	2203      	movs	r2, #3
 80021c4:	fa02 f303 	lsl.w	r3, r2, r3
 80021c8:	43db      	mvns	r3, r3
 80021ca:	69ba      	ldr	r2, [r7, #24]
 80021cc:	4013      	ands	r3, r2
 80021ce:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80021d0:	683b      	ldr	r3, [r7, #0]
 80021d2:	685b      	ldr	r3, [r3, #4]
 80021d4:	f003 0203 	and.w	r2, r3, #3
 80021d8:	69fb      	ldr	r3, [r7, #28]
 80021da:	005b      	lsls	r3, r3, #1
 80021dc:	fa02 f303 	lsl.w	r3, r2, r3
 80021e0:	69ba      	ldr	r2, [r7, #24]
 80021e2:	4313      	orrs	r3, r2
 80021e4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	69ba      	ldr	r2, [r7, #24]
 80021ea:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80021ec:	683b      	ldr	r3, [r7, #0]
 80021ee:	685b      	ldr	r3, [r3, #4]
 80021f0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	f000 80a2 	beq.w	800233e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80021fa:	2300      	movs	r3, #0
 80021fc:	60fb      	str	r3, [r7, #12]
 80021fe:	4b57      	ldr	r3, [pc, #348]	; (800235c <HAL_GPIO_Init+0x2e8>)
 8002200:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002202:	4a56      	ldr	r2, [pc, #344]	; (800235c <HAL_GPIO_Init+0x2e8>)
 8002204:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002208:	6453      	str	r3, [r2, #68]	; 0x44
 800220a:	4b54      	ldr	r3, [pc, #336]	; (800235c <HAL_GPIO_Init+0x2e8>)
 800220c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800220e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002212:	60fb      	str	r3, [r7, #12]
 8002214:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002216:	4a52      	ldr	r2, [pc, #328]	; (8002360 <HAL_GPIO_Init+0x2ec>)
 8002218:	69fb      	ldr	r3, [r7, #28]
 800221a:	089b      	lsrs	r3, r3, #2
 800221c:	3302      	adds	r3, #2
 800221e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002222:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002224:	69fb      	ldr	r3, [r7, #28]
 8002226:	f003 0303 	and.w	r3, r3, #3
 800222a:	009b      	lsls	r3, r3, #2
 800222c:	220f      	movs	r2, #15
 800222e:	fa02 f303 	lsl.w	r3, r2, r3
 8002232:	43db      	mvns	r3, r3
 8002234:	69ba      	ldr	r2, [r7, #24]
 8002236:	4013      	ands	r3, r2
 8002238:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	4a49      	ldr	r2, [pc, #292]	; (8002364 <HAL_GPIO_Init+0x2f0>)
 800223e:	4293      	cmp	r3, r2
 8002240:	d019      	beq.n	8002276 <HAL_GPIO_Init+0x202>
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	4a48      	ldr	r2, [pc, #288]	; (8002368 <HAL_GPIO_Init+0x2f4>)
 8002246:	4293      	cmp	r3, r2
 8002248:	d013      	beq.n	8002272 <HAL_GPIO_Init+0x1fe>
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	4a47      	ldr	r2, [pc, #284]	; (800236c <HAL_GPIO_Init+0x2f8>)
 800224e:	4293      	cmp	r3, r2
 8002250:	d00d      	beq.n	800226e <HAL_GPIO_Init+0x1fa>
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	4a46      	ldr	r2, [pc, #280]	; (8002370 <HAL_GPIO_Init+0x2fc>)
 8002256:	4293      	cmp	r3, r2
 8002258:	d007      	beq.n	800226a <HAL_GPIO_Init+0x1f6>
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	4a45      	ldr	r2, [pc, #276]	; (8002374 <HAL_GPIO_Init+0x300>)
 800225e:	4293      	cmp	r3, r2
 8002260:	d101      	bne.n	8002266 <HAL_GPIO_Init+0x1f2>
 8002262:	2304      	movs	r3, #4
 8002264:	e008      	b.n	8002278 <HAL_GPIO_Init+0x204>
 8002266:	2307      	movs	r3, #7
 8002268:	e006      	b.n	8002278 <HAL_GPIO_Init+0x204>
 800226a:	2303      	movs	r3, #3
 800226c:	e004      	b.n	8002278 <HAL_GPIO_Init+0x204>
 800226e:	2302      	movs	r3, #2
 8002270:	e002      	b.n	8002278 <HAL_GPIO_Init+0x204>
 8002272:	2301      	movs	r3, #1
 8002274:	e000      	b.n	8002278 <HAL_GPIO_Init+0x204>
 8002276:	2300      	movs	r3, #0
 8002278:	69fa      	ldr	r2, [r7, #28]
 800227a:	f002 0203 	and.w	r2, r2, #3
 800227e:	0092      	lsls	r2, r2, #2
 8002280:	4093      	lsls	r3, r2
 8002282:	69ba      	ldr	r2, [r7, #24]
 8002284:	4313      	orrs	r3, r2
 8002286:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002288:	4935      	ldr	r1, [pc, #212]	; (8002360 <HAL_GPIO_Init+0x2ec>)
 800228a:	69fb      	ldr	r3, [r7, #28]
 800228c:	089b      	lsrs	r3, r3, #2
 800228e:	3302      	adds	r3, #2
 8002290:	69ba      	ldr	r2, [r7, #24]
 8002292:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002296:	4b38      	ldr	r3, [pc, #224]	; (8002378 <HAL_GPIO_Init+0x304>)
 8002298:	689b      	ldr	r3, [r3, #8]
 800229a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800229c:	693b      	ldr	r3, [r7, #16]
 800229e:	43db      	mvns	r3, r3
 80022a0:	69ba      	ldr	r2, [r7, #24]
 80022a2:	4013      	ands	r3, r2
 80022a4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80022a6:	683b      	ldr	r3, [r7, #0]
 80022a8:	685b      	ldr	r3, [r3, #4]
 80022aa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d003      	beq.n	80022ba <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80022b2:	69ba      	ldr	r2, [r7, #24]
 80022b4:	693b      	ldr	r3, [r7, #16]
 80022b6:	4313      	orrs	r3, r2
 80022b8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80022ba:	4a2f      	ldr	r2, [pc, #188]	; (8002378 <HAL_GPIO_Init+0x304>)
 80022bc:	69bb      	ldr	r3, [r7, #24]
 80022be:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80022c0:	4b2d      	ldr	r3, [pc, #180]	; (8002378 <HAL_GPIO_Init+0x304>)
 80022c2:	68db      	ldr	r3, [r3, #12]
 80022c4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022c6:	693b      	ldr	r3, [r7, #16]
 80022c8:	43db      	mvns	r3, r3
 80022ca:	69ba      	ldr	r2, [r7, #24]
 80022cc:	4013      	ands	r3, r2
 80022ce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80022d0:	683b      	ldr	r3, [r7, #0]
 80022d2:	685b      	ldr	r3, [r3, #4]
 80022d4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d003      	beq.n	80022e4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80022dc:	69ba      	ldr	r2, [r7, #24]
 80022de:	693b      	ldr	r3, [r7, #16]
 80022e0:	4313      	orrs	r3, r2
 80022e2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80022e4:	4a24      	ldr	r2, [pc, #144]	; (8002378 <HAL_GPIO_Init+0x304>)
 80022e6:	69bb      	ldr	r3, [r7, #24]
 80022e8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80022ea:	4b23      	ldr	r3, [pc, #140]	; (8002378 <HAL_GPIO_Init+0x304>)
 80022ec:	685b      	ldr	r3, [r3, #4]
 80022ee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022f0:	693b      	ldr	r3, [r7, #16]
 80022f2:	43db      	mvns	r3, r3
 80022f4:	69ba      	ldr	r2, [r7, #24]
 80022f6:	4013      	ands	r3, r2
 80022f8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80022fa:	683b      	ldr	r3, [r7, #0]
 80022fc:	685b      	ldr	r3, [r3, #4]
 80022fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002302:	2b00      	cmp	r3, #0
 8002304:	d003      	beq.n	800230e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002306:	69ba      	ldr	r2, [r7, #24]
 8002308:	693b      	ldr	r3, [r7, #16]
 800230a:	4313      	orrs	r3, r2
 800230c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800230e:	4a1a      	ldr	r2, [pc, #104]	; (8002378 <HAL_GPIO_Init+0x304>)
 8002310:	69bb      	ldr	r3, [r7, #24]
 8002312:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002314:	4b18      	ldr	r3, [pc, #96]	; (8002378 <HAL_GPIO_Init+0x304>)
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800231a:	693b      	ldr	r3, [r7, #16]
 800231c:	43db      	mvns	r3, r3
 800231e:	69ba      	ldr	r2, [r7, #24]
 8002320:	4013      	ands	r3, r2
 8002322:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002324:	683b      	ldr	r3, [r7, #0]
 8002326:	685b      	ldr	r3, [r3, #4]
 8002328:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800232c:	2b00      	cmp	r3, #0
 800232e:	d003      	beq.n	8002338 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002330:	69ba      	ldr	r2, [r7, #24]
 8002332:	693b      	ldr	r3, [r7, #16]
 8002334:	4313      	orrs	r3, r2
 8002336:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002338:	4a0f      	ldr	r2, [pc, #60]	; (8002378 <HAL_GPIO_Init+0x304>)
 800233a:	69bb      	ldr	r3, [r7, #24]
 800233c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800233e:	69fb      	ldr	r3, [r7, #28]
 8002340:	3301      	adds	r3, #1
 8002342:	61fb      	str	r3, [r7, #28]
 8002344:	69fb      	ldr	r3, [r7, #28]
 8002346:	2b0f      	cmp	r3, #15
 8002348:	f67f aea2 	bls.w	8002090 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800234c:	bf00      	nop
 800234e:	bf00      	nop
 8002350:	3724      	adds	r7, #36	; 0x24
 8002352:	46bd      	mov	sp, r7
 8002354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002358:	4770      	bx	lr
 800235a:	bf00      	nop
 800235c:	40023800 	.word	0x40023800
 8002360:	40013800 	.word	0x40013800
 8002364:	40020000 	.word	0x40020000
 8002368:	40020400 	.word	0x40020400
 800236c:	40020800 	.word	0x40020800
 8002370:	40020c00 	.word	0x40020c00
 8002374:	40021000 	.word	0x40021000
 8002378:	40013c00 	.word	0x40013c00

0800237c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800237c:	b480      	push	{r7}
 800237e:	b083      	sub	sp, #12
 8002380:	af00      	add	r7, sp, #0
 8002382:	6078      	str	r0, [r7, #4]
 8002384:	460b      	mov	r3, r1
 8002386:	807b      	strh	r3, [r7, #2]
 8002388:	4613      	mov	r3, r2
 800238a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800238c:	787b      	ldrb	r3, [r7, #1]
 800238e:	2b00      	cmp	r3, #0
 8002390:	d003      	beq.n	800239a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002392:	887a      	ldrh	r2, [r7, #2]
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002398:	e003      	b.n	80023a2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800239a:	887b      	ldrh	r3, [r7, #2]
 800239c:	041a      	lsls	r2, r3, #16
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	619a      	str	r2, [r3, #24]
}
 80023a2:	bf00      	nop
 80023a4:	370c      	adds	r7, #12
 80023a6:	46bd      	mov	sp, r7
 80023a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ac:	4770      	bx	lr
	...

080023b0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80023b0:	b580      	push	{r7, lr}
 80023b2:	b084      	sub	sp, #16
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d101      	bne.n	80023c2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80023be:	2301      	movs	r3, #1
 80023c0:	e12b      	b.n	800261a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80023c8:	b2db      	uxtb	r3, r3
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d106      	bne.n	80023dc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	2200      	movs	r2, #0
 80023d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80023d6:	6878      	ldr	r0, [r7, #4]
 80023d8:	f7ff fba4 	bl	8001b24 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	2224      	movs	r2, #36	; 0x24
 80023e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	681a      	ldr	r2, [r3, #0]
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	f022 0201 	bic.w	r2, r2, #1
 80023f2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	681a      	ldr	r2, [r3, #0]
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002402:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	681a      	ldr	r2, [r3, #0]
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002412:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002414:	f001 fd7c 	bl	8003f10 <HAL_RCC_GetPCLK1Freq>
 8002418:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	685b      	ldr	r3, [r3, #4]
 800241e:	4a81      	ldr	r2, [pc, #516]	; (8002624 <HAL_I2C_Init+0x274>)
 8002420:	4293      	cmp	r3, r2
 8002422:	d807      	bhi.n	8002434 <HAL_I2C_Init+0x84>
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	4a80      	ldr	r2, [pc, #512]	; (8002628 <HAL_I2C_Init+0x278>)
 8002428:	4293      	cmp	r3, r2
 800242a:	bf94      	ite	ls
 800242c:	2301      	movls	r3, #1
 800242e:	2300      	movhi	r3, #0
 8002430:	b2db      	uxtb	r3, r3
 8002432:	e006      	b.n	8002442 <HAL_I2C_Init+0x92>
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	4a7d      	ldr	r2, [pc, #500]	; (800262c <HAL_I2C_Init+0x27c>)
 8002438:	4293      	cmp	r3, r2
 800243a:	bf94      	ite	ls
 800243c:	2301      	movls	r3, #1
 800243e:	2300      	movhi	r3, #0
 8002440:	b2db      	uxtb	r3, r3
 8002442:	2b00      	cmp	r3, #0
 8002444:	d001      	beq.n	800244a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002446:	2301      	movs	r3, #1
 8002448:	e0e7      	b.n	800261a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	4a78      	ldr	r2, [pc, #480]	; (8002630 <HAL_I2C_Init+0x280>)
 800244e:	fba2 2303 	umull	r2, r3, r2, r3
 8002452:	0c9b      	lsrs	r3, r3, #18
 8002454:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	685b      	ldr	r3, [r3, #4]
 800245c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	68ba      	ldr	r2, [r7, #8]
 8002466:	430a      	orrs	r2, r1
 8002468:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	6a1b      	ldr	r3, [r3, #32]
 8002470:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	685b      	ldr	r3, [r3, #4]
 8002478:	4a6a      	ldr	r2, [pc, #424]	; (8002624 <HAL_I2C_Init+0x274>)
 800247a:	4293      	cmp	r3, r2
 800247c:	d802      	bhi.n	8002484 <HAL_I2C_Init+0xd4>
 800247e:	68bb      	ldr	r3, [r7, #8]
 8002480:	3301      	adds	r3, #1
 8002482:	e009      	b.n	8002498 <HAL_I2C_Init+0xe8>
 8002484:	68bb      	ldr	r3, [r7, #8]
 8002486:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800248a:	fb02 f303 	mul.w	r3, r2, r3
 800248e:	4a69      	ldr	r2, [pc, #420]	; (8002634 <HAL_I2C_Init+0x284>)
 8002490:	fba2 2303 	umull	r2, r3, r2, r3
 8002494:	099b      	lsrs	r3, r3, #6
 8002496:	3301      	adds	r3, #1
 8002498:	687a      	ldr	r2, [r7, #4]
 800249a:	6812      	ldr	r2, [r2, #0]
 800249c:	430b      	orrs	r3, r1
 800249e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	69db      	ldr	r3, [r3, #28]
 80024a6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80024aa:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	685b      	ldr	r3, [r3, #4]
 80024b2:	495c      	ldr	r1, [pc, #368]	; (8002624 <HAL_I2C_Init+0x274>)
 80024b4:	428b      	cmp	r3, r1
 80024b6:	d819      	bhi.n	80024ec <HAL_I2C_Init+0x13c>
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	1e59      	subs	r1, r3, #1
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	685b      	ldr	r3, [r3, #4]
 80024c0:	005b      	lsls	r3, r3, #1
 80024c2:	fbb1 f3f3 	udiv	r3, r1, r3
 80024c6:	1c59      	adds	r1, r3, #1
 80024c8:	f640 73fc 	movw	r3, #4092	; 0xffc
 80024cc:	400b      	ands	r3, r1
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d00a      	beq.n	80024e8 <HAL_I2C_Init+0x138>
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	1e59      	subs	r1, r3, #1
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	685b      	ldr	r3, [r3, #4]
 80024da:	005b      	lsls	r3, r3, #1
 80024dc:	fbb1 f3f3 	udiv	r3, r1, r3
 80024e0:	3301      	adds	r3, #1
 80024e2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80024e6:	e051      	b.n	800258c <HAL_I2C_Init+0x1dc>
 80024e8:	2304      	movs	r3, #4
 80024ea:	e04f      	b.n	800258c <HAL_I2C_Init+0x1dc>
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	689b      	ldr	r3, [r3, #8]
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d111      	bne.n	8002518 <HAL_I2C_Init+0x168>
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	1e58      	subs	r0, r3, #1
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	6859      	ldr	r1, [r3, #4]
 80024fc:	460b      	mov	r3, r1
 80024fe:	005b      	lsls	r3, r3, #1
 8002500:	440b      	add	r3, r1
 8002502:	fbb0 f3f3 	udiv	r3, r0, r3
 8002506:	3301      	adds	r3, #1
 8002508:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800250c:	2b00      	cmp	r3, #0
 800250e:	bf0c      	ite	eq
 8002510:	2301      	moveq	r3, #1
 8002512:	2300      	movne	r3, #0
 8002514:	b2db      	uxtb	r3, r3
 8002516:	e012      	b.n	800253e <HAL_I2C_Init+0x18e>
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	1e58      	subs	r0, r3, #1
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	6859      	ldr	r1, [r3, #4]
 8002520:	460b      	mov	r3, r1
 8002522:	009b      	lsls	r3, r3, #2
 8002524:	440b      	add	r3, r1
 8002526:	0099      	lsls	r1, r3, #2
 8002528:	440b      	add	r3, r1
 800252a:	fbb0 f3f3 	udiv	r3, r0, r3
 800252e:	3301      	adds	r3, #1
 8002530:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002534:	2b00      	cmp	r3, #0
 8002536:	bf0c      	ite	eq
 8002538:	2301      	moveq	r3, #1
 800253a:	2300      	movne	r3, #0
 800253c:	b2db      	uxtb	r3, r3
 800253e:	2b00      	cmp	r3, #0
 8002540:	d001      	beq.n	8002546 <HAL_I2C_Init+0x196>
 8002542:	2301      	movs	r3, #1
 8002544:	e022      	b.n	800258c <HAL_I2C_Init+0x1dc>
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	689b      	ldr	r3, [r3, #8]
 800254a:	2b00      	cmp	r3, #0
 800254c:	d10e      	bne.n	800256c <HAL_I2C_Init+0x1bc>
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	1e58      	subs	r0, r3, #1
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	6859      	ldr	r1, [r3, #4]
 8002556:	460b      	mov	r3, r1
 8002558:	005b      	lsls	r3, r3, #1
 800255a:	440b      	add	r3, r1
 800255c:	fbb0 f3f3 	udiv	r3, r0, r3
 8002560:	3301      	adds	r3, #1
 8002562:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002566:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800256a:	e00f      	b.n	800258c <HAL_I2C_Init+0x1dc>
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	1e58      	subs	r0, r3, #1
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	6859      	ldr	r1, [r3, #4]
 8002574:	460b      	mov	r3, r1
 8002576:	009b      	lsls	r3, r3, #2
 8002578:	440b      	add	r3, r1
 800257a:	0099      	lsls	r1, r3, #2
 800257c:	440b      	add	r3, r1
 800257e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002582:	3301      	adds	r3, #1
 8002584:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002588:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800258c:	6879      	ldr	r1, [r7, #4]
 800258e:	6809      	ldr	r1, [r1, #0]
 8002590:	4313      	orrs	r3, r2
 8002592:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	69da      	ldr	r2, [r3, #28]
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	6a1b      	ldr	r3, [r3, #32]
 80025a6:	431a      	orrs	r2, r3
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	430a      	orrs	r2, r1
 80025ae:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	689b      	ldr	r3, [r3, #8]
 80025b6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80025ba:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80025be:	687a      	ldr	r2, [r7, #4]
 80025c0:	6911      	ldr	r1, [r2, #16]
 80025c2:	687a      	ldr	r2, [r7, #4]
 80025c4:	68d2      	ldr	r2, [r2, #12]
 80025c6:	4311      	orrs	r1, r2
 80025c8:	687a      	ldr	r2, [r7, #4]
 80025ca:	6812      	ldr	r2, [r2, #0]
 80025cc:	430b      	orrs	r3, r1
 80025ce:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	68db      	ldr	r3, [r3, #12]
 80025d6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	695a      	ldr	r2, [r3, #20]
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	699b      	ldr	r3, [r3, #24]
 80025e2:	431a      	orrs	r2, r3
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	430a      	orrs	r2, r1
 80025ea:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	681a      	ldr	r2, [r3, #0]
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f042 0201 	orr.w	r2, r2, #1
 80025fa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	2200      	movs	r2, #0
 8002600:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	2220      	movs	r2, #32
 8002606:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	2200      	movs	r2, #0
 800260e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	2200      	movs	r2, #0
 8002614:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002618:	2300      	movs	r3, #0
}
 800261a:	4618      	mov	r0, r3
 800261c:	3710      	adds	r7, #16
 800261e:	46bd      	mov	sp, r7
 8002620:	bd80      	pop	{r7, pc}
 8002622:	bf00      	nop
 8002624:	000186a0 	.word	0x000186a0
 8002628:	001e847f 	.word	0x001e847f
 800262c:	003d08ff 	.word	0x003d08ff
 8002630:	431bde83 	.word	0x431bde83
 8002634:	10624dd3 	.word	0x10624dd3

08002638 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002638:	b580      	push	{r7, lr}
 800263a:	b088      	sub	sp, #32
 800263c:	af02      	add	r7, sp, #8
 800263e:	60f8      	str	r0, [r7, #12]
 8002640:	607a      	str	r2, [r7, #4]
 8002642:	461a      	mov	r2, r3
 8002644:	460b      	mov	r3, r1
 8002646:	817b      	strh	r3, [r7, #10]
 8002648:	4613      	mov	r3, r2
 800264a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800264c:	f7ff fbfc 	bl	8001e48 <HAL_GetTick>
 8002650:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002658:	b2db      	uxtb	r3, r3
 800265a:	2b20      	cmp	r3, #32
 800265c:	f040 80e0 	bne.w	8002820 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002660:	697b      	ldr	r3, [r7, #20]
 8002662:	9300      	str	r3, [sp, #0]
 8002664:	2319      	movs	r3, #25
 8002666:	2201      	movs	r2, #1
 8002668:	4970      	ldr	r1, [pc, #448]	; (800282c <HAL_I2C_Master_Transmit+0x1f4>)
 800266a:	68f8      	ldr	r0, [r7, #12]
 800266c:	f000 fe02 	bl	8003274 <I2C_WaitOnFlagUntilTimeout>
 8002670:	4603      	mov	r3, r0
 8002672:	2b00      	cmp	r3, #0
 8002674:	d001      	beq.n	800267a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002676:	2302      	movs	r3, #2
 8002678:	e0d3      	b.n	8002822 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002680:	2b01      	cmp	r3, #1
 8002682:	d101      	bne.n	8002688 <HAL_I2C_Master_Transmit+0x50>
 8002684:	2302      	movs	r3, #2
 8002686:	e0cc      	b.n	8002822 <HAL_I2C_Master_Transmit+0x1ea>
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	2201      	movs	r2, #1
 800268c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f003 0301 	and.w	r3, r3, #1
 800269a:	2b01      	cmp	r3, #1
 800269c:	d007      	beq.n	80026ae <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	681a      	ldr	r2, [r3, #0]
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	f042 0201 	orr.w	r2, r2, #1
 80026ac:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	681a      	ldr	r2, [r3, #0]
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80026bc:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	2221      	movs	r2, #33	; 0x21
 80026c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	2210      	movs	r2, #16
 80026ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	2200      	movs	r2, #0
 80026d2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	687a      	ldr	r2, [r7, #4]
 80026d8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	893a      	ldrh	r2, [r7, #8]
 80026de:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026e4:	b29a      	uxth	r2, r3
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	4a50      	ldr	r2, [pc, #320]	; (8002830 <HAL_I2C_Master_Transmit+0x1f8>)
 80026ee:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80026f0:	8979      	ldrh	r1, [r7, #10]
 80026f2:	697b      	ldr	r3, [r7, #20]
 80026f4:	6a3a      	ldr	r2, [r7, #32]
 80026f6:	68f8      	ldr	r0, [r7, #12]
 80026f8:	f000 fbbc 	bl	8002e74 <I2C_MasterRequestWrite>
 80026fc:	4603      	mov	r3, r0
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d001      	beq.n	8002706 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002702:	2301      	movs	r3, #1
 8002704:	e08d      	b.n	8002822 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002706:	2300      	movs	r3, #0
 8002708:	613b      	str	r3, [r7, #16]
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	695b      	ldr	r3, [r3, #20]
 8002710:	613b      	str	r3, [r7, #16]
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	699b      	ldr	r3, [r3, #24]
 8002718:	613b      	str	r3, [r7, #16]
 800271a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800271c:	e066      	b.n	80027ec <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800271e:	697a      	ldr	r2, [r7, #20]
 8002720:	6a39      	ldr	r1, [r7, #32]
 8002722:	68f8      	ldr	r0, [r7, #12]
 8002724:	f000 fe7c 	bl	8003420 <I2C_WaitOnTXEFlagUntilTimeout>
 8002728:	4603      	mov	r3, r0
 800272a:	2b00      	cmp	r3, #0
 800272c:	d00d      	beq.n	800274a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002732:	2b04      	cmp	r3, #4
 8002734:	d107      	bne.n	8002746 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	681a      	ldr	r2, [r3, #0]
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002744:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002746:	2301      	movs	r3, #1
 8002748:	e06b      	b.n	8002822 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800274e:	781a      	ldrb	r2, [r3, #0]
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800275a:	1c5a      	adds	r2, r3, #1
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002764:	b29b      	uxth	r3, r3
 8002766:	3b01      	subs	r3, #1
 8002768:	b29a      	uxth	r2, r3
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002772:	3b01      	subs	r3, #1
 8002774:	b29a      	uxth	r2, r3
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	695b      	ldr	r3, [r3, #20]
 8002780:	f003 0304 	and.w	r3, r3, #4
 8002784:	2b04      	cmp	r3, #4
 8002786:	d11b      	bne.n	80027c0 <HAL_I2C_Master_Transmit+0x188>
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800278c:	2b00      	cmp	r3, #0
 800278e:	d017      	beq.n	80027c0 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002794:	781a      	ldrb	r2, [r3, #0]
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027a0:	1c5a      	adds	r2, r3, #1
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027aa:	b29b      	uxth	r3, r3
 80027ac:	3b01      	subs	r3, #1
 80027ae:	b29a      	uxth	r2, r3
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027b8:	3b01      	subs	r3, #1
 80027ba:	b29a      	uxth	r2, r3
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80027c0:	697a      	ldr	r2, [r7, #20]
 80027c2:	6a39      	ldr	r1, [r7, #32]
 80027c4:	68f8      	ldr	r0, [r7, #12]
 80027c6:	f000 fe6c 	bl	80034a2 <I2C_WaitOnBTFFlagUntilTimeout>
 80027ca:	4603      	mov	r3, r0
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d00d      	beq.n	80027ec <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027d4:	2b04      	cmp	r3, #4
 80027d6:	d107      	bne.n	80027e8 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	681a      	ldr	r2, [r3, #0]
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80027e6:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80027e8:	2301      	movs	r3, #1
 80027ea:	e01a      	b.n	8002822 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d194      	bne.n	800271e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	681a      	ldr	r2, [r3, #0]
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002802:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	2220      	movs	r2, #32
 8002808:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	2200      	movs	r2, #0
 8002810:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	2200      	movs	r2, #0
 8002818:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800281c:	2300      	movs	r3, #0
 800281e:	e000      	b.n	8002822 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002820:	2302      	movs	r3, #2
  }
}
 8002822:	4618      	mov	r0, r3
 8002824:	3718      	adds	r7, #24
 8002826:	46bd      	mov	sp, r7
 8002828:	bd80      	pop	{r7, pc}
 800282a:	bf00      	nop
 800282c:	00100002 	.word	0x00100002
 8002830:	ffff0000 	.word	0xffff0000

08002834 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002834:	b580      	push	{r7, lr}
 8002836:	b088      	sub	sp, #32
 8002838:	af02      	add	r7, sp, #8
 800283a:	60f8      	str	r0, [r7, #12]
 800283c:	4608      	mov	r0, r1
 800283e:	4611      	mov	r1, r2
 8002840:	461a      	mov	r2, r3
 8002842:	4603      	mov	r3, r0
 8002844:	817b      	strh	r3, [r7, #10]
 8002846:	460b      	mov	r3, r1
 8002848:	813b      	strh	r3, [r7, #8]
 800284a:	4613      	mov	r3, r2
 800284c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800284e:	f7ff fafb 	bl	8001e48 <HAL_GetTick>
 8002852:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800285a:	b2db      	uxtb	r3, r3
 800285c:	2b20      	cmp	r3, #32
 800285e:	f040 80d9 	bne.w	8002a14 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002862:	697b      	ldr	r3, [r7, #20]
 8002864:	9300      	str	r3, [sp, #0]
 8002866:	2319      	movs	r3, #25
 8002868:	2201      	movs	r2, #1
 800286a:	496d      	ldr	r1, [pc, #436]	; (8002a20 <HAL_I2C_Mem_Write+0x1ec>)
 800286c:	68f8      	ldr	r0, [r7, #12]
 800286e:	f000 fd01 	bl	8003274 <I2C_WaitOnFlagUntilTimeout>
 8002872:	4603      	mov	r3, r0
 8002874:	2b00      	cmp	r3, #0
 8002876:	d001      	beq.n	800287c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002878:	2302      	movs	r3, #2
 800287a:	e0cc      	b.n	8002a16 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002882:	2b01      	cmp	r3, #1
 8002884:	d101      	bne.n	800288a <HAL_I2C_Mem_Write+0x56>
 8002886:	2302      	movs	r3, #2
 8002888:	e0c5      	b.n	8002a16 <HAL_I2C_Mem_Write+0x1e2>
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	2201      	movs	r2, #1
 800288e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	f003 0301 	and.w	r3, r3, #1
 800289c:	2b01      	cmp	r3, #1
 800289e:	d007      	beq.n	80028b0 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	681a      	ldr	r2, [r3, #0]
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f042 0201 	orr.w	r2, r2, #1
 80028ae:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	681a      	ldr	r2, [r3, #0]
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80028be:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	2221      	movs	r2, #33	; 0x21
 80028c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	2240      	movs	r2, #64	; 0x40
 80028cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	2200      	movs	r2, #0
 80028d4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	6a3a      	ldr	r2, [r7, #32]
 80028da:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80028e0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028e6:	b29a      	uxth	r2, r3
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	4a4d      	ldr	r2, [pc, #308]	; (8002a24 <HAL_I2C_Mem_Write+0x1f0>)
 80028f0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80028f2:	88f8      	ldrh	r0, [r7, #6]
 80028f4:	893a      	ldrh	r2, [r7, #8]
 80028f6:	8979      	ldrh	r1, [r7, #10]
 80028f8:	697b      	ldr	r3, [r7, #20]
 80028fa:	9301      	str	r3, [sp, #4]
 80028fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028fe:	9300      	str	r3, [sp, #0]
 8002900:	4603      	mov	r3, r0
 8002902:	68f8      	ldr	r0, [r7, #12]
 8002904:	f000 fb38 	bl	8002f78 <I2C_RequestMemoryWrite>
 8002908:	4603      	mov	r3, r0
 800290a:	2b00      	cmp	r3, #0
 800290c:	d052      	beq.n	80029b4 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800290e:	2301      	movs	r3, #1
 8002910:	e081      	b.n	8002a16 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002912:	697a      	ldr	r2, [r7, #20]
 8002914:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002916:	68f8      	ldr	r0, [r7, #12]
 8002918:	f000 fd82 	bl	8003420 <I2C_WaitOnTXEFlagUntilTimeout>
 800291c:	4603      	mov	r3, r0
 800291e:	2b00      	cmp	r3, #0
 8002920:	d00d      	beq.n	800293e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002926:	2b04      	cmp	r3, #4
 8002928:	d107      	bne.n	800293a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	681a      	ldr	r2, [r3, #0]
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002938:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800293a:	2301      	movs	r3, #1
 800293c:	e06b      	b.n	8002a16 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002942:	781a      	ldrb	r2, [r3, #0]
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800294e:	1c5a      	adds	r2, r3, #1
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002958:	3b01      	subs	r3, #1
 800295a:	b29a      	uxth	r2, r3
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002964:	b29b      	uxth	r3, r3
 8002966:	3b01      	subs	r3, #1
 8002968:	b29a      	uxth	r2, r3
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	695b      	ldr	r3, [r3, #20]
 8002974:	f003 0304 	and.w	r3, r3, #4
 8002978:	2b04      	cmp	r3, #4
 800297a:	d11b      	bne.n	80029b4 <HAL_I2C_Mem_Write+0x180>
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002980:	2b00      	cmp	r3, #0
 8002982:	d017      	beq.n	80029b4 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002988:	781a      	ldrb	r2, [r3, #0]
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002994:	1c5a      	adds	r2, r3, #1
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800299e:	3b01      	subs	r3, #1
 80029a0:	b29a      	uxth	r2, r3
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029aa:	b29b      	uxth	r3, r3
 80029ac:	3b01      	subs	r3, #1
 80029ae:	b29a      	uxth	r2, r3
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d1aa      	bne.n	8002912 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80029bc:	697a      	ldr	r2, [r7, #20]
 80029be:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80029c0:	68f8      	ldr	r0, [r7, #12]
 80029c2:	f000 fd6e 	bl	80034a2 <I2C_WaitOnBTFFlagUntilTimeout>
 80029c6:	4603      	mov	r3, r0
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d00d      	beq.n	80029e8 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029d0:	2b04      	cmp	r3, #4
 80029d2:	d107      	bne.n	80029e4 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	681a      	ldr	r2, [r3, #0]
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80029e2:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80029e4:	2301      	movs	r3, #1
 80029e6:	e016      	b.n	8002a16 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	681a      	ldr	r2, [r3, #0]
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80029f6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	2220      	movs	r2, #32
 80029fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	2200      	movs	r2, #0
 8002a04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	2200      	movs	r2, #0
 8002a0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002a10:	2300      	movs	r3, #0
 8002a12:	e000      	b.n	8002a16 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002a14:	2302      	movs	r3, #2
  }
}
 8002a16:	4618      	mov	r0, r3
 8002a18:	3718      	adds	r7, #24
 8002a1a:	46bd      	mov	sp, r7
 8002a1c:	bd80      	pop	{r7, pc}
 8002a1e:	bf00      	nop
 8002a20:	00100002 	.word	0x00100002
 8002a24:	ffff0000 	.word	0xffff0000

08002a28 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002a28:	b580      	push	{r7, lr}
 8002a2a:	b08c      	sub	sp, #48	; 0x30
 8002a2c:	af02      	add	r7, sp, #8
 8002a2e:	60f8      	str	r0, [r7, #12]
 8002a30:	4608      	mov	r0, r1
 8002a32:	4611      	mov	r1, r2
 8002a34:	461a      	mov	r2, r3
 8002a36:	4603      	mov	r3, r0
 8002a38:	817b      	strh	r3, [r7, #10]
 8002a3a:	460b      	mov	r3, r1
 8002a3c:	813b      	strh	r3, [r7, #8]
 8002a3e:	4613      	mov	r3, r2
 8002a40:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002a42:	f7ff fa01 	bl	8001e48 <HAL_GetTick>
 8002a46:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a4e:	b2db      	uxtb	r3, r3
 8002a50:	2b20      	cmp	r3, #32
 8002a52:	f040 8208 	bne.w	8002e66 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002a56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a58:	9300      	str	r3, [sp, #0]
 8002a5a:	2319      	movs	r3, #25
 8002a5c:	2201      	movs	r2, #1
 8002a5e:	497b      	ldr	r1, [pc, #492]	; (8002c4c <HAL_I2C_Mem_Read+0x224>)
 8002a60:	68f8      	ldr	r0, [r7, #12]
 8002a62:	f000 fc07 	bl	8003274 <I2C_WaitOnFlagUntilTimeout>
 8002a66:	4603      	mov	r3, r0
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d001      	beq.n	8002a70 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8002a6c:	2302      	movs	r3, #2
 8002a6e:	e1fb      	b.n	8002e68 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002a76:	2b01      	cmp	r3, #1
 8002a78:	d101      	bne.n	8002a7e <HAL_I2C_Mem_Read+0x56>
 8002a7a:	2302      	movs	r3, #2
 8002a7c:	e1f4      	b.n	8002e68 <HAL_I2C_Mem_Read+0x440>
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	2201      	movs	r2, #1
 8002a82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	f003 0301 	and.w	r3, r3, #1
 8002a90:	2b01      	cmp	r3, #1
 8002a92:	d007      	beq.n	8002aa4 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	681a      	ldr	r2, [r3, #0]
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f042 0201 	orr.w	r2, r2, #1
 8002aa2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	681a      	ldr	r2, [r3, #0]
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002ab2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	2222      	movs	r2, #34	; 0x22
 8002ab8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	2240      	movs	r2, #64	; 0x40
 8002ac0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	2200      	movs	r2, #0
 8002ac8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002ace:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8002ad4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ada:	b29a      	uxth	r2, r3
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	4a5b      	ldr	r2, [pc, #364]	; (8002c50 <HAL_I2C_Mem_Read+0x228>)
 8002ae4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002ae6:	88f8      	ldrh	r0, [r7, #6]
 8002ae8:	893a      	ldrh	r2, [r7, #8]
 8002aea:	8979      	ldrh	r1, [r7, #10]
 8002aec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aee:	9301      	str	r3, [sp, #4]
 8002af0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002af2:	9300      	str	r3, [sp, #0]
 8002af4:	4603      	mov	r3, r0
 8002af6:	68f8      	ldr	r0, [r7, #12]
 8002af8:	f000 fad4 	bl	80030a4 <I2C_RequestMemoryRead>
 8002afc:	4603      	mov	r3, r0
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d001      	beq.n	8002b06 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8002b02:	2301      	movs	r3, #1
 8002b04:	e1b0      	b.n	8002e68 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d113      	bne.n	8002b36 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002b0e:	2300      	movs	r3, #0
 8002b10:	623b      	str	r3, [r7, #32]
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	695b      	ldr	r3, [r3, #20]
 8002b18:	623b      	str	r3, [r7, #32]
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	699b      	ldr	r3, [r3, #24]
 8002b20:	623b      	str	r3, [r7, #32]
 8002b22:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	681a      	ldr	r2, [r3, #0]
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b32:	601a      	str	r2, [r3, #0]
 8002b34:	e184      	b.n	8002e40 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b3a:	2b01      	cmp	r3, #1
 8002b3c:	d11b      	bne.n	8002b76 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	681a      	ldr	r2, [r3, #0]
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002b4c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002b4e:	2300      	movs	r3, #0
 8002b50:	61fb      	str	r3, [r7, #28]
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	695b      	ldr	r3, [r3, #20]
 8002b58:	61fb      	str	r3, [r7, #28]
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	699b      	ldr	r3, [r3, #24]
 8002b60:	61fb      	str	r3, [r7, #28]
 8002b62:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	681a      	ldr	r2, [r3, #0]
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b72:	601a      	str	r2, [r3, #0]
 8002b74:	e164      	b.n	8002e40 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b7a:	2b02      	cmp	r3, #2
 8002b7c:	d11b      	bne.n	8002bb6 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	681a      	ldr	r2, [r3, #0]
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002b8c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	681a      	ldr	r2, [r3, #0]
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002b9c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002b9e:	2300      	movs	r3, #0
 8002ba0:	61bb      	str	r3, [r7, #24]
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	695b      	ldr	r3, [r3, #20]
 8002ba8:	61bb      	str	r3, [r7, #24]
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	699b      	ldr	r3, [r3, #24]
 8002bb0:	61bb      	str	r3, [r7, #24]
 8002bb2:	69bb      	ldr	r3, [r7, #24]
 8002bb4:	e144      	b.n	8002e40 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002bb6:	2300      	movs	r3, #0
 8002bb8:	617b      	str	r3, [r7, #20]
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	695b      	ldr	r3, [r3, #20]
 8002bc0:	617b      	str	r3, [r7, #20]
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	699b      	ldr	r3, [r3, #24]
 8002bc8:	617b      	str	r3, [r7, #20]
 8002bca:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002bcc:	e138      	b.n	8002e40 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002bd2:	2b03      	cmp	r3, #3
 8002bd4:	f200 80f1 	bhi.w	8002dba <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002bdc:	2b01      	cmp	r3, #1
 8002bde:	d123      	bne.n	8002c28 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002be0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002be2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002be4:	68f8      	ldr	r0, [r7, #12]
 8002be6:	f000 fc9d 	bl	8003524 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002bea:	4603      	mov	r3, r0
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d001      	beq.n	8002bf4 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8002bf0:	2301      	movs	r3, #1
 8002bf2:	e139      	b.n	8002e68 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	691a      	ldr	r2, [r3, #16]
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bfe:	b2d2      	uxtb	r2, r2
 8002c00:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c06:	1c5a      	adds	r2, r3, #1
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c10:	3b01      	subs	r3, #1
 8002c12:	b29a      	uxth	r2, r3
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c1c:	b29b      	uxth	r3, r3
 8002c1e:	3b01      	subs	r3, #1
 8002c20:	b29a      	uxth	r2, r3
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002c26:	e10b      	b.n	8002e40 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c2c:	2b02      	cmp	r3, #2
 8002c2e:	d14e      	bne.n	8002cce <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002c30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c32:	9300      	str	r3, [sp, #0]
 8002c34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c36:	2200      	movs	r2, #0
 8002c38:	4906      	ldr	r1, [pc, #24]	; (8002c54 <HAL_I2C_Mem_Read+0x22c>)
 8002c3a:	68f8      	ldr	r0, [r7, #12]
 8002c3c:	f000 fb1a 	bl	8003274 <I2C_WaitOnFlagUntilTimeout>
 8002c40:	4603      	mov	r3, r0
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d008      	beq.n	8002c58 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8002c46:	2301      	movs	r3, #1
 8002c48:	e10e      	b.n	8002e68 <HAL_I2C_Mem_Read+0x440>
 8002c4a:	bf00      	nop
 8002c4c:	00100002 	.word	0x00100002
 8002c50:	ffff0000 	.word	0xffff0000
 8002c54:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	681a      	ldr	r2, [r3, #0]
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c66:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	691a      	ldr	r2, [r3, #16]
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c72:	b2d2      	uxtb	r2, r2
 8002c74:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c7a:	1c5a      	adds	r2, r3, #1
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c84:	3b01      	subs	r3, #1
 8002c86:	b29a      	uxth	r2, r3
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c90:	b29b      	uxth	r3, r3
 8002c92:	3b01      	subs	r3, #1
 8002c94:	b29a      	uxth	r2, r3
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	691a      	ldr	r2, [r3, #16]
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ca4:	b2d2      	uxtb	r2, r2
 8002ca6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cac:	1c5a      	adds	r2, r3, #1
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002cb6:	3b01      	subs	r3, #1
 8002cb8:	b29a      	uxth	r2, r3
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cc2:	b29b      	uxth	r3, r3
 8002cc4:	3b01      	subs	r3, #1
 8002cc6:	b29a      	uxth	r2, r3
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002ccc:	e0b8      	b.n	8002e40 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002cce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cd0:	9300      	str	r3, [sp, #0]
 8002cd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002cd4:	2200      	movs	r2, #0
 8002cd6:	4966      	ldr	r1, [pc, #408]	; (8002e70 <HAL_I2C_Mem_Read+0x448>)
 8002cd8:	68f8      	ldr	r0, [r7, #12]
 8002cda:	f000 facb 	bl	8003274 <I2C_WaitOnFlagUntilTimeout>
 8002cde:	4603      	mov	r3, r0
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d001      	beq.n	8002ce8 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8002ce4:	2301      	movs	r3, #1
 8002ce6:	e0bf      	b.n	8002e68 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	681a      	ldr	r2, [r3, #0]
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002cf6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	691a      	ldr	r2, [r3, #16]
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d02:	b2d2      	uxtb	r2, r2
 8002d04:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d0a:	1c5a      	adds	r2, r3, #1
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d14:	3b01      	subs	r3, #1
 8002d16:	b29a      	uxth	r2, r3
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d20:	b29b      	uxth	r3, r3
 8002d22:	3b01      	subs	r3, #1
 8002d24:	b29a      	uxth	r2, r3
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002d2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d2c:	9300      	str	r3, [sp, #0]
 8002d2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d30:	2200      	movs	r2, #0
 8002d32:	494f      	ldr	r1, [pc, #316]	; (8002e70 <HAL_I2C_Mem_Read+0x448>)
 8002d34:	68f8      	ldr	r0, [r7, #12]
 8002d36:	f000 fa9d 	bl	8003274 <I2C_WaitOnFlagUntilTimeout>
 8002d3a:	4603      	mov	r3, r0
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d001      	beq.n	8002d44 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8002d40:	2301      	movs	r3, #1
 8002d42:	e091      	b.n	8002e68 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	681a      	ldr	r2, [r3, #0]
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d52:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	691a      	ldr	r2, [r3, #16]
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d5e:	b2d2      	uxtb	r2, r2
 8002d60:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d66:	1c5a      	adds	r2, r3, #1
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d70:	3b01      	subs	r3, #1
 8002d72:	b29a      	uxth	r2, r3
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d7c:	b29b      	uxth	r3, r3
 8002d7e:	3b01      	subs	r3, #1
 8002d80:	b29a      	uxth	r2, r3
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	691a      	ldr	r2, [r3, #16]
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d90:	b2d2      	uxtb	r2, r2
 8002d92:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d98:	1c5a      	adds	r2, r3, #1
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002da2:	3b01      	subs	r3, #1
 8002da4:	b29a      	uxth	r2, r3
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002dae:	b29b      	uxth	r3, r3
 8002db0:	3b01      	subs	r3, #1
 8002db2:	b29a      	uxth	r2, r3
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002db8:	e042      	b.n	8002e40 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002dba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002dbc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002dbe:	68f8      	ldr	r0, [r7, #12]
 8002dc0:	f000 fbb0 	bl	8003524 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002dc4:	4603      	mov	r3, r0
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d001      	beq.n	8002dce <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8002dca:	2301      	movs	r3, #1
 8002dcc:	e04c      	b.n	8002e68 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	691a      	ldr	r2, [r3, #16]
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dd8:	b2d2      	uxtb	r2, r2
 8002dda:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002de0:	1c5a      	adds	r2, r3, #1
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002dea:	3b01      	subs	r3, #1
 8002dec:	b29a      	uxth	r2, r3
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002df6:	b29b      	uxth	r3, r3
 8002df8:	3b01      	subs	r3, #1
 8002dfa:	b29a      	uxth	r2, r3
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	695b      	ldr	r3, [r3, #20]
 8002e06:	f003 0304 	and.w	r3, r3, #4
 8002e0a:	2b04      	cmp	r3, #4
 8002e0c:	d118      	bne.n	8002e40 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	691a      	ldr	r2, [r3, #16]
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e18:	b2d2      	uxtb	r2, r2
 8002e1a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e20:	1c5a      	adds	r2, r3, #1
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e2a:	3b01      	subs	r3, #1
 8002e2c:	b29a      	uxth	r2, r3
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e36:	b29b      	uxth	r3, r3
 8002e38:	3b01      	subs	r3, #1
 8002e3a:	b29a      	uxth	r2, r3
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	f47f aec2 	bne.w	8002bce <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	2220      	movs	r2, #32
 8002e4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	2200      	movs	r2, #0
 8002e56:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	2200      	movs	r2, #0
 8002e5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002e62:	2300      	movs	r3, #0
 8002e64:	e000      	b.n	8002e68 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8002e66:	2302      	movs	r3, #2
  }
}
 8002e68:	4618      	mov	r0, r3
 8002e6a:	3728      	adds	r7, #40	; 0x28
 8002e6c:	46bd      	mov	sp, r7
 8002e6e:	bd80      	pop	{r7, pc}
 8002e70:	00010004 	.word	0x00010004

08002e74 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002e74:	b580      	push	{r7, lr}
 8002e76:	b088      	sub	sp, #32
 8002e78:	af02      	add	r7, sp, #8
 8002e7a:	60f8      	str	r0, [r7, #12]
 8002e7c:	607a      	str	r2, [r7, #4]
 8002e7e:	603b      	str	r3, [r7, #0]
 8002e80:	460b      	mov	r3, r1
 8002e82:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e88:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002e8a:	697b      	ldr	r3, [r7, #20]
 8002e8c:	2b08      	cmp	r3, #8
 8002e8e:	d006      	beq.n	8002e9e <I2C_MasterRequestWrite+0x2a>
 8002e90:	697b      	ldr	r3, [r7, #20]
 8002e92:	2b01      	cmp	r3, #1
 8002e94:	d003      	beq.n	8002e9e <I2C_MasterRequestWrite+0x2a>
 8002e96:	697b      	ldr	r3, [r7, #20]
 8002e98:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002e9c:	d108      	bne.n	8002eb0 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	681a      	ldr	r2, [r3, #0]
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002eac:	601a      	str	r2, [r3, #0]
 8002eae:	e00b      	b.n	8002ec8 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eb4:	2b12      	cmp	r3, #18
 8002eb6:	d107      	bne.n	8002ec8 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	681a      	ldr	r2, [r3, #0]
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002ec6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002ec8:	683b      	ldr	r3, [r7, #0]
 8002eca:	9300      	str	r3, [sp, #0]
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	2200      	movs	r2, #0
 8002ed0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002ed4:	68f8      	ldr	r0, [r7, #12]
 8002ed6:	f000 f9cd 	bl	8003274 <I2C_WaitOnFlagUntilTimeout>
 8002eda:	4603      	mov	r3, r0
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d00d      	beq.n	8002efc <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002eea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002eee:	d103      	bne.n	8002ef8 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002ef6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002ef8:	2303      	movs	r3, #3
 8002efa:	e035      	b.n	8002f68 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	691b      	ldr	r3, [r3, #16]
 8002f00:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002f04:	d108      	bne.n	8002f18 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002f06:	897b      	ldrh	r3, [r7, #10]
 8002f08:	b2db      	uxtb	r3, r3
 8002f0a:	461a      	mov	r2, r3
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002f14:	611a      	str	r2, [r3, #16]
 8002f16:	e01b      	b.n	8002f50 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002f18:	897b      	ldrh	r3, [r7, #10]
 8002f1a:	11db      	asrs	r3, r3, #7
 8002f1c:	b2db      	uxtb	r3, r3
 8002f1e:	f003 0306 	and.w	r3, r3, #6
 8002f22:	b2db      	uxtb	r3, r3
 8002f24:	f063 030f 	orn	r3, r3, #15
 8002f28:	b2da      	uxtb	r2, r3
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002f30:	683b      	ldr	r3, [r7, #0]
 8002f32:	687a      	ldr	r2, [r7, #4]
 8002f34:	490e      	ldr	r1, [pc, #56]	; (8002f70 <I2C_MasterRequestWrite+0xfc>)
 8002f36:	68f8      	ldr	r0, [r7, #12]
 8002f38:	f000 f9f3 	bl	8003322 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002f3c:	4603      	mov	r3, r0
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d001      	beq.n	8002f46 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002f42:	2301      	movs	r3, #1
 8002f44:	e010      	b.n	8002f68 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002f46:	897b      	ldrh	r3, [r7, #10]
 8002f48:	b2da      	uxtb	r2, r3
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002f50:	683b      	ldr	r3, [r7, #0]
 8002f52:	687a      	ldr	r2, [r7, #4]
 8002f54:	4907      	ldr	r1, [pc, #28]	; (8002f74 <I2C_MasterRequestWrite+0x100>)
 8002f56:	68f8      	ldr	r0, [r7, #12]
 8002f58:	f000 f9e3 	bl	8003322 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002f5c:	4603      	mov	r3, r0
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d001      	beq.n	8002f66 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002f62:	2301      	movs	r3, #1
 8002f64:	e000      	b.n	8002f68 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002f66:	2300      	movs	r3, #0
}
 8002f68:	4618      	mov	r0, r3
 8002f6a:	3718      	adds	r7, #24
 8002f6c:	46bd      	mov	sp, r7
 8002f6e:	bd80      	pop	{r7, pc}
 8002f70:	00010008 	.word	0x00010008
 8002f74:	00010002 	.word	0x00010002

08002f78 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002f78:	b580      	push	{r7, lr}
 8002f7a:	b088      	sub	sp, #32
 8002f7c:	af02      	add	r7, sp, #8
 8002f7e:	60f8      	str	r0, [r7, #12]
 8002f80:	4608      	mov	r0, r1
 8002f82:	4611      	mov	r1, r2
 8002f84:	461a      	mov	r2, r3
 8002f86:	4603      	mov	r3, r0
 8002f88:	817b      	strh	r3, [r7, #10]
 8002f8a:	460b      	mov	r3, r1
 8002f8c:	813b      	strh	r3, [r7, #8]
 8002f8e:	4613      	mov	r3, r2
 8002f90:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	681a      	ldr	r2, [r3, #0]
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002fa0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002fa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fa4:	9300      	str	r3, [sp, #0]
 8002fa6:	6a3b      	ldr	r3, [r7, #32]
 8002fa8:	2200      	movs	r2, #0
 8002faa:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002fae:	68f8      	ldr	r0, [r7, #12]
 8002fb0:	f000 f960 	bl	8003274 <I2C_WaitOnFlagUntilTimeout>
 8002fb4:	4603      	mov	r3, r0
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d00d      	beq.n	8002fd6 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fc4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002fc8:	d103      	bne.n	8002fd2 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002fd0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002fd2:	2303      	movs	r3, #3
 8002fd4:	e05f      	b.n	8003096 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002fd6:	897b      	ldrh	r3, [r7, #10]
 8002fd8:	b2db      	uxtb	r3, r3
 8002fda:	461a      	mov	r2, r3
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002fe4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002fe6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fe8:	6a3a      	ldr	r2, [r7, #32]
 8002fea:	492d      	ldr	r1, [pc, #180]	; (80030a0 <I2C_RequestMemoryWrite+0x128>)
 8002fec:	68f8      	ldr	r0, [r7, #12]
 8002fee:	f000 f998 	bl	8003322 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002ff2:	4603      	mov	r3, r0
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d001      	beq.n	8002ffc <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8002ff8:	2301      	movs	r3, #1
 8002ffa:	e04c      	b.n	8003096 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002ffc:	2300      	movs	r3, #0
 8002ffe:	617b      	str	r3, [r7, #20]
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	695b      	ldr	r3, [r3, #20]
 8003006:	617b      	str	r3, [r7, #20]
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	699b      	ldr	r3, [r3, #24]
 800300e:	617b      	str	r3, [r7, #20]
 8003010:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003012:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003014:	6a39      	ldr	r1, [r7, #32]
 8003016:	68f8      	ldr	r0, [r7, #12]
 8003018:	f000 fa02 	bl	8003420 <I2C_WaitOnTXEFlagUntilTimeout>
 800301c:	4603      	mov	r3, r0
 800301e:	2b00      	cmp	r3, #0
 8003020:	d00d      	beq.n	800303e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003026:	2b04      	cmp	r3, #4
 8003028:	d107      	bne.n	800303a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	681a      	ldr	r2, [r3, #0]
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003038:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800303a:	2301      	movs	r3, #1
 800303c:	e02b      	b.n	8003096 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800303e:	88fb      	ldrh	r3, [r7, #6]
 8003040:	2b01      	cmp	r3, #1
 8003042:	d105      	bne.n	8003050 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003044:	893b      	ldrh	r3, [r7, #8]
 8003046:	b2da      	uxtb	r2, r3
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	611a      	str	r2, [r3, #16]
 800304e:	e021      	b.n	8003094 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003050:	893b      	ldrh	r3, [r7, #8]
 8003052:	0a1b      	lsrs	r3, r3, #8
 8003054:	b29b      	uxth	r3, r3
 8003056:	b2da      	uxtb	r2, r3
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800305e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003060:	6a39      	ldr	r1, [r7, #32]
 8003062:	68f8      	ldr	r0, [r7, #12]
 8003064:	f000 f9dc 	bl	8003420 <I2C_WaitOnTXEFlagUntilTimeout>
 8003068:	4603      	mov	r3, r0
 800306a:	2b00      	cmp	r3, #0
 800306c:	d00d      	beq.n	800308a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003072:	2b04      	cmp	r3, #4
 8003074:	d107      	bne.n	8003086 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	681a      	ldr	r2, [r3, #0]
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003084:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003086:	2301      	movs	r3, #1
 8003088:	e005      	b.n	8003096 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800308a:	893b      	ldrh	r3, [r7, #8]
 800308c:	b2da      	uxtb	r2, r3
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003094:	2300      	movs	r3, #0
}
 8003096:	4618      	mov	r0, r3
 8003098:	3718      	adds	r7, #24
 800309a:	46bd      	mov	sp, r7
 800309c:	bd80      	pop	{r7, pc}
 800309e:	bf00      	nop
 80030a0:	00010002 	.word	0x00010002

080030a4 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80030a4:	b580      	push	{r7, lr}
 80030a6:	b088      	sub	sp, #32
 80030a8:	af02      	add	r7, sp, #8
 80030aa:	60f8      	str	r0, [r7, #12]
 80030ac:	4608      	mov	r0, r1
 80030ae:	4611      	mov	r1, r2
 80030b0:	461a      	mov	r2, r3
 80030b2:	4603      	mov	r3, r0
 80030b4:	817b      	strh	r3, [r7, #10]
 80030b6:	460b      	mov	r3, r1
 80030b8:	813b      	strh	r3, [r7, #8]
 80030ba:	4613      	mov	r3, r2
 80030bc:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	681a      	ldr	r2, [r3, #0]
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80030cc:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	681a      	ldr	r2, [r3, #0]
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80030dc:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80030de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030e0:	9300      	str	r3, [sp, #0]
 80030e2:	6a3b      	ldr	r3, [r7, #32]
 80030e4:	2200      	movs	r2, #0
 80030e6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80030ea:	68f8      	ldr	r0, [r7, #12]
 80030ec:	f000 f8c2 	bl	8003274 <I2C_WaitOnFlagUntilTimeout>
 80030f0:	4603      	mov	r3, r0
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d00d      	beq.n	8003112 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003100:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003104:	d103      	bne.n	800310e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	f44f 7200 	mov.w	r2, #512	; 0x200
 800310c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800310e:	2303      	movs	r3, #3
 8003110:	e0aa      	b.n	8003268 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003112:	897b      	ldrh	r3, [r7, #10]
 8003114:	b2db      	uxtb	r3, r3
 8003116:	461a      	mov	r2, r3
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003120:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003122:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003124:	6a3a      	ldr	r2, [r7, #32]
 8003126:	4952      	ldr	r1, [pc, #328]	; (8003270 <I2C_RequestMemoryRead+0x1cc>)
 8003128:	68f8      	ldr	r0, [r7, #12]
 800312a:	f000 f8fa 	bl	8003322 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800312e:	4603      	mov	r3, r0
 8003130:	2b00      	cmp	r3, #0
 8003132:	d001      	beq.n	8003138 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8003134:	2301      	movs	r3, #1
 8003136:	e097      	b.n	8003268 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003138:	2300      	movs	r3, #0
 800313a:	617b      	str	r3, [r7, #20]
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	695b      	ldr	r3, [r3, #20]
 8003142:	617b      	str	r3, [r7, #20]
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	699b      	ldr	r3, [r3, #24]
 800314a:	617b      	str	r3, [r7, #20]
 800314c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800314e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003150:	6a39      	ldr	r1, [r7, #32]
 8003152:	68f8      	ldr	r0, [r7, #12]
 8003154:	f000 f964 	bl	8003420 <I2C_WaitOnTXEFlagUntilTimeout>
 8003158:	4603      	mov	r3, r0
 800315a:	2b00      	cmp	r3, #0
 800315c:	d00d      	beq.n	800317a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003162:	2b04      	cmp	r3, #4
 8003164:	d107      	bne.n	8003176 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	681a      	ldr	r2, [r3, #0]
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003174:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003176:	2301      	movs	r3, #1
 8003178:	e076      	b.n	8003268 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800317a:	88fb      	ldrh	r3, [r7, #6]
 800317c:	2b01      	cmp	r3, #1
 800317e:	d105      	bne.n	800318c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003180:	893b      	ldrh	r3, [r7, #8]
 8003182:	b2da      	uxtb	r2, r3
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	611a      	str	r2, [r3, #16]
 800318a:	e021      	b.n	80031d0 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800318c:	893b      	ldrh	r3, [r7, #8]
 800318e:	0a1b      	lsrs	r3, r3, #8
 8003190:	b29b      	uxth	r3, r3
 8003192:	b2da      	uxtb	r2, r3
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800319a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800319c:	6a39      	ldr	r1, [r7, #32]
 800319e:	68f8      	ldr	r0, [r7, #12]
 80031a0:	f000 f93e 	bl	8003420 <I2C_WaitOnTXEFlagUntilTimeout>
 80031a4:	4603      	mov	r3, r0
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d00d      	beq.n	80031c6 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031ae:	2b04      	cmp	r3, #4
 80031b0:	d107      	bne.n	80031c2 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	681a      	ldr	r2, [r3, #0]
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80031c0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80031c2:	2301      	movs	r3, #1
 80031c4:	e050      	b.n	8003268 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80031c6:	893b      	ldrh	r3, [r7, #8]
 80031c8:	b2da      	uxtb	r2, r3
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80031d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80031d2:	6a39      	ldr	r1, [r7, #32]
 80031d4:	68f8      	ldr	r0, [r7, #12]
 80031d6:	f000 f923 	bl	8003420 <I2C_WaitOnTXEFlagUntilTimeout>
 80031da:	4603      	mov	r3, r0
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d00d      	beq.n	80031fc <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031e4:	2b04      	cmp	r3, #4
 80031e6:	d107      	bne.n	80031f8 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	681a      	ldr	r2, [r3, #0]
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80031f6:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80031f8:	2301      	movs	r3, #1
 80031fa:	e035      	b.n	8003268 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	681a      	ldr	r2, [r3, #0]
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800320a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800320c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800320e:	9300      	str	r3, [sp, #0]
 8003210:	6a3b      	ldr	r3, [r7, #32]
 8003212:	2200      	movs	r2, #0
 8003214:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003218:	68f8      	ldr	r0, [r7, #12]
 800321a:	f000 f82b 	bl	8003274 <I2C_WaitOnFlagUntilTimeout>
 800321e:	4603      	mov	r3, r0
 8003220:	2b00      	cmp	r3, #0
 8003222:	d00d      	beq.n	8003240 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800322e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003232:	d103      	bne.n	800323c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	f44f 7200 	mov.w	r2, #512	; 0x200
 800323a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800323c:	2303      	movs	r3, #3
 800323e:	e013      	b.n	8003268 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003240:	897b      	ldrh	r3, [r7, #10]
 8003242:	b2db      	uxtb	r3, r3
 8003244:	f043 0301 	orr.w	r3, r3, #1
 8003248:	b2da      	uxtb	r2, r3
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003250:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003252:	6a3a      	ldr	r2, [r7, #32]
 8003254:	4906      	ldr	r1, [pc, #24]	; (8003270 <I2C_RequestMemoryRead+0x1cc>)
 8003256:	68f8      	ldr	r0, [r7, #12]
 8003258:	f000 f863 	bl	8003322 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800325c:	4603      	mov	r3, r0
 800325e:	2b00      	cmp	r3, #0
 8003260:	d001      	beq.n	8003266 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8003262:	2301      	movs	r3, #1
 8003264:	e000      	b.n	8003268 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8003266:	2300      	movs	r3, #0
}
 8003268:	4618      	mov	r0, r3
 800326a:	3718      	adds	r7, #24
 800326c:	46bd      	mov	sp, r7
 800326e:	bd80      	pop	{r7, pc}
 8003270:	00010002 	.word	0x00010002

08003274 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003274:	b580      	push	{r7, lr}
 8003276:	b084      	sub	sp, #16
 8003278:	af00      	add	r7, sp, #0
 800327a:	60f8      	str	r0, [r7, #12]
 800327c:	60b9      	str	r1, [r7, #8]
 800327e:	603b      	str	r3, [r7, #0]
 8003280:	4613      	mov	r3, r2
 8003282:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003284:	e025      	b.n	80032d2 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003286:	683b      	ldr	r3, [r7, #0]
 8003288:	f1b3 3fff 	cmp.w	r3, #4294967295
 800328c:	d021      	beq.n	80032d2 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800328e:	f7fe fddb 	bl	8001e48 <HAL_GetTick>
 8003292:	4602      	mov	r2, r0
 8003294:	69bb      	ldr	r3, [r7, #24]
 8003296:	1ad3      	subs	r3, r2, r3
 8003298:	683a      	ldr	r2, [r7, #0]
 800329a:	429a      	cmp	r2, r3
 800329c:	d302      	bcc.n	80032a4 <I2C_WaitOnFlagUntilTimeout+0x30>
 800329e:	683b      	ldr	r3, [r7, #0]
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d116      	bne.n	80032d2 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	2200      	movs	r2, #0
 80032a8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	2220      	movs	r2, #32
 80032ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	2200      	movs	r2, #0
 80032b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032be:	f043 0220 	orr.w	r2, r3, #32
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	2200      	movs	r2, #0
 80032ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80032ce:	2301      	movs	r3, #1
 80032d0:	e023      	b.n	800331a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80032d2:	68bb      	ldr	r3, [r7, #8]
 80032d4:	0c1b      	lsrs	r3, r3, #16
 80032d6:	b2db      	uxtb	r3, r3
 80032d8:	2b01      	cmp	r3, #1
 80032da:	d10d      	bne.n	80032f8 <I2C_WaitOnFlagUntilTimeout+0x84>
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	695b      	ldr	r3, [r3, #20]
 80032e2:	43da      	mvns	r2, r3
 80032e4:	68bb      	ldr	r3, [r7, #8]
 80032e6:	4013      	ands	r3, r2
 80032e8:	b29b      	uxth	r3, r3
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	bf0c      	ite	eq
 80032ee:	2301      	moveq	r3, #1
 80032f0:	2300      	movne	r3, #0
 80032f2:	b2db      	uxtb	r3, r3
 80032f4:	461a      	mov	r2, r3
 80032f6:	e00c      	b.n	8003312 <I2C_WaitOnFlagUntilTimeout+0x9e>
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	699b      	ldr	r3, [r3, #24]
 80032fe:	43da      	mvns	r2, r3
 8003300:	68bb      	ldr	r3, [r7, #8]
 8003302:	4013      	ands	r3, r2
 8003304:	b29b      	uxth	r3, r3
 8003306:	2b00      	cmp	r3, #0
 8003308:	bf0c      	ite	eq
 800330a:	2301      	moveq	r3, #1
 800330c:	2300      	movne	r3, #0
 800330e:	b2db      	uxtb	r3, r3
 8003310:	461a      	mov	r2, r3
 8003312:	79fb      	ldrb	r3, [r7, #7]
 8003314:	429a      	cmp	r2, r3
 8003316:	d0b6      	beq.n	8003286 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003318:	2300      	movs	r3, #0
}
 800331a:	4618      	mov	r0, r3
 800331c:	3710      	adds	r7, #16
 800331e:	46bd      	mov	sp, r7
 8003320:	bd80      	pop	{r7, pc}

08003322 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003322:	b580      	push	{r7, lr}
 8003324:	b084      	sub	sp, #16
 8003326:	af00      	add	r7, sp, #0
 8003328:	60f8      	str	r0, [r7, #12]
 800332a:	60b9      	str	r1, [r7, #8]
 800332c:	607a      	str	r2, [r7, #4]
 800332e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003330:	e051      	b.n	80033d6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	695b      	ldr	r3, [r3, #20]
 8003338:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800333c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003340:	d123      	bne.n	800338a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	681a      	ldr	r2, [r3, #0]
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003350:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800335a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	2200      	movs	r2, #0
 8003360:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	2220      	movs	r2, #32
 8003366:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	2200      	movs	r2, #0
 800336e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003376:	f043 0204 	orr.w	r2, r3, #4
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	2200      	movs	r2, #0
 8003382:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003386:	2301      	movs	r3, #1
 8003388:	e046      	b.n	8003418 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003390:	d021      	beq.n	80033d6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003392:	f7fe fd59 	bl	8001e48 <HAL_GetTick>
 8003396:	4602      	mov	r2, r0
 8003398:	683b      	ldr	r3, [r7, #0]
 800339a:	1ad3      	subs	r3, r2, r3
 800339c:	687a      	ldr	r2, [r7, #4]
 800339e:	429a      	cmp	r2, r3
 80033a0:	d302      	bcc.n	80033a8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d116      	bne.n	80033d6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	2200      	movs	r2, #0
 80033ac:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	2220      	movs	r2, #32
 80033b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	2200      	movs	r2, #0
 80033ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033c2:	f043 0220 	orr.w	r2, r3, #32
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	2200      	movs	r2, #0
 80033ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80033d2:	2301      	movs	r3, #1
 80033d4:	e020      	b.n	8003418 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80033d6:	68bb      	ldr	r3, [r7, #8]
 80033d8:	0c1b      	lsrs	r3, r3, #16
 80033da:	b2db      	uxtb	r3, r3
 80033dc:	2b01      	cmp	r3, #1
 80033de:	d10c      	bne.n	80033fa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	695b      	ldr	r3, [r3, #20]
 80033e6:	43da      	mvns	r2, r3
 80033e8:	68bb      	ldr	r3, [r7, #8]
 80033ea:	4013      	ands	r3, r2
 80033ec:	b29b      	uxth	r3, r3
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	bf14      	ite	ne
 80033f2:	2301      	movne	r3, #1
 80033f4:	2300      	moveq	r3, #0
 80033f6:	b2db      	uxtb	r3, r3
 80033f8:	e00b      	b.n	8003412 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	699b      	ldr	r3, [r3, #24]
 8003400:	43da      	mvns	r2, r3
 8003402:	68bb      	ldr	r3, [r7, #8]
 8003404:	4013      	ands	r3, r2
 8003406:	b29b      	uxth	r3, r3
 8003408:	2b00      	cmp	r3, #0
 800340a:	bf14      	ite	ne
 800340c:	2301      	movne	r3, #1
 800340e:	2300      	moveq	r3, #0
 8003410:	b2db      	uxtb	r3, r3
 8003412:	2b00      	cmp	r3, #0
 8003414:	d18d      	bne.n	8003332 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8003416:	2300      	movs	r3, #0
}
 8003418:	4618      	mov	r0, r3
 800341a:	3710      	adds	r7, #16
 800341c:	46bd      	mov	sp, r7
 800341e:	bd80      	pop	{r7, pc}

08003420 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003420:	b580      	push	{r7, lr}
 8003422:	b084      	sub	sp, #16
 8003424:	af00      	add	r7, sp, #0
 8003426:	60f8      	str	r0, [r7, #12]
 8003428:	60b9      	str	r1, [r7, #8]
 800342a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800342c:	e02d      	b.n	800348a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800342e:	68f8      	ldr	r0, [r7, #12]
 8003430:	f000 f8ce 	bl	80035d0 <I2C_IsAcknowledgeFailed>
 8003434:	4603      	mov	r3, r0
 8003436:	2b00      	cmp	r3, #0
 8003438:	d001      	beq.n	800343e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800343a:	2301      	movs	r3, #1
 800343c:	e02d      	b.n	800349a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800343e:	68bb      	ldr	r3, [r7, #8]
 8003440:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003444:	d021      	beq.n	800348a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003446:	f7fe fcff 	bl	8001e48 <HAL_GetTick>
 800344a:	4602      	mov	r2, r0
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	1ad3      	subs	r3, r2, r3
 8003450:	68ba      	ldr	r2, [r7, #8]
 8003452:	429a      	cmp	r2, r3
 8003454:	d302      	bcc.n	800345c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003456:	68bb      	ldr	r3, [r7, #8]
 8003458:	2b00      	cmp	r3, #0
 800345a:	d116      	bne.n	800348a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	2200      	movs	r2, #0
 8003460:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	2220      	movs	r2, #32
 8003466:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	2200      	movs	r2, #0
 800346e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003476:	f043 0220 	orr.w	r2, r3, #32
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	2200      	movs	r2, #0
 8003482:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003486:	2301      	movs	r3, #1
 8003488:	e007      	b.n	800349a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	695b      	ldr	r3, [r3, #20]
 8003490:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003494:	2b80      	cmp	r3, #128	; 0x80
 8003496:	d1ca      	bne.n	800342e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003498:	2300      	movs	r3, #0
}
 800349a:	4618      	mov	r0, r3
 800349c:	3710      	adds	r7, #16
 800349e:	46bd      	mov	sp, r7
 80034a0:	bd80      	pop	{r7, pc}

080034a2 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80034a2:	b580      	push	{r7, lr}
 80034a4:	b084      	sub	sp, #16
 80034a6:	af00      	add	r7, sp, #0
 80034a8:	60f8      	str	r0, [r7, #12]
 80034aa:	60b9      	str	r1, [r7, #8]
 80034ac:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80034ae:	e02d      	b.n	800350c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80034b0:	68f8      	ldr	r0, [r7, #12]
 80034b2:	f000 f88d 	bl	80035d0 <I2C_IsAcknowledgeFailed>
 80034b6:	4603      	mov	r3, r0
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d001      	beq.n	80034c0 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80034bc:	2301      	movs	r3, #1
 80034be:	e02d      	b.n	800351c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80034c0:	68bb      	ldr	r3, [r7, #8]
 80034c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034c6:	d021      	beq.n	800350c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80034c8:	f7fe fcbe 	bl	8001e48 <HAL_GetTick>
 80034cc:	4602      	mov	r2, r0
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	1ad3      	subs	r3, r2, r3
 80034d2:	68ba      	ldr	r2, [r7, #8]
 80034d4:	429a      	cmp	r2, r3
 80034d6:	d302      	bcc.n	80034de <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80034d8:	68bb      	ldr	r3, [r7, #8]
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d116      	bne.n	800350c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	2200      	movs	r2, #0
 80034e2:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	2220      	movs	r2, #32
 80034e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	2200      	movs	r2, #0
 80034f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034f8:	f043 0220 	orr.w	r2, r3, #32
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	2200      	movs	r2, #0
 8003504:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003508:	2301      	movs	r3, #1
 800350a:	e007      	b.n	800351c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	695b      	ldr	r3, [r3, #20]
 8003512:	f003 0304 	and.w	r3, r3, #4
 8003516:	2b04      	cmp	r3, #4
 8003518:	d1ca      	bne.n	80034b0 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800351a:	2300      	movs	r3, #0
}
 800351c:	4618      	mov	r0, r3
 800351e:	3710      	adds	r7, #16
 8003520:	46bd      	mov	sp, r7
 8003522:	bd80      	pop	{r7, pc}

08003524 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003524:	b580      	push	{r7, lr}
 8003526:	b084      	sub	sp, #16
 8003528:	af00      	add	r7, sp, #0
 800352a:	60f8      	str	r0, [r7, #12]
 800352c:	60b9      	str	r1, [r7, #8]
 800352e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003530:	e042      	b.n	80035b8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	695b      	ldr	r3, [r3, #20]
 8003538:	f003 0310 	and.w	r3, r3, #16
 800353c:	2b10      	cmp	r3, #16
 800353e:	d119      	bne.n	8003574 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	f06f 0210 	mvn.w	r2, #16
 8003548:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	2200      	movs	r2, #0
 800354e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	2220      	movs	r2, #32
 8003554:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	2200      	movs	r2, #0
 800355c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	2200      	movs	r2, #0
 800356c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003570:	2301      	movs	r3, #1
 8003572:	e029      	b.n	80035c8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003574:	f7fe fc68 	bl	8001e48 <HAL_GetTick>
 8003578:	4602      	mov	r2, r0
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	1ad3      	subs	r3, r2, r3
 800357e:	68ba      	ldr	r2, [r7, #8]
 8003580:	429a      	cmp	r2, r3
 8003582:	d302      	bcc.n	800358a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003584:	68bb      	ldr	r3, [r7, #8]
 8003586:	2b00      	cmp	r3, #0
 8003588:	d116      	bne.n	80035b8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	2200      	movs	r2, #0
 800358e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	2220      	movs	r2, #32
 8003594:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	2200      	movs	r2, #0
 800359c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035a4:	f043 0220 	orr.w	r2, r3, #32
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	2200      	movs	r2, #0
 80035b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80035b4:	2301      	movs	r3, #1
 80035b6:	e007      	b.n	80035c8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	695b      	ldr	r3, [r3, #20]
 80035be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035c2:	2b40      	cmp	r3, #64	; 0x40
 80035c4:	d1b5      	bne.n	8003532 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80035c6:	2300      	movs	r3, #0
}
 80035c8:	4618      	mov	r0, r3
 80035ca:	3710      	adds	r7, #16
 80035cc:	46bd      	mov	sp, r7
 80035ce:	bd80      	pop	{r7, pc}

080035d0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80035d0:	b480      	push	{r7}
 80035d2:	b083      	sub	sp, #12
 80035d4:	af00      	add	r7, sp, #0
 80035d6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	695b      	ldr	r3, [r3, #20]
 80035de:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80035e2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80035e6:	d11b      	bne.n	8003620 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80035f0:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	2200      	movs	r2, #0
 80035f6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	2220      	movs	r2, #32
 80035fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	2200      	movs	r2, #0
 8003604:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800360c:	f043 0204 	orr.w	r2, r3, #4
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	2200      	movs	r2, #0
 8003618:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800361c:	2301      	movs	r3, #1
 800361e:	e000      	b.n	8003622 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003620:	2300      	movs	r3, #0
}
 8003622:	4618      	mov	r0, r3
 8003624:	370c      	adds	r7, #12
 8003626:	46bd      	mov	sp, r7
 8003628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800362c:	4770      	bx	lr
	...

08003630 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003630:	b580      	push	{r7, lr}
 8003632:	b086      	sub	sp, #24
 8003634:	af00      	add	r7, sp, #0
 8003636:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	2b00      	cmp	r3, #0
 800363c:	d101      	bne.n	8003642 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800363e:	2301      	movs	r3, #1
 8003640:	e267      	b.n	8003b12 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	f003 0301 	and.w	r3, r3, #1
 800364a:	2b00      	cmp	r3, #0
 800364c:	d075      	beq.n	800373a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800364e:	4b88      	ldr	r3, [pc, #544]	; (8003870 <HAL_RCC_OscConfig+0x240>)
 8003650:	689b      	ldr	r3, [r3, #8]
 8003652:	f003 030c 	and.w	r3, r3, #12
 8003656:	2b04      	cmp	r3, #4
 8003658:	d00c      	beq.n	8003674 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800365a:	4b85      	ldr	r3, [pc, #532]	; (8003870 <HAL_RCC_OscConfig+0x240>)
 800365c:	689b      	ldr	r3, [r3, #8]
 800365e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003662:	2b08      	cmp	r3, #8
 8003664:	d112      	bne.n	800368c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003666:	4b82      	ldr	r3, [pc, #520]	; (8003870 <HAL_RCC_OscConfig+0x240>)
 8003668:	685b      	ldr	r3, [r3, #4]
 800366a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800366e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003672:	d10b      	bne.n	800368c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003674:	4b7e      	ldr	r3, [pc, #504]	; (8003870 <HAL_RCC_OscConfig+0x240>)
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800367c:	2b00      	cmp	r3, #0
 800367e:	d05b      	beq.n	8003738 <HAL_RCC_OscConfig+0x108>
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	685b      	ldr	r3, [r3, #4]
 8003684:	2b00      	cmp	r3, #0
 8003686:	d157      	bne.n	8003738 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003688:	2301      	movs	r3, #1
 800368a:	e242      	b.n	8003b12 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	685b      	ldr	r3, [r3, #4]
 8003690:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003694:	d106      	bne.n	80036a4 <HAL_RCC_OscConfig+0x74>
 8003696:	4b76      	ldr	r3, [pc, #472]	; (8003870 <HAL_RCC_OscConfig+0x240>)
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	4a75      	ldr	r2, [pc, #468]	; (8003870 <HAL_RCC_OscConfig+0x240>)
 800369c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80036a0:	6013      	str	r3, [r2, #0]
 80036a2:	e01d      	b.n	80036e0 <HAL_RCC_OscConfig+0xb0>
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	685b      	ldr	r3, [r3, #4]
 80036a8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80036ac:	d10c      	bne.n	80036c8 <HAL_RCC_OscConfig+0x98>
 80036ae:	4b70      	ldr	r3, [pc, #448]	; (8003870 <HAL_RCC_OscConfig+0x240>)
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	4a6f      	ldr	r2, [pc, #444]	; (8003870 <HAL_RCC_OscConfig+0x240>)
 80036b4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80036b8:	6013      	str	r3, [r2, #0]
 80036ba:	4b6d      	ldr	r3, [pc, #436]	; (8003870 <HAL_RCC_OscConfig+0x240>)
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	4a6c      	ldr	r2, [pc, #432]	; (8003870 <HAL_RCC_OscConfig+0x240>)
 80036c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80036c4:	6013      	str	r3, [r2, #0]
 80036c6:	e00b      	b.n	80036e0 <HAL_RCC_OscConfig+0xb0>
 80036c8:	4b69      	ldr	r3, [pc, #420]	; (8003870 <HAL_RCC_OscConfig+0x240>)
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	4a68      	ldr	r2, [pc, #416]	; (8003870 <HAL_RCC_OscConfig+0x240>)
 80036ce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80036d2:	6013      	str	r3, [r2, #0]
 80036d4:	4b66      	ldr	r3, [pc, #408]	; (8003870 <HAL_RCC_OscConfig+0x240>)
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	4a65      	ldr	r2, [pc, #404]	; (8003870 <HAL_RCC_OscConfig+0x240>)
 80036da:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80036de:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	685b      	ldr	r3, [r3, #4]
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d013      	beq.n	8003710 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036e8:	f7fe fbae 	bl	8001e48 <HAL_GetTick>
 80036ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80036ee:	e008      	b.n	8003702 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80036f0:	f7fe fbaa 	bl	8001e48 <HAL_GetTick>
 80036f4:	4602      	mov	r2, r0
 80036f6:	693b      	ldr	r3, [r7, #16]
 80036f8:	1ad3      	subs	r3, r2, r3
 80036fa:	2b64      	cmp	r3, #100	; 0x64
 80036fc:	d901      	bls.n	8003702 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80036fe:	2303      	movs	r3, #3
 8003700:	e207      	b.n	8003b12 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003702:	4b5b      	ldr	r3, [pc, #364]	; (8003870 <HAL_RCC_OscConfig+0x240>)
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800370a:	2b00      	cmp	r3, #0
 800370c:	d0f0      	beq.n	80036f0 <HAL_RCC_OscConfig+0xc0>
 800370e:	e014      	b.n	800373a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003710:	f7fe fb9a 	bl	8001e48 <HAL_GetTick>
 8003714:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003716:	e008      	b.n	800372a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003718:	f7fe fb96 	bl	8001e48 <HAL_GetTick>
 800371c:	4602      	mov	r2, r0
 800371e:	693b      	ldr	r3, [r7, #16]
 8003720:	1ad3      	subs	r3, r2, r3
 8003722:	2b64      	cmp	r3, #100	; 0x64
 8003724:	d901      	bls.n	800372a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003726:	2303      	movs	r3, #3
 8003728:	e1f3      	b.n	8003b12 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800372a:	4b51      	ldr	r3, [pc, #324]	; (8003870 <HAL_RCC_OscConfig+0x240>)
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003732:	2b00      	cmp	r3, #0
 8003734:	d1f0      	bne.n	8003718 <HAL_RCC_OscConfig+0xe8>
 8003736:	e000      	b.n	800373a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003738:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	f003 0302 	and.w	r3, r3, #2
 8003742:	2b00      	cmp	r3, #0
 8003744:	d063      	beq.n	800380e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003746:	4b4a      	ldr	r3, [pc, #296]	; (8003870 <HAL_RCC_OscConfig+0x240>)
 8003748:	689b      	ldr	r3, [r3, #8]
 800374a:	f003 030c 	and.w	r3, r3, #12
 800374e:	2b00      	cmp	r3, #0
 8003750:	d00b      	beq.n	800376a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003752:	4b47      	ldr	r3, [pc, #284]	; (8003870 <HAL_RCC_OscConfig+0x240>)
 8003754:	689b      	ldr	r3, [r3, #8]
 8003756:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800375a:	2b08      	cmp	r3, #8
 800375c:	d11c      	bne.n	8003798 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800375e:	4b44      	ldr	r3, [pc, #272]	; (8003870 <HAL_RCC_OscConfig+0x240>)
 8003760:	685b      	ldr	r3, [r3, #4]
 8003762:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003766:	2b00      	cmp	r3, #0
 8003768:	d116      	bne.n	8003798 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800376a:	4b41      	ldr	r3, [pc, #260]	; (8003870 <HAL_RCC_OscConfig+0x240>)
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	f003 0302 	and.w	r3, r3, #2
 8003772:	2b00      	cmp	r3, #0
 8003774:	d005      	beq.n	8003782 <HAL_RCC_OscConfig+0x152>
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	68db      	ldr	r3, [r3, #12]
 800377a:	2b01      	cmp	r3, #1
 800377c:	d001      	beq.n	8003782 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800377e:	2301      	movs	r3, #1
 8003780:	e1c7      	b.n	8003b12 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003782:	4b3b      	ldr	r3, [pc, #236]	; (8003870 <HAL_RCC_OscConfig+0x240>)
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	691b      	ldr	r3, [r3, #16]
 800378e:	00db      	lsls	r3, r3, #3
 8003790:	4937      	ldr	r1, [pc, #220]	; (8003870 <HAL_RCC_OscConfig+0x240>)
 8003792:	4313      	orrs	r3, r2
 8003794:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003796:	e03a      	b.n	800380e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	68db      	ldr	r3, [r3, #12]
 800379c:	2b00      	cmp	r3, #0
 800379e:	d020      	beq.n	80037e2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80037a0:	4b34      	ldr	r3, [pc, #208]	; (8003874 <HAL_RCC_OscConfig+0x244>)
 80037a2:	2201      	movs	r2, #1
 80037a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037a6:	f7fe fb4f 	bl	8001e48 <HAL_GetTick>
 80037aa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80037ac:	e008      	b.n	80037c0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80037ae:	f7fe fb4b 	bl	8001e48 <HAL_GetTick>
 80037b2:	4602      	mov	r2, r0
 80037b4:	693b      	ldr	r3, [r7, #16]
 80037b6:	1ad3      	subs	r3, r2, r3
 80037b8:	2b02      	cmp	r3, #2
 80037ba:	d901      	bls.n	80037c0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80037bc:	2303      	movs	r3, #3
 80037be:	e1a8      	b.n	8003b12 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80037c0:	4b2b      	ldr	r3, [pc, #172]	; (8003870 <HAL_RCC_OscConfig+0x240>)
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	f003 0302 	and.w	r3, r3, #2
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d0f0      	beq.n	80037ae <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80037cc:	4b28      	ldr	r3, [pc, #160]	; (8003870 <HAL_RCC_OscConfig+0x240>)
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	691b      	ldr	r3, [r3, #16]
 80037d8:	00db      	lsls	r3, r3, #3
 80037da:	4925      	ldr	r1, [pc, #148]	; (8003870 <HAL_RCC_OscConfig+0x240>)
 80037dc:	4313      	orrs	r3, r2
 80037de:	600b      	str	r3, [r1, #0]
 80037e0:	e015      	b.n	800380e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80037e2:	4b24      	ldr	r3, [pc, #144]	; (8003874 <HAL_RCC_OscConfig+0x244>)
 80037e4:	2200      	movs	r2, #0
 80037e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037e8:	f7fe fb2e 	bl	8001e48 <HAL_GetTick>
 80037ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80037ee:	e008      	b.n	8003802 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80037f0:	f7fe fb2a 	bl	8001e48 <HAL_GetTick>
 80037f4:	4602      	mov	r2, r0
 80037f6:	693b      	ldr	r3, [r7, #16]
 80037f8:	1ad3      	subs	r3, r2, r3
 80037fa:	2b02      	cmp	r3, #2
 80037fc:	d901      	bls.n	8003802 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80037fe:	2303      	movs	r3, #3
 8003800:	e187      	b.n	8003b12 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003802:	4b1b      	ldr	r3, [pc, #108]	; (8003870 <HAL_RCC_OscConfig+0x240>)
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	f003 0302 	and.w	r3, r3, #2
 800380a:	2b00      	cmp	r3, #0
 800380c:	d1f0      	bne.n	80037f0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	f003 0308 	and.w	r3, r3, #8
 8003816:	2b00      	cmp	r3, #0
 8003818:	d036      	beq.n	8003888 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	695b      	ldr	r3, [r3, #20]
 800381e:	2b00      	cmp	r3, #0
 8003820:	d016      	beq.n	8003850 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003822:	4b15      	ldr	r3, [pc, #84]	; (8003878 <HAL_RCC_OscConfig+0x248>)
 8003824:	2201      	movs	r2, #1
 8003826:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003828:	f7fe fb0e 	bl	8001e48 <HAL_GetTick>
 800382c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800382e:	e008      	b.n	8003842 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003830:	f7fe fb0a 	bl	8001e48 <HAL_GetTick>
 8003834:	4602      	mov	r2, r0
 8003836:	693b      	ldr	r3, [r7, #16]
 8003838:	1ad3      	subs	r3, r2, r3
 800383a:	2b02      	cmp	r3, #2
 800383c:	d901      	bls.n	8003842 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800383e:	2303      	movs	r3, #3
 8003840:	e167      	b.n	8003b12 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003842:	4b0b      	ldr	r3, [pc, #44]	; (8003870 <HAL_RCC_OscConfig+0x240>)
 8003844:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003846:	f003 0302 	and.w	r3, r3, #2
 800384a:	2b00      	cmp	r3, #0
 800384c:	d0f0      	beq.n	8003830 <HAL_RCC_OscConfig+0x200>
 800384e:	e01b      	b.n	8003888 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003850:	4b09      	ldr	r3, [pc, #36]	; (8003878 <HAL_RCC_OscConfig+0x248>)
 8003852:	2200      	movs	r2, #0
 8003854:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003856:	f7fe faf7 	bl	8001e48 <HAL_GetTick>
 800385a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800385c:	e00e      	b.n	800387c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800385e:	f7fe faf3 	bl	8001e48 <HAL_GetTick>
 8003862:	4602      	mov	r2, r0
 8003864:	693b      	ldr	r3, [r7, #16]
 8003866:	1ad3      	subs	r3, r2, r3
 8003868:	2b02      	cmp	r3, #2
 800386a:	d907      	bls.n	800387c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800386c:	2303      	movs	r3, #3
 800386e:	e150      	b.n	8003b12 <HAL_RCC_OscConfig+0x4e2>
 8003870:	40023800 	.word	0x40023800
 8003874:	42470000 	.word	0x42470000
 8003878:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800387c:	4b88      	ldr	r3, [pc, #544]	; (8003aa0 <HAL_RCC_OscConfig+0x470>)
 800387e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003880:	f003 0302 	and.w	r3, r3, #2
 8003884:	2b00      	cmp	r3, #0
 8003886:	d1ea      	bne.n	800385e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	f003 0304 	and.w	r3, r3, #4
 8003890:	2b00      	cmp	r3, #0
 8003892:	f000 8097 	beq.w	80039c4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003896:	2300      	movs	r3, #0
 8003898:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800389a:	4b81      	ldr	r3, [pc, #516]	; (8003aa0 <HAL_RCC_OscConfig+0x470>)
 800389c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800389e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d10f      	bne.n	80038c6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80038a6:	2300      	movs	r3, #0
 80038a8:	60bb      	str	r3, [r7, #8]
 80038aa:	4b7d      	ldr	r3, [pc, #500]	; (8003aa0 <HAL_RCC_OscConfig+0x470>)
 80038ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038ae:	4a7c      	ldr	r2, [pc, #496]	; (8003aa0 <HAL_RCC_OscConfig+0x470>)
 80038b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80038b4:	6413      	str	r3, [r2, #64]	; 0x40
 80038b6:	4b7a      	ldr	r3, [pc, #488]	; (8003aa0 <HAL_RCC_OscConfig+0x470>)
 80038b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038be:	60bb      	str	r3, [r7, #8]
 80038c0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80038c2:	2301      	movs	r3, #1
 80038c4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80038c6:	4b77      	ldr	r3, [pc, #476]	; (8003aa4 <HAL_RCC_OscConfig+0x474>)
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d118      	bne.n	8003904 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80038d2:	4b74      	ldr	r3, [pc, #464]	; (8003aa4 <HAL_RCC_OscConfig+0x474>)
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	4a73      	ldr	r2, [pc, #460]	; (8003aa4 <HAL_RCC_OscConfig+0x474>)
 80038d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80038dc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80038de:	f7fe fab3 	bl	8001e48 <HAL_GetTick>
 80038e2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80038e4:	e008      	b.n	80038f8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80038e6:	f7fe faaf 	bl	8001e48 <HAL_GetTick>
 80038ea:	4602      	mov	r2, r0
 80038ec:	693b      	ldr	r3, [r7, #16]
 80038ee:	1ad3      	subs	r3, r2, r3
 80038f0:	2b02      	cmp	r3, #2
 80038f2:	d901      	bls.n	80038f8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80038f4:	2303      	movs	r3, #3
 80038f6:	e10c      	b.n	8003b12 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80038f8:	4b6a      	ldr	r3, [pc, #424]	; (8003aa4 <HAL_RCC_OscConfig+0x474>)
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003900:	2b00      	cmp	r3, #0
 8003902:	d0f0      	beq.n	80038e6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	689b      	ldr	r3, [r3, #8]
 8003908:	2b01      	cmp	r3, #1
 800390a:	d106      	bne.n	800391a <HAL_RCC_OscConfig+0x2ea>
 800390c:	4b64      	ldr	r3, [pc, #400]	; (8003aa0 <HAL_RCC_OscConfig+0x470>)
 800390e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003910:	4a63      	ldr	r2, [pc, #396]	; (8003aa0 <HAL_RCC_OscConfig+0x470>)
 8003912:	f043 0301 	orr.w	r3, r3, #1
 8003916:	6713      	str	r3, [r2, #112]	; 0x70
 8003918:	e01c      	b.n	8003954 <HAL_RCC_OscConfig+0x324>
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	689b      	ldr	r3, [r3, #8]
 800391e:	2b05      	cmp	r3, #5
 8003920:	d10c      	bne.n	800393c <HAL_RCC_OscConfig+0x30c>
 8003922:	4b5f      	ldr	r3, [pc, #380]	; (8003aa0 <HAL_RCC_OscConfig+0x470>)
 8003924:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003926:	4a5e      	ldr	r2, [pc, #376]	; (8003aa0 <HAL_RCC_OscConfig+0x470>)
 8003928:	f043 0304 	orr.w	r3, r3, #4
 800392c:	6713      	str	r3, [r2, #112]	; 0x70
 800392e:	4b5c      	ldr	r3, [pc, #368]	; (8003aa0 <HAL_RCC_OscConfig+0x470>)
 8003930:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003932:	4a5b      	ldr	r2, [pc, #364]	; (8003aa0 <HAL_RCC_OscConfig+0x470>)
 8003934:	f043 0301 	orr.w	r3, r3, #1
 8003938:	6713      	str	r3, [r2, #112]	; 0x70
 800393a:	e00b      	b.n	8003954 <HAL_RCC_OscConfig+0x324>
 800393c:	4b58      	ldr	r3, [pc, #352]	; (8003aa0 <HAL_RCC_OscConfig+0x470>)
 800393e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003940:	4a57      	ldr	r2, [pc, #348]	; (8003aa0 <HAL_RCC_OscConfig+0x470>)
 8003942:	f023 0301 	bic.w	r3, r3, #1
 8003946:	6713      	str	r3, [r2, #112]	; 0x70
 8003948:	4b55      	ldr	r3, [pc, #340]	; (8003aa0 <HAL_RCC_OscConfig+0x470>)
 800394a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800394c:	4a54      	ldr	r2, [pc, #336]	; (8003aa0 <HAL_RCC_OscConfig+0x470>)
 800394e:	f023 0304 	bic.w	r3, r3, #4
 8003952:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	689b      	ldr	r3, [r3, #8]
 8003958:	2b00      	cmp	r3, #0
 800395a:	d015      	beq.n	8003988 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800395c:	f7fe fa74 	bl	8001e48 <HAL_GetTick>
 8003960:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003962:	e00a      	b.n	800397a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003964:	f7fe fa70 	bl	8001e48 <HAL_GetTick>
 8003968:	4602      	mov	r2, r0
 800396a:	693b      	ldr	r3, [r7, #16]
 800396c:	1ad3      	subs	r3, r2, r3
 800396e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003972:	4293      	cmp	r3, r2
 8003974:	d901      	bls.n	800397a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003976:	2303      	movs	r3, #3
 8003978:	e0cb      	b.n	8003b12 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800397a:	4b49      	ldr	r3, [pc, #292]	; (8003aa0 <HAL_RCC_OscConfig+0x470>)
 800397c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800397e:	f003 0302 	and.w	r3, r3, #2
 8003982:	2b00      	cmp	r3, #0
 8003984:	d0ee      	beq.n	8003964 <HAL_RCC_OscConfig+0x334>
 8003986:	e014      	b.n	80039b2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003988:	f7fe fa5e 	bl	8001e48 <HAL_GetTick>
 800398c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800398e:	e00a      	b.n	80039a6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003990:	f7fe fa5a 	bl	8001e48 <HAL_GetTick>
 8003994:	4602      	mov	r2, r0
 8003996:	693b      	ldr	r3, [r7, #16]
 8003998:	1ad3      	subs	r3, r2, r3
 800399a:	f241 3288 	movw	r2, #5000	; 0x1388
 800399e:	4293      	cmp	r3, r2
 80039a0:	d901      	bls.n	80039a6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80039a2:	2303      	movs	r3, #3
 80039a4:	e0b5      	b.n	8003b12 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80039a6:	4b3e      	ldr	r3, [pc, #248]	; (8003aa0 <HAL_RCC_OscConfig+0x470>)
 80039a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039aa:	f003 0302 	and.w	r3, r3, #2
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d1ee      	bne.n	8003990 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80039b2:	7dfb      	ldrb	r3, [r7, #23]
 80039b4:	2b01      	cmp	r3, #1
 80039b6:	d105      	bne.n	80039c4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80039b8:	4b39      	ldr	r3, [pc, #228]	; (8003aa0 <HAL_RCC_OscConfig+0x470>)
 80039ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039bc:	4a38      	ldr	r2, [pc, #224]	; (8003aa0 <HAL_RCC_OscConfig+0x470>)
 80039be:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80039c2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	699b      	ldr	r3, [r3, #24]
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	f000 80a1 	beq.w	8003b10 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80039ce:	4b34      	ldr	r3, [pc, #208]	; (8003aa0 <HAL_RCC_OscConfig+0x470>)
 80039d0:	689b      	ldr	r3, [r3, #8]
 80039d2:	f003 030c 	and.w	r3, r3, #12
 80039d6:	2b08      	cmp	r3, #8
 80039d8:	d05c      	beq.n	8003a94 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	699b      	ldr	r3, [r3, #24]
 80039de:	2b02      	cmp	r3, #2
 80039e0:	d141      	bne.n	8003a66 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80039e2:	4b31      	ldr	r3, [pc, #196]	; (8003aa8 <HAL_RCC_OscConfig+0x478>)
 80039e4:	2200      	movs	r2, #0
 80039e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039e8:	f7fe fa2e 	bl	8001e48 <HAL_GetTick>
 80039ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80039ee:	e008      	b.n	8003a02 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80039f0:	f7fe fa2a 	bl	8001e48 <HAL_GetTick>
 80039f4:	4602      	mov	r2, r0
 80039f6:	693b      	ldr	r3, [r7, #16]
 80039f8:	1ad3      	subs	r3, r2, r3
 80039fa:	2b02      	cmp	r3, #2
 80039fc:	d901      	bls.n	8003a02 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80039fe:	2303      	movs	r3, #3
 8003a00:	e087      	b.n	8003b12 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a02:	4b27      	ldr	r3, [pc, #156]	; (8003aa0 <HAL_RCC_OscConfig+0x470>)
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d1f0      	bne.n	80039f0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	69da      	ldr	r2, [r3, #28]
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	6a1b      	ldr	r3, [r3, #32]
 8003a16:	431a      	orrs	r2, r3
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a1c:	019b      	lsls	r3, r3, #6
 8003a1e:	431a      	orrs	r2, r3
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a24:	085b      	lsrs	r3, r3, #1
 8003a26:	3b01      	subs	r3, #1
 8003a28:	041b      	lsls	r3, r3, #16
 8003a2a:	431a      	orrs	r2, r3
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a30:	061b      	lsls	r3, r3, #24
 8003a32:	491b      	ldr	r1, [pc, #108]	; (8003aa0 <HAL_RCC_OscConfig+0x470>)
 8003a34:	4313      	orrs	r3, r2
 8003a36:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003a38:	4b1b      	ldr	r3, [pc, #108]	; (8003aa8 <HAL_RCC_OscConfig+0x478>)
 8003a3a:	2201      	movs	r2, #1
 8003a3c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a3e:	f7fe fa03 	bl	8001e48 <HAL_GetTick>
 8003a42:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a44:	e008      	b.n	8003a58 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003a46:	f7fe f9ff 	bl	8001e48 <HAL_GetTick>
 8003a4a:	4602      	mov	r2, r0
 8003a4c:	693b      	ldr	r3, [r7, #16]
 8003a4e:	1ad3      	subs	r3, r2, r3
 8003a50:	2b02      	cmp	r3, #2
 8003a52:	d901      	bls.n	8003a58 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003a54:	2303      	movs	r3, #3
 8003a56:	e05c      	b.n	8003b12 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a58:	4b11      	ldr	r3, [pc, #68]	; (8003aa0 <HAL_RCC_OscConfig+0x470>)
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d0f0      	beq.n	8003a46 <HAL_RCC_OscConfig+0x416>
 8003a64:	e054      	b.n	8003b10 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a66:	4b10      	ldr	r3, [pc, #64]	; (8003aa8 <HAL_RCC_OscConfig+0x478>)
 8003a68:	2200      	movs	r2, #0
 8003a6a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a6c:	f7fe f9ec 	bl	8001e48 <HAL_GetTick>
 8003a70:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a72:	e008      	b.n	8003a86 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003a74:	f7fe f9e8 	bl	8001e48 <HAL_GetTick>
 8003a78:	4602      	mov	r2, r0
 8003a7a:	693b      	ldr	r3, [r7, #16]
 8003a7c:	1ad3      	subs	r3, r2, r3
 8003a7e:	2b02      	cmp	r3, #2
 8003a80:	d901      	bls.n	8003a86 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003a82:	2303      	movs	r3, #3
 8003a84:	e045      	b.n	8003b12 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a86:	4b06      	ldr	r3, [pc, #24]	; (8003aa0 <HAL_RCC_OscConfig+0x470>)
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d1f0      	bne.n	8003a74 <HAL_RCC_OscConfig+0x444>
 8003a92:	e03d      	b.n	8003b10 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	699b      	ldr	r3, [r3, #24]
 8003a98:	2b01      	cmp	r3, #1
 8003a9a:	d107      	bne.n	8003aac <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003a9c:	2301      	movs	r3, #1
 8003a9e:	e038      	b.n	8003b12 <HAL_RCC_OscConfig+0x4e2>
 8003aa0:	40023800 	.word	0x40023800
 8003aa4:	40007000 	.word	0x40007000
 8003aa8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003aac:	4b1b      	ldr	r3, [pc, #108]	; (8003b1c <HAL_RCC_OscConfig+0x4ec>)
 8003aae:	685b      	ldr	r3, [r3, #4]
 8003ab0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	699b      	ldr	r3, [r3, #24]
 8003ab6:	2b01      	cmp	r3, #1
 8003ab8:	d028      	beq.n	8003b0c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003ac4:	429a      	cmp	r2, r3
 8003ac6:	d121      	bne.n	8003b0c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ad2:	429a      	cmp	r2, r3
 8003ad4:	d11a      	bne.n	8003b0c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003ad6:	68fa      	ldr	r2, [r7, #12]
 8003ad8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003adc:	4013      	ands	r3, r2
 8003ade:	687a      	ldr	r2, [r7, #4]
 8003ae0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003ae2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003ae4:	4293      	cmp	r3, r2
 8003ae6:	d111      	bne.n	8003b0c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003af2:	085b      	lsrs	r3, r3, #1
 8003af4:	3b01      	subs	r3, #1
 8003af6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003af8:	429a      	cmp	r2, r3
 8003afa:	d107      	bne.n	8003b0c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b06:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003b08:	429a      	cmp	r2, r3
 8003b0a:	d001      	beq.n	8003b10 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003b0c:	2301      	movs	r3, #1
 8003b0e:	e000      	b.n	8003b12 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003b10:	2300      	movs	r3, #0
}
 8003b12:	4618      	mov	r0, r3
 8003b14:	3718      	adds	r7, #24
 8003b16:	46bd      	mov	sp, r7
 8003b18:	bd80      	pop	{r7, pc}
 8003b1a:	bf00      	nop
 8003b1c:	40023800 	.word	0x40023800

08003b20 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003b20:	b580      	push	{r7, lr}
 8003b22:	b084      	sub	sp, #16
 8003b24:	af00      	add	r7, sp, #0
 8003b26:	6078      	str	r0, [r7, #4]
 8003b28:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d101      	bne.n	8003b34 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003b30:	2301      	movs	r3, #1
 8003b32:	e0cc      	b.n	8003cce <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003b34:	4b68      	ldr	r3, [pc, #416]	; (8003cd8 <HAL_RCC_ClockConfig+0x1b8>)
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	f003 0307 	and.w	r3, r3, #7
 8003b3c:	683a      	ldr	r2, [r7, #0]
 8003b3e:	429a      	cmp	r2, r3
 8003b40:	d90c      	bls.n	8003b5c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b42:	4b65      	ldr	r3, [pc, #404]	; (8003cd8 <HAL_RCC_ClockConfig+0x1b8>)
 8003b44:	683a      	ldr	r2, [r7, #0]
 8003b46:	b2d2      	uxtb	r2, r2
 8003b48:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b4a:	4b63      	ldr	r3, [pc, #396]	; (8003cd8 <HAL_RCC_ClockConfig+0x1b8>)
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	f003 0307 	and.w	r3, r3, #7
 8003b52:	683a      	ldr	r2, [r7, #0]
 8003b54:	429a      	cmp	r2, r3
 8003b56:	d001      	beq.n	8003b5c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003b58:	2301      	movs	r3, #1
 8003b5a:	e0b8      	b.n	8003cce <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	f003 0302 	and.w	r3, r3, #2
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d020      	beq.n	8003baa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	f003 0304 	and.w	r3, r3, #4
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d005      	beq.n	8003b80 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003b74:	4b59      	ldr	r3, [pc, #356]	; (8003cdc <HAL_RCC_ClockConfig+0x1bc>)
 8003b76:	689b      	ldr	r3, [r3, #8]
 8003b78:	4a58      	ldr	r2, [pc, #352]	; (8003cdc <HAL_RCC_ClockConfig+0x1bc>)
 8003b7a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003b7e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	f003 0308 	and.w	r3, r3, #8
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d005      	beq.n	8003b98 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003b8c:	4b53      	ldr	r3, [pc, #332]	; (8003cdc <HAL_RCC_ClockConfig+0x1bc>)
 8003b8e:	689b      	ldr	r3, [r3, #8]
 8003b90:	4a52      	ldr	r2, [pc, #328]	; (8003cdc <HAL_RCC_ClockConfig+0x1bc>)
 8003b92:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003b96:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003b98:	4b50      	ldr	r3, [pc, #320]	; (8003cdc <HAL_RCC_ClockConfig+0x1bc>)
 8003b9a:	689b      	ldr	r3, [r3, #8]
 8003b9c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	689b      	ldr	r3, [r3, #8]
 8003ba4:	494d      	ldr	r1, [pc, #308]	; (8003cdc <HAL_RCC_ClockConfig+0x1bc>)
 8003ba6:	4313      	orrs	r3, r2
 8003ba8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	f003 0301 	and.w	r3, r3, #1
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d044      	beq.n	8003c40 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	685b      	ldr	r3, [r3, #4]
 8003bba:	2b01      	cmp	r3, #1
 8003bbc:	d107      	bne.n	8003bce <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003bbe:	4b47      	ldr	r3, [pc, #284]	; (8003cdc <HAL_RCC_ClockConfig+0x1bc>)
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d119      	bne.n	8003bfe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003bca:	2301      	movs	r3, #1
 8003bcc:	e07f      	b.n	8003cce <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	685b      	ldr	r3, [r3, #4]
 8003bd2:	2b02      	cmp	r3, #2
 8003bd4:	d003      	beq.n	8003bde <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003bda:	2b03      	cmp	r3, #3
 8003bdc:	d107      	bne.n	8003bee <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003bde:	4b3f      	ldr	r3, [pc, #252]	; (8003cdc <HAL_RCC_ClockConfig+0x1bc>)
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d109      	bne.n	8003bfe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003bea:	2301      	movs	r3, #1
 8003bec:	e06f      	b.n	8003cce <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003bee:	4b3b      	ldr	r3, [pc, #236]	; (8003cdc <HAL_RCC_ClockConfig+0x1bc>)
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	f003 0302 	and.w	r3, r3, #2
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d101      	bne.n	8003bfe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003bfa:	2301      	movs	r3, #1
 8003bfc:	e067      	b.n	8003cce <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003bfe:	4b37      	ldr	r3, [pc, #220]	; (8003cdc <HAL_RCC_ClockConfig+0x1bc>)
 8003c00:	689b      	ldr	r3, [r3, #8]
 8003c02:	f023 0203 	bic.w	r2, r3, #3
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	685b      	ldr	r3, [r3, #4]
 8003c0a:	4934      	ldr	r1, [pc, #208]	; (8003cdc <HAL_RCC_ClockConfig+0x1bc>)
 8003c0c:	4313      	orrs	r3, r2
 8003c0e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003c10:	f7fe f91a 	bl	8001e48 <HAL_GetTick>
 8003c14:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c16:	e00a      	b.n	8003c2e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003c18:	f7fe f916 	bl	8001e48 <HAL_GetTick>
 8003c1c:	4602      	mov	r2, r0
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	1ad3      	subs	r3, r2, r3
 8003c22:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c26:	4293      	cmp	r3, r2
 8003c28:	d901      	bls.n	8003c2e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003c2a:	2303      	movs	r3, #3
 8003c2c:	e04f      	b.n	8003cce <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c2e:	4b2b      	ldr	r3, [pc, #172]	; (8003cdc <HAL_RCC_ClockConfig+0x1bc>)
 8003c30:	689b      	ldr	r3, [r3, #8]
 8003c32:	f003 020c 	and.w	r2, r3, #12
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	685b      	ldr	r3, [r3, #4]
 8003c3a:	009b      	lsls	r3, r3, #2
 8003c3c:	429a      	cmp	r2, r3
 8003c3e:	d1eb      	bne.n	8003c18 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003c40:	4b25      	ldr	r3, [pc, #148]	; (8003cd8 <HAL_RCC_ClockConfig+0x1b8>)
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	f003 0307 	and.w	r3, r3, #7
 8003c48:	683a      	ldr	r2, [r7, #0]
 8003c4a:	429a      	cmp	r2, r3
 8003c4c:	d20c      	bcs.n	8003c68 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c4e:	4b22      	ldr	r3, [pc, #136]	; (8003cd8 <HAL_RCC_ClockConfig+0x1b8>)
 8003c50:	683a      	ldr	r2, [r7, #0]
 8003c52:	b2d2      	uxtb	r2, r2
 8003c54:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c56:	4b20      	ldr	r3, [pc, #128]	; (8003cd8 <HAL_RCC_ClockConfig+0x1b8>)
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	f003 0307 	and.w	r3, r3, #7
 8003c5e:	683a      	ldr	r2, [r7, #0]
 8003c60:	429a      	cmp	r2, r3
 8003c62:	d001      	beq.n	8003c68 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003c64:	2301      	movs	r3, #1
 8003c66:	e032      	b.n	8003cce <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	f003 0304 	and.w	r3, r3, #4
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d008      	beq.n	8003c86 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003c74:	4b19      	ldr	r3, [pc, #100]	; (8003cdc <HAL_RCC_ClockConfig+0x1bc>)
 8003c76:	689b      	ldr	r3, [r3, #8]
 8003c78:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	68db      	ldr	r3, [r3, #12]
 8003c80:	4916      	ldr	r1, [pc, #88]	; (8003cdc <HAL_RCC_ClockConfig+0x1bc>)
 8003c82:	4313      	orrs	r3, r2
 8003c84:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	f003 0308 	and.w	r3, r3, #8
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d009      	beq.n	8003ca6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003c92:	4b12      	ldr	r3, [pc, #72]	; (8003cdc <HAL_RCC_ClockConfig+0x1bc>)
 8003c94:	689b      	ldr	r3, [r3, #8]
 8003c96:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	691b      	ldr	r3, [r3, #16]
 8003c9e:	00db      	lsls	r3, r3, #3
 8003ca0:	490e      	ldr	r1, [pc, #56]	; (8003cdc <HAL_RCC_ClockConfig+0x1bc>)
 8003ca2:	4313      	orrs	r3, r2
 8003ca4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003ca6:	f000 f821 	bl	8003cec <HAL_RCC_GetSysClockFreq>
 8003caa:	4602      	mov	r2, r0
 8003cac:	4b0b      	ldr	r3, [pc, #44]	; (8003cdc <HAL_RCC_ClockConfig+0x1bc>)
 8003cae:	689b      	ldr	r3, [r3, #8]
 8003cb0:	091b      	lsrs	r3, r3, #4
 8003cb2:	f003 030f 	and.w	r3, r3, #15
 8003cb6:	490a      	ldr	r1, [pc, #40]	; (8003ce0 <HAL_RCC_ClockConfig+0x1c0>)
 8003cb8:	5ccb      	ldrb	r3, [r1, r3]
 8003cba:	fa22 f303 	lsr.w	r3, r2, r3
 8003cbe:	4a09      	ldr	r2, [pc, #36]	; (8003ce4 <HAL_RCC_ClockConfig+0x1c4>)
 8003cc0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003cc2:	4b09      	ldr	r3, [pc, #36]	; (8003ce8 <HAL_RCC_ClockConfig+0x1c8>)
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	4618      	mov	r0, r3
 8003cc8:	f7fe f87a 	bl	8001dc0 <HAL_InitTick>

  return HAL_OK;
 8003ccc:	2300      	movs	r3, #0
}
 8003cce:	4618      	mov	r0, r3
 8003cd0:	3710      	adds	r7, #16
 8003cd2:	46bd      	mov	sp, r7
 8003cd4:	bd80      	pop	{r7, pc}
 8003cd6:	bf00      	nop
 8003cd8:	40023c00 	.word	0x40023c00
 8003cdc:	40023800 	.word	0x40023800
 8003ce0:	08005510 	.word	0x08005510
 8003ce4:	20000090 	.word	0x20000090
 8003ce8:	20000094 	.word	0x20000094

08003cec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003cec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003cf0:	b094      	sub	sp, #80	; 0x50
 8003cf2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003cf4:	2300      	movs	r3, #0
 8003cf6:	647b      	str	r3, [r7, #68]	; 0x44
 8003cf8:	2300      	movs	r3, #0
 8003cfa:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003cfc:	2300      	movs	r3, #0
 8003cfe:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8003d00:	2300      	movs	r3, #0
 8003d02:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003d04:	4b79      	ldr	r3, [pc, #484]	; (8003eec <HAL_RCC_GetSysClockFreq+0x200>)
 8003d06:	689b      	ldr	r3, [r3, #8]
 8003d08:	f003 030c 	and.w	r3, r3, #12
 8003d0c:	2b08      	cmp	r3, #8
 8003d0e:	d00d      	beq.n	8003d2c <HAL_RCC_GetSysClockFreq+0x40>
 8003d10:	2b08      	cmp	r3, #8
 8003d12:	f200 80e1 	bhi.w	8003ed8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d002      	beq.n	8003d20 <HAL_RCC_GetSysClockFreq+0x34>
 8003d1a:	2b04      	cmp	r3, #4
 8003d1c:	d003      	beq.n	8003d26 <HAL_RCC_GetSysClockFreq+0x3a>
 8003d1e:	e0db      	b.n	8003ed8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003d20:	4b73      	ldr	r3, [pc, #460]	; (8003ef0 <HAL_RCC_GetSysClockFreq+0x204>)
 8003d22:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8003d24:	e0db      	b.n	8003ede <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003d26:	4b73      	ldr	r3, [pc, #460]	; (8003ef4 <HAL_RCC_GetSysClockFreq+0x208>)
 8003d28:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003d2a:	e0d8      	b.n	8003ede <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003d2c:	4b6f      	ldr	r3, [pc, #444]	; (8003eec <HAL_RCC_GetSysClockFreq+0x200>)
 8003d2e:	685b      	ldr	r3, [r3, #4]
 8003d30:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003d34:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003d36:	4b6d      	ldr	r3, [pc, #436]	; (8003eec <HAL_RCC_GetSysClockFreq+0x200>)
 8003d38:	685b      	ldr	r3, [r3, #4]
 8003d3a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d063      	beq.n	8003e0a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003d42:	4b6a      	ldr	r3, [pc, #424]	; (8003eec <HAL_RCC_GetSysClockFreq+0x200>)
 8003d44:	685b      	ldr	r3, [r3, #4]
 8003d46:	099b      	lsrs	r3, r3, #6
 8003d48:	2200      	movs	r2, #0
 8003d4a:	63bb      	str	r3, [r7, #56]	; 0x38
 8003d4c:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003d4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d50:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003d54:	633b      	str	r3, [r7, #48]	; 0x30
 8003d56:	2300      	movs	r3, #0
 8003d58:	637b      	str	r3, [r7, #52]	; 0x34
 8003d5a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003d5e:	4622      	mov	r2, r4
 8003d60:	462b      	mov	r3, r5
 8003d62:	f04f 0000 	mov.w	r0, #0
 8003d66:	f04f 0100 	mov.w	r1, #0
 8003d6a:	0159      	lsls	r1, r3, #5
 8003d6c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003d70:	0150      	lsls	r0, r2, #5
 8003d72:	4602      	mov	r2, r0
 8003d74:	460b      	mov	r3, r1
 8003d76:	4621      	mov	r1, r4
 8003d78:	1a51      	subs	r1, r2, r1
 8003d7a:	6139      	str	r1, [r7, #16]
 8003d7c:	4629      	mov	r1, r5
 8003d7e:	eb63 0301 	sbc.w	r3, r3, r1
 8003d82:	617b      	str	r3, [r7, #20]
 8003d84:	f04f 0200 	mov.w	r2, #0
 8003d88:	f04f 0300 	mov.w	r3, #0
 8003d8c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003d90:	4659      	mov	r1, fp
 8003d92:	018b      	lsls	r3, r1, #6
 8003d94:	4651      	mov	r1, sl
 8003d96:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003d9a:	4651      	mov	r1, sl
 8003d9c:	018a      	lsls	r2, r1, #6
 8003d9e:	4651      	mov	r1, sl
 8003da0:	ebb2 0801 	subs.w	r8, r2, r1
 8003da4:	4659      	mov	r1, fp
 8003da6:	eb63 0901 	sbc.w	r9, r3, r1
 8003daa:	f04f 0200 	mov.w	r2, #0
 8003dae:	f04f 0300 	mov.w	r3, #0
 8003db2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003db6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003dba:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003dbe:	4690      	mov	r8, r2
 8003dc0:	4699      	mov	r9, r3
 8003dc2:	4623      	mov	r3, r4
 8003dc4:	eb18 0303 	adds.w	r3, r8, r3
 8003dc8:	60bb      	str	r3, [r7, #8]
 8003dca:	462b      	mov	r3, r5
 8003dcc:	eb49 0303 	adc.w	r3, r9, r3
 8003dd0:	60fb      	str	r3, [r7, #12]
 8003dd2:	f04f 0200 	mov.w	r2, #0
 8003dd6:	f04f 0300 	mov.w	r3, #0
 8003dda:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003dde:	4629      	mov	r1, r5
 8003de0:	024b      	lsls	r3, r1, #9
 8003de2:	4621      	mov	r1, r4
 8003de4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003de8:	4621      	mov	r1, r4
 8003dea:	024a      	lsls	r2, r1, #9
 8003dec:	4610      	mov	r0, r2
 8003dee:	4619      	mov	r1, r3
 8003df0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003df2:	2200      	movs	r2, #0
 8003df4:	62bb      	str	r3, [r7, #40]	; 0x28
 8003df6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003df8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003dfc:	f7fc feac 	bl	8000b58 <__aeabi_uldivmod>
 8003e00:	4602      	mov	r2, r0
 8003e02:	460b      	mov	r3, r1
 8003e04:	4613      	mov	r3, r2
 8003e06:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003e08:	e058      	b.n	8003ebc <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003e0a:	4b38      	ldr	r3, [pc, #224]	; (8003eec <HAL_RCC_GetSysClockFreq+0x200>)
 8003e0c:	685b      	ldr	r3, [r3, #4]
 8003e0e:	099b      	lsrs	r3, r3, #6
 8003e10:	2200      	movs	r2, #0
 8003e12:	4618      	mov	r0, r3
 8003e14:	4611      	mov	r1, r2
 8003e16:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003e1a:	623b      	str	r3, [r7, #32]
 8003e1c:	2300      	movs	r3, #0
 8003e1e:	627b      	str	r3, [r7, #36]	; 0x24
 8003e20:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003e24:	4642      	mov	r2, r8
 8003e26:	464b      	mov	r3, r9
 8003e28:	f04f 0000 	mov.w	r0, #0
 8003e2c:	f04f 0100 	mov.w	r1, #0
 8003e30:	0159      	lsls	r1, r3, #5
 8003e32:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003e36:	0150      	lsls	r0, r2, #5
 8003e38:	4602      	mov	r2, r0
 8003e3a:	460b      	mov	r3, r1
 8003e3c:	4641      	mov	r1, r8
 8003e3e:	ebb2 0a01 	subs.w	sl, r2, r1
 8003e42:	4649      	mov	r1, r9
 8003e44:	eb63 0b01 	sbc.w	fp, r3, r1
 8003e48:	f04f 0200 	mov.w	r2, #0
 8003e4c:	f04f 0300 	mov.w	r3, #0
 8003e50:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003e54:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003e58:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003e5c:	ebb2 040a 	subs.w	r4, r2, sl
 8003e60:	eb63 050b 	sbc.w	r5, r3, fp
 8003e64:	f04f 0200 	mov.w	r2, #0
 8003e68:	f04f 0300 	mov.w	r3, #0
 8003e6c:	00eb      	lsls	r3, r5, #3
 8003e6e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003e72:	00e2      	lsls	r2, r4, #3
 8003e74:	4614      	mov	r4, r2
 8003e76:	461d      	mov	r5, r3
 8003e78:	4643      	mov	r3, r8
 8003e7a:	18e3      	adds	r3, r4, r3
 8003e7c:	603b      	str	r3, [r7, #0]
 8003e7e:	464b      	mov	r3, r9
 8003e80:	eb45 0303 	adc.w	r3, r5, r3
 8003e84:	607b      	str	r3, [r7, #4]
 8003e86:	f04f 0200 	mov.w	r2, #0
 8003e8a:	f04f 0300 	mov.w	r3, #0
 8003e8e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003e92:	4629      	mov	r1, r5
 8003e94:	028b      	lsls	r3, r1, #10
 8003e96:	4621      	mov	r1, r4
 8003e98:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003e9c:	4621      	mov	r1, r4
 8003e9e:	028a      	lsls	r2, r1, #10
 8003ea0:	4610      	mov	r0, r2
 8003ea2:	4619      	mov	r1, r3
 8003ea4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003ea6:	2200      	movs	r2, #0
 8003ea8:	61bb      	str	r3, [r7, #24]
 8003eaa:	61fa      	str	r2, [r7, #28]
 8003eac:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003eb0:	f7fc fe52 	bl	8000b58 <__aeabi_uldivmod>
 8003eb4:	4602      	mov	r2, r0
 8003eb6:	460b      	mov	r3, r1
 8003eb8:	4613      	mov	r3, r2
 8003eba:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003ebc:	4b0b      	ldr	r3, [pc, #44]	; (8003eec <HAL_RCC_GetSysClockFreq+0x200>)
 8003ebe:	685b      	ldr	r3, [r3, #4]
 8003ec0:	0c1b      	lsrs	r3, r3, #16
 8003ec2:	f003 0303 	and.w	r3, r3, #3
 8003ec6:	3301      	adds	r3, #1
 8003ec8:	005b      	lsls	r3, r3, #1
 8003eca:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8003ecc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003ece:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003ed0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ed4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003ed6:	e002      	b.n	8003ede <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003ed8:	4b05      	ldr	r3, [pc, #20]	; (8003ef0 <HAL_RCC_GetSysClockFreq+0x204>)
 8003eda:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003edc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003ede:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003ee0:	4618      	mov	r0, r3
 8003ee2:	3750      	adds	r7, #80	; 0x50
 8003ee4:	46bd      	mov	sp, r7
 8003ee6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003eea:	bf00      	nop
 8003eec:	40023800 	.word	0x40023800
 8003ef0:	00f42400 	.word	0x00f42400
 8003ef4:	007a1200 	.word	0x007a1200

08003ef8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003ef8:	b480      	push	{r7}
 8003efa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003efc:	4b03      	ldr	r3, [pc, #12]	; (8003f0c <HAL_RCC_GetHCLKFreq+0x14>)
 8003efe:	681b      	ldr	r3, [r3, #0]
}
 8003f00:	4618      	mov	r0, r3
 8003f02:	46bd      	mov	sp, r7
 8003f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f08:	4770      	bx	lr
 8003f0a:	bf00      	nop
 8003f0c:	20000090 	.word	0x20000090

08003f10 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003f10:	b580      	push	{r7, lr}
 8003f12:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003f14:	f7ff fff0 	bl	8003ef8 <HAL_RCC_GetHCLKFreq>
 8003f18:	4602      	mov	r2, r0
 8003f1a:	4b05      	ldr	r3, [pc, #20]	; (8003f30 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003f1c:	689b      	ldr	r3, [r3, #8]
 8003f1e:	0a9b      	lsrs	r3, r3, #10
 8003f20:	f003 0307 	and.w	r3, r3, #7
 8003f24:	4903      	ldr	r1, [pc, #12]	; (8003f34 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003f26:	5ccb      	ldrb	r3, [r1, r3]
 8003f28:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003f2c:	4618      	mov	r0, r3
 8003f2e:	bd80      	pop	{r7, pc}
 8003f30:	40023800 	.word	0x40023800
 8003f34:	08005520 	.word	0x08005520

08003f38 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003f38:	b580      	push	{r7, lr}
 8003f3a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003f3c:	f7ff ffdc 	bl	8003ef8 <HAL_RCC_GetHCLKFreq>
 8003f40:	4602      	mov	r2, r0
 8003f42:	4b05      	ldr	r3, [pc, #20]	; (8003f58 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003f44:	689b      	ldr	r3, [r3, #8]
 8003f46:	0b5b      	lsrs	r3, r3, #13
 8003f48:	f003 0307 	and.w	r3, r3, #7
 8003f4c:	4903      	ldr	r1, [pc, #12]	; (8003f5c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003f4e:	5ccb      	ldrb	r3, [r1, r3]
 8003f50:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003f54:	4618      	mov	r0, r3
 8003f56:	bd80      	pop	{r7, pc}
 8003f58:	40023800 	.word	0x40023800
 8003f5c:	08005520 	.word	0x08005520

08003f60 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003f60:	b580      	push	{r7, lr}
 8003f62:	b082      	sub	sp, #8
 8003f64:	af00      	add	r7, sp, #0
 8003f66:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d101      	bne.n	8003f72 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003f6e:	2301      	movs	r3, #1
 8003f70:	e03f      	b.n	8003ff2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f78:	b2db      	uxtb	r3, r3
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d106      	bne.n	8003f8c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	2200      	movs	r2, #0
 8003f82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003f86:	6878      	ldr	r0, [r7, #4]
 8003f88:	f7fd fe14 	bl	8001bb4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	2224      	movs	r2, #36	; 0x24
 8003f90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	68da      	ldr	r2, [r3, #12]
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003fa2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003fa4:	6878      	ldr	r0, [r7, #4]
 8003fa6:	f000 f829 	bl	8003ffc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	691a      	ldr	r2, [r3, #16]
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003fb8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	695a      	ldr	r2, [r3, #20]
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003fc8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	68da      	ldr	r2, [r3, #12]
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003fd8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	2200      	movs	r2, #0
 8003fde:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	2220      	movs	r2, #32
 8003fe4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	2220      	movs	r2, #32
 8003fec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003ff0:	2300      	movs	r3, #0
}
 8003ff2:	4618      	mov	r0, r3
 8003ff4:	3708      	adds	r7, #8
 8003ff6:	46bd      	mov	sp, r7
 8003ff8:	bd80      	pop	{r7, pc}
	...

08003ffc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003ffc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004000:	b0c0      	sub	sp, #256	; 0x100
 8004002:	af00      	add	r7, sp, #0
 8004004:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004008:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	691b      	ldr	r3, [r3, #16]
 8004010:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004014:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004018:	68d9      	ldr	r1, [r3, #12]
 800401a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800401e:	681a      	ldr	r2, [r3, #0]
 8004020:	ea40 0301 	orr.w	r3, r0, r1
 8004024:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004026:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800402a:	689a      	ldr	r2, [r3, #8]
 800402c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004030:	691b      	ldr	r3, [r3, #16]
 8004032:	431a      	orrs	r2, r3
 8004034:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004038:	695b      	ldr	r3, [r3, #20]
 800403a:	431a      	orrs	r2, r3
 800403c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004040:	69db      	ldr	r3, [r3, #28]
 8004042:	4313      	orrs	r3, r2
 8004044:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004048:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	68db      	ldr	r3, [r3, #12]
 8004050:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004054:	f021 010c 	bic.w	r1, r1, #12
 8004058:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800405c:	681a      	ldr	r2, [r3, #0]
 800405e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004062:	430b      	orrs	r3, r1
 8004064:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004066:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	695b      	ldr	r3, [r3, #20]
 800406e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004072:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004076:	6999      	ldr	r1, [r3, #24]
 8004078:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800407c:	681a      	ldr	r2, [r3, #0]
 800407e:	ea40 0301 	orr.w	r3, r0, r1
 8004082:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004084:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004088:	681a      	ldr	r2, [r3, #0]
 800408a:	4b8f      	ldr	r3, [pc, #572]	; (80042c8 <UART_SetConfig+0x2cc>)
 800408c:	429a      	cmp	r2, r3
 800408e:	d005      	beq.n	800409c <UART_SetConfig+0xa0>
 8004090:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004094:	681a      	ldr	r2, [r3, #0]
 8004096:	4b8d      	ldr	r3, [pc, #564]	; (80042cc <UART_SetConfig+0x2d0>)
 8004098:	429a      	cmp	r2, r3
 800409a:	d104      	bne.n	80040a6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800409c:	f7ff ff4c 	bl	8003f38 <HAL_RCC_GetPCLK2Freq>
 80040a0:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80040a4:	e003      	b.n	80040ae <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80040a6:	f7ff ff33 	bl	8003f10 <HAL_RCC_GetPCLK1Freq>
 80040aa:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80040ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80040b2:	69db      	ldr	r3, [r3, #28]
 80040b4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80040b8:	f040 810c 	bne.w	80042d4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80040bc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80040c0:	2200      	movs	r2, #0
 80040c2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80040c6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80040ca:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80040ce:	4622      	mov	r2, r4
 80040d0:	462b      	mov	r3, r5
 80040d2:	1891      	adds	r1, r2, r2
 80040d4:	65b9      	str	r1, [r7, #88]	; 0x58
 80040d6:	415b      	adcs	r3, r3
 80040d8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80040da:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80040de:	4621      	mov	r1, r4
 80040e0:	eb12 0801 	adds.w	r8, r2, r1
 80040e4:	4629      	mov	r1, r5
 80040e6:	eb43 0901 	adc.w	r9, r3, r1
 80040ea:	f04f 0200 	mov.w	r2, #0
 80040ee:	f04f 0300 	mov.w	r3, #0
 80040f2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80040f6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80040fa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80040fe:	4690      	mov	r8, r2
 8004100:	4699      	mov	r9, r3
 8004102:	4623      	mov	r3, r4
 8004104:	eb18 0303 	adds.w	r3, r8, r3
 8004108:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800410c:	462b      	mov	r3, r5
 800410e:	eb49 0303 	adc.w	r3, r9, r3
 8004112:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004116:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800411a:	685b      	ldr	r3, [r3, #4]
 800411c:	2200      	movs	r2, #0
 800411e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004122:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004126:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800412a:	460b      	mov	r3, r1
 800412c:	18db      	adds	r3, r3, r3
 800412e:	653b      	str	r3, [r7, #80]	; 0x50
 8004130:	4613      	mov	r3, r2
 8004132:	eb42 0303 	adc.w	r3, r2, r3
 8004136:	657b      	str	r3, [r7, #84]	; 0x54
 8004138:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800413c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004140:	f7fc fd0a 	bl	8000b58 <__aeabi_uldivmod>
 8004144:	4602      	mov	r2, r0
 8004146:	460b      	mov	r3, r1
 8004148:	4b61      	ldr	r3, [pc, #388]	; (80042d0 <UART_SetConfig+0x2d4>)
 800414a:	fba3 2302 	umull	r2, r3, r3, r2
 800414e:	095b      	lsrs	r3, r3, #5
 8004150:	011c      	lsls	r4, r3, #4
 8004152:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004156:	2200      	movs	r2, #0
 8004158:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800415c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004160:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004164:	4642      	mov	r2, r8
 8004166:	464b      	mov	r3, r9
 8004168:	1891      	adds	r1, r2, r2
 800416a:	64b9      	str	r1, [r7, #72]	; 0x48
 800416c:	415b      	adcs	r3, r3
 800416e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004170:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004174:	4641      	mov	r1, r8
 8004176:	eb12 0a01 	adds.w	sl, r2, r1
 800417a:	4649      	mov	r1, r9
 800417c:	eb43 0b01 	adc.w	fp, r3, r1
 8004180:	f04f 0200 	mov.w	r2, #0
 8004184:	f04f 0300 	mov.w	r3, #0
 8004188:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800418c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004190:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004194:	4692      	mov	sl, r2
 8004196:	469b      	mov	fp, r3
 8004198:	4643      	mov	r3, r8
 800419a:	eb1a 0303 	adds.w	r3, sl, r3
 800419e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80041a2:	464b      	mov	r3, r9
 80041a4:	eb4b 0303 	adc.w	r3, fp, r3
 80041a8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80041ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80041b0:	685b      	ldr	r3, [r3, #4]
 80041b2:	2200      	movs	r2, #0
 80041b4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80041b8:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80041bc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80041c0:	460b      	mov	r3, r1
 80041c2:	18db      	adds	r3, r3, r3
 80041c4:	643b      	str	r3, [r7, #64]	; 0x40
 80041c6:	4613      	mov	r3, r2
 80041c8:	eb42 0303 	adc.w	r3, r2, r3
 80041cc:	647b      	str	r3, [r7, #68]	; 0x44
 80041ce:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80041d2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80041d6:	f7fc fcbf 	bl	8000b58 <__aeabi_uldivmod>
 80041da:	4602      	mov	r2, r0
 80041dc:	460b      	mov	r3, r1
 80041de:	4611      	mov	r1, r2
 80041e0:	4b3b      	ldr	r3, [pc, #236]	; (80042d0 <UART_SetConfig+0x2d4>)
 80041e2:	fba3 2301 	umull	r2, r3, r3, r1
 80041e6:	095b      	lsrs	r3, r3, #5
 80041e8:	2264      	movs	r2, #100	; 0x64
 80041ea:	fb02 f303 	mul.w	r3, r2, r3
 80041ee:	1acb      	subs	r3, r1, r3
 80041f0:	00db      	lsls	r3, r3, #3
 80041f2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80041f6:	4b36      	ldr	r3, [pc, #216]	; (80042d0 <UART_SetConfig+0x2d4>)
 80041f8:	fba3 2302 	umull	r2, r3, r3, r2
 80041fc:	095b      	lsrs	r3, r3, #5
 80041fe:	005b      	lsls	r3, r3, #1
 8004200:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004204:	441c      	add	r4, r3
 8004206:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800420a:	2200      	movs	r2, #0
 800420c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004210:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004214:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004218:	4642      	mov	r2, r8
 800421a:	464b      	mov	r3, r9
 800421c:	1891      	adds	r1, r2, r2
 800421e:	63b9      	str	r1, [r7, #56]	; 0x38
 8004220:	415b      	adcs	r3, r3
 8004222:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004224:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004228:	4641      	mov	r1, r8
 800422a:	1851      	adds	r1, r2, r1
 800422c:	6339      	str	r1, [r7, #48]	; 0x30
 800422e:	4649      	mov	r1, r9
 8004230:	414b      	adcs	r3, r1
 8004232:	637b      	str	r3, [r7, #52]	; 0x34
 8004234:	f04f 0200 	mov.w	r2, #0
 8004238:	f04f 0300 	mov.w	r3, #0
 800423c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004240:	4659      	mov	r1, fp
 8004242:	00cb      	lsls	r3, r1, #3
 8004244:	4651      	mov	r1, sl
 8004246:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800424a:	4651      	mov	r1, sl
 800424c:	00ca      	lsls	r2, r1, #3
 800424e:	4610      	mov	r0, r2
 8004250:	4619      	mov	r1, r3
 8004252:	4603      	mov	r3, r0
 8004254:	4642      	mov	r2, r8
 8004256:	189b      	adds	r3, r3, r2
 8004258:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800425c:	464b      	mov	r3, r9
 800425e:	460a      	mov	r2, r1
 8004260:	eb42 0303 	adc.w	r3, r2, r3
 8004264:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004268:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800426c:	685b      	ldr	r3, [r3, #4]
 800426e:	2200      	movs	r2, #0
 8004270:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004274:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004278:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800427c:	460b      	mov	r3, r1
 800427e:	18db      	adds	r3, r3, r3
 8004280:	62bb      	str	r3, [r7, #40]	; 0x28
 8004282:	4613      	mov	r3, r2
 8004284:	eb42 0303 	adc.w	r3, r2, r3
 8004288:	62fb      	str	r3, [r7, #44]	; 0x2c
 800428a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800428e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004292:	f7fc fc61 	bl	8000b58 <__aeabi_uldivmod>
 8004296:	4602      	mov	r2, r0
 8004298:	460b      	mov	r3, r1
 800429a:	4b0d      	ldr	r3, [pc, #52]	; (80042d0 <UART_SetConfig+0x2d4>)
 800429c:	fba3 1302 	umull	r1, r3, r3, r2
 80042a0:	095b      	lsrs	r3, r3, #5
 80042a2:	2164      	movs	r1, #100	; 0x64
 80042a4:	fb01 f303 	mul.w	r3, r1, r3
 80042a8:	1ad3      	subs	r3, r2, r3
 80042aa:	00db      	lsls	r3, r3, #3
 80042ac:	3332      	adds	r3, #50	; 0x32
 80042ae:	4a08      	ldr	r2, [pc, #32]	; (80042d0 <UART_SetConfig+0x2d4>)
 80042b0:	fba2 2303 	umull	r2, r3, r2, r3
 80042b4:	095b      	lsrs	r3, r3, #5
 80042b6:	f003 0207 	and.w	r2, r3, #7
 80042ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	4422      	add	r2, r4
 80042c2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80042c4:	e105      	b.n	80044d2 <UART_SetConfig+0x4d6>
 80042c6:	bf00      	nop
 80042c8:	40011000 	.word	0x40011000
 80042cc:	40011400 	.word	0x40011400
 80042d0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80042d4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80042d8:	2200      	movs	r2, #0
 80042da:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80042de:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80042e2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80042e6:	4642      	mov	r2, r8
 80042e8:	464b      	mov	r3, r9
 80042ea:	1891      	adds	r1, r2, r2
 80042ec:	6239      	str	r1, [r7, #32]
 80042ee:	415b      	adcs	r3, r3
 80042f0:	627b      	str	r3, [r7, #36]	; 0x24
 80042f2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80042f6:	4641      	mov	r1, r8
 80042f8:	1854      	adds	r4, r2, r1
 80042fa:	4649      	mov	r1, r9
 80042fc:	eb43 0501 	adc.w	r5, r3, r1
 8004300:	f04f 0200 	mov.w	r2, #0
 8004304:	f04f 0300 	mov.w	r3, #0
 8004308:	00eb      	lsls	r3, r5, #3
 800430a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800430e:	00e2      	lsls	r2, r4, #3
 8004310:	4614      	mov	r4, r2
 8004312:	461d      	mov	r5, r3
 8004314:	4643      	mov	r3, r8
 8004316:	18e3      	adds	r3, r4, r3
 8004318:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800431c:	464b      	mov	r3, r9
 800431e:	eb45 0303 	adc.w	r3, r5, r3
 8004322:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004326:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800432a:	685b      	ldr	r3, [r3, #4]
 800432c:	2200      	movs	r2, #0
 800432e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004332:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004336:	f04f 0200 	mov.w	r2, #0
 800433a:	f04f 0300 	mov.w	r3, #0
 800433e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004342:	4629      	mov	r1, r5
 8004344:	008b      	lsls	r3, r1, #2
 8004346:	4621      	mov	r1, r4
 8004348:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800434c:	4621      	mov	r1, r4
 800434e:	008a      	lsls	r2, r1, #2
 8004350:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004354:	f7fc fc00 	bl	8000b58 <__aeabi_uldivmod>
 8004358:	4602      	mov	r2, r0
 800435a:	460b      	mov	r3, r1
 800435c:	4b60      	ldr	r3, [pc, #384]	; (80044e0 <UART_SetConfig+0x4e4>)
 800435e:	fba3 2302 	umull	r2, r3, r3, r2
 8004362:	095b      	lsrs	r3, r3, #5
 8004364:	011c      	lsls	r4, r3, #4
 8004366:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800436a:	2200      	movs	r2, #0
 800436c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004370:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004374:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004378:	4642      	mov	r2, r8
 800437a:	464b      	mov	r3, r9
 800437c:	1891      	adds	r1, r2, r2
 800437e:	61b9      	str	r1, [r7, #24]
 8004380:	415b      	adcs	r3, r3
 8004382:	61fb      	str	r3, [r7, #28]
 8004384:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004388:	4641      	mov	r1, r8
 800438a:	1851      	adds	r1, r2, r1
 800438c:	6139      	str	r1, [r7, #16]
 800438e:	4649      	mov	r1, r9
 8004390:	414b      	adcs	r3, r1
 8004392:	617b      	str	r3, [r7, #20]
 8004394:	f04f 0200 	mov.w	r2, #0
 8004398:	f04f 0300 	mov.w	r3, #0
 800439c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80043a0:	4659      	mov	r1, fp
 80043a2:	00cb      	lsls	r3, r1, #3
 80043a4:	4651      	mov	r1, sl
 80043a6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80043aa:	4651      	mov	r1, sl
 80043ac:	00ca      	lsls	r2, r1, #3
 80043ae:	4610      	mov	r0, r2
 80043b0:	4619      	mov	r1, r3
 80043b2:	4603      	mov	r3, r0
 80043b4:	4642      	mov	r2, r8
 80043b6:	189b      	adds	r3, r3, r2
 80043b8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80043bc:	464b      	mov	r3, r9
 80043be:	460a      	mov	r2, r1
 80043c0:	eb42 0303 	adc.w	r3, r2, r3
 80043c4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80043c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80043cc:	685b      	ldr	r3, [r3, #4]
 80043ce:	2200      	movs	r2, #0
 80043d0:	67bb      	str	r3, [r7, #120]	; 0x78
 80043d2:	67fa      	str	r2, [r7, #124]	; 0x7c
 80043d4:	f04f 0200 	mov.w	r2, #0
 80043d8:	f04f 0300 	mov.w	r3, #0
 80043dc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80043e0:	4649      	mov	r1, r9
 80043e2:	008b      	lsls	r3, r1, #2
 80043e4:	4641      	mov	r1, r8
 80043e6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80043ea:	4641      	mov	r1, r8
 80043ec:	008a      	lsls	r2, r1, #2
 80043ee:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80043f2:	f7fc fbb1 	bl	8000b58 <__aeabi_uldivmod>
 80043f6:	4602      	mov	r2, r0
 80043f8:	460b      	mov	r3, r1
 80043fa:	4b39      	ldr	r3, [pc, #228]	; (80044e0 <UART_SetConfig+0x4e4>)
 80043fc:	fba3 1302 	umull	r1, r3, r3, r2
 8004400:	095b      	lsrs	r3, r3, #5
 8004402:	2164      	movs	r1, #100	; 0x64
 8004404:	fb01 f303 	mul.w	r3, r1, r3
 8004408:	1ad3      	subs	r3, r2, r3
 800440a:	011b      	lsls	r3, r3, #4
 800440c:	3332      	adds	r3, #50	; 0x32
 800440e:	4a34      	ldr	r2, [pc, #208]	; (80044e0 <UART_SetConfig+0x4e4>)
 8004410:	fba2 2303 	umull	r2, r3, r2, r3
 8004414:	095b      	lsrs	r3, r3, #5
 8004416:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800441a:	441c      	add	r4, r3
 800441c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004420:	2200      	movs	r2, #0
 8004422:	673b      	str	r3, [r7, #112]	; 0x70
 8004424:	677a      	str	r2, [r7, #116]	; 0x74
 8004426:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800442a:	4642      	mov	r2, r8
 800442c:	464b      	mov	r3, r9
 800442e:	1891      	adds	r1, r2, r2
 8004430:	60b9      	str	r1, [r7, #8]
 8004432:	415b      	adcs	r3, r3
 8004434:	60fb      	str	r3, [r7, #12]
 8004436:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800443a:	4641      	mov	r1, r8
 800443c:	1851      	adds	r1, r2, r1
 800443e:	6039      	str	r1, [r7, #0]
 8004440:	4649      	mov	r1, r9
 8004442:	414b      	adcs	r3, r1
 8004444:	607b      	str	r3, [r7, #4]
 8004446:	f04f 0200 	mov.w	r2, #0
 800444a:	f04f 0300 	mov.w	r3, #0
 800444e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004452:	4659      	mov	r1, fp
 8004454:	00cb      	lsls	r3, r1, #3
 8004456:	4651      	mov	r1, sl
 8004458:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800445c:	4651      	mov	r1, sl
 800445e:	00ca      	lsls	r2, r1, #3
 8004460:	4610      	mov	r0, r2
 8004462:	4619      	mov	r1, r3
 8004464:	4603      	mov	r3, r0
 8004466:	4642      	mov	r2, r8
 8004468:	189b      	adds	r3, r3, r2
 800446a:	66bb      	str	r3, [r7, #104]	; 0x68
 800446c:	464b      	mov	r3, r9
 800446e:	460a      	mov	r2, r1
 8004470:	eb42 0303 	adc.w	r3, r2, r3
 8004474:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004476:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800447a:	685b      	ldr	r3, [r3, #4]
 800447c:	2200      	movs	r2, #0
 800447e:	663b      	str	r3, [r7, #96]	; 0x60
 8004480:	667a      	str	r2, [r7, #100]	; 0x64
 8004482:	f04f 0200 	mov.w	r2, #0
 8004486:	f04f 0300 	mov.w	r3, #0
 800448a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800448e:	4649      	mov	r1, r9
 8004490:	008b      	lsls	r3, r1, #2
 8004492:	4641      	mov	r1, r8
 8004494:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004498:	4641      	mov	r1, r8
 800449a:	008a      	lsls	r2, r1, #2
 800449c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80044a0:	f7fc fb5a 	bl	8000b58 <__aeabi_uldivmod>
 80044a4:	4602      	mov	r2, r0
 80044a6:	460b      	mov	r3, r1
 80044a8:	4b0d      	ldr	r3, [pc, #52]	; (80044e0 <UART_SetConfig+0x4e4>)
 80044aa:	fba3 1302 	umull	r1, r3, r3, r2
 80044ae:	095b      	lsrs	r3, r3, #5
 80044b0:	2164      	movs	r1, #100	; 0x64
 80044b2:	fb01 f303 	mul.w	r3, r1, r3
 80044b6:	1ad3      	subs	r3, r2, r3
 80044b8:	011b      	lsls	r3, r3, #4
 80044ba:	3332      	adds	r3, #50	; 0x32
 80044bc:	4a08      	ldr	r2, [pc, #32]	; (80044e0 <UART_SetConfig+0x4e4>)
 80044be:	fba2 2303 	umull	r2, r3, r2, r3
 80044c2:	095b      	lsrs	r3, r3, #5
 80044c4:	f003 020f 	and.w	r2, r3, #15
 80044c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	4422      	add	r2, r4
 80044d0:	609a      	str	r2, [r3, #8]
}
 80044d2:	bf00      	nop
 80044d4:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80044d8:	46bd      	mov	sp, r7
 80044da:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80044de:	bf00      	nop
 80044e0:	51eb851f 	.word	0x51eb851f

080044e4 <__errno>:
 80044e4:	4b01      	ldr	r3, [pc, #4]	; (80044ec <__errno+0x8>)
 80044e6:	6818      	ldr	r0, [r3, #0]
 80044e8:	4770      	bx	lr
 80044ea:	bf00      	nop
 80044ec:	2000009c 	.word	0x2000009c

080044f0 <__libc_init_array>:
 80044f0:	b570      	push	{r4, r5, r6, lr}
 80044f2:	4d0d      	ldr	r5, [pc, #52]	; (8004528 <__libc_init_array+0x38>)
 80044f4:	4c0d      	ldr	r4, [pc, #52]	; (800452c <__libc_init_array+0x3c>)
 80044f6:	1b64      	subs	r4, r4, r5
 80044f8:	10a4      	asrs	r4, r4, #2
 80044fa:	2600      	movs	r6, #0
 80044fc:	42a6      	cmp	r6, r4
 80044fe:	d109      	bne.n	8004514 <__libc_init_array+0x24>
 8004500:	4d0b      	ldr	r5, [pc, #44]	; (8004530 <__libc_init_array+0x40>)
 8004502:	4c0c      	ldr	r4, [pc, #48]	; (8004534 <__libc_init_array+0x44>)
 8004504:	f000 ffe4 	bl	80054d0 <_init>
 8004508:	1b64      	subs	r4, r4, r5
 800450a:	10a4      	asrs	r4, r4, #2
 800450c:	2600      	movs	r6, #0
 800450e:	42a6      	cmp	r6, r4
 8004510:	d105      	bne.n	800451e <__libc_init_array+0x2e>
 8004512:	bd70      	pop	{r4, r5, r6, pc}
 8004514:	f855 3b04 	ldr.w	r3, [r5], #4
 8004518:	4798      	blx	r3
 800451a:	3601      	adds	r6, #1
 800451c:	e7ee      	b.n	80044fc <__libc_init_array+0xc>
 800451e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004522:	4798      	blx	r3
 8004524:	3601      	adds	r6, #1
 8004526:	e7f2      	b.n	800450e <__libc_init_array+0x1e>
 8004528:	080055d8 	.word	0x080055d8
 800452c:	080055d8 	.word	0x080055d8
 8004530:	080055d8 	.word	0x080055d8
 8004534:	080055dc 	.word	0x080055dc

08004538 <memset>:
 8004538:	4402      	add	r2, r0
 800453a:	4603      	mov	r3, r0
 800453c:	4293      	cmp	r3, r2
 800453e:	d100      	bne.n	8004542 <memset+0xa>
 8004540:	4770      	bx	lr
 8004542:	f803 1b01 	strb.w	r1, [r3], #1
 8004546:	e7f9      	b.n	800453c <memset+0x4>

08004548 <siprintf>:
 8004548:	b40e      	push	{r1, r2, r3}
 800454a:	b500      	push	{lr}
 800454c:	b09c      	sub	sp, #112	; 0x70
 800454e:	ab1d      	add	r3, sp, #116	; 0x74
 8004550:	9002      	str	r0, [sp, #8]
 8004552:	9006      	str	r0, [sp, #24]
 8004554:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004558:	4809      	ldr	r0, [pc, #36]	; (8004580 <siprintf+0x38>)
 800455a:	9107      	str	r1, [sp, #28]
 800455c:	9104      	str	r1, [sp, #16]
 800455e:	4909      	ldr	r1, [pc, #36]	; (8004584 <siprintf+0x3c>)
 8004560:	f853 2b04 	ldr.w	r2, [r3], #4
 8004564:	9105      	str	r1, [sp, #20]
 8004566:	6800      	ldr	r0, [r0, #0]
 8004568:	9301      	str	r3, [sp, #4]
 800456a:	a902      	add	r1, sp, #8
 800456c:	f000 f868 	bl	8004640 <_svfiprintf_r>
 8004570:	9b02      	ldr	r3, [sp, #8]
 8004572:	2200      	movs	r2, #0
 8004574:	701a      	strb	r2, [r3, #0]
 8004576:	b01c      	add	sp, #112	; 0x70
 8004578:	f85d eb04 	ldr.w	lr, [sp], #4
 800457c:	b003      	add	sp, #12
 800457e:	4770      	bx	lr
 8004580:	2000009c 	.word	0x2000009c
 8004584:	ffff0208 	.word	0xffff0208

08004588 <__ssputs_r>:
 8004588:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800458c:	688e      	ldr	r6, [r1, #8]
 800458e:	429e      	cmp	r6, r3
 8004590:	4682      	mov	sl, r0
 8004592:	460c      	mov	r4, r1
 8004594:	4690      	mov	r8, r2
 8004596:	461f      	mov	r7, r3
 8004598:	d838      	bhi.n	800460c <__ssputs_r+0x84>
 800459a:	898a      	ldrh	r2, [r1, #12]
 800459c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80045a0:	d032      	beq.n	8004608 <__ssputs_r+0x80>
 80045a2:	6825      	ldr	r5, [r4, #0]
 80045a4:	6909      	ldr	r1, [r1, #16]
 80045a6:	eba5 0901 	sub.w	r9, r5, r1
 80045aa:	6965      	ldr	r5, [r4, #20]
 80045ac:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80045b0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80045b4:	3301      	adds	r3, #1
 80045b6:	444b      	add	r3, r9
 80045b8:	106d      	asrs	r5, r5, #1
 80045ba:	429d      	cmp	r5, r3
 80045bc:	bf38      	it	cc
 80045be:	461d      	movcc	r5, r3
 80045c0:	0553      	lsls	r3, r2, #21
 80045c2:	d531      	bpl.n	8004628 <__ssputs_r+0xa0>
 80045c4:	4629      	mov	r1, r5
 80045c6:	f000 fb63 	bl	8004c90 <_malloc_r>
 80045ca:	4606      	mov	r6, r0
 80045cc:	b950      	cbnz	r0, 80045e4 <__ssputs_r+0x5c>
 80045ce:	230c      	movs	r3, #12
 80045d0:	f8ca 3000 	str.w	r3, [sl]
 80045d4:	89a3      	ldrh	r3, [r4, #12]
 80045d6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80045da:	81a3      	strh	r3, [r4, #12]
 80045dc:	f04f 30ff 	mov.w	r0, #4294967295
 80045e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80045e4:	6921      	ldr	r1, [r4, #16]
 80045e6:	464a      	mov	r2, r9
 80045e8:	f000 fabe 	bl	8004b68 <memcpy>
 80045ec:	89a3      	ldrh	r3, [r4, #12]
 80045ee:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80045f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80045f6:	81a3      	strh	r3, [r4, #12]
 80045f8:	6126      	str	r6, [r4, #16]
 80045fa:	6165      	str	r5, [r4, #20]
 80045fc:	444e      	add	r6, r9
 80045fe:	eba5 0509 	sub.w	r5, r5, r9
 8004602:	6026      	str	r6, [r4, #0]
 8004604:	60a5      	str	r5, [r4, #8]
 8004606:	463e      	mov	r6, r7
 8004608:	42be      	cmp	r6, r7
 800460a:	d900      	bls.n	800460e <__ssputs_r+0x86>
 800460c:	463e      	mov	r6, r7
 800460e:	6820      	ldr	r0, [r4, #0]
 8004610:	4632      	mov	r2, r6
 8004612:	4641      	mov	r1, r8
 8004614:	f000 fab6 	bl	8004b84 <memmove>
 8004618:	68a3      	ldr	r3, [r4, #8]
 800461a:	1b9b      	subs	r3, r3, r6
 800461c:	60a3      	str	r3, [r4, #8]
 800461e:	6823      	ldr	r3, [r4, #0]
 8004620:	4433      	add	r3, r6
 8004622:	6023      	str	r3, [r4, #0]
 8004624:	2000      	movs	r0, #0
 8004626:	e7db      	b.n	80045e0 <__ssputs_r+0x58>
 8004628:	462a      	mov	r2, r5
 800462a:	f000 fba5 	bl	8004d78 <_realloc_r>
 800462e:	4606      	mov	r6, r0
 8004630:	2800      	cmp	r0, #0
 8004632:	d1e1      	bne.n	80045f8 <__ssputs_r+0x70>
 8004634:	6921      	ldr	r1, [r4, #16]
 8004636:	4650      	mov	r0, sl
 8004638:	f000 fabe 	bl	8004bb8 <_free_r>
 800463c:	e7c7      	b.n	80045ce <__ssputs_r+0x46>
	...

08004640 <_svfiprintf_r>:
 8004640:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004644:	4698      	mov	r8, r3
 8004646:	898b      	ldrh	r3, [r1, #12]
 8004648:	061b      	lsls	r3, r3, #24
 800464a:	b09d      	sub	sp, #116	; 0x74
 800464c:	4607      	mov	r7, r0
 800464e:	460d      	mov	r5, r1
 8004650:	4614      	mov	r4, r2
 8004652:	d50e      	bpl.n	8004672 <_svfiprintf_r+0x32>
 8004654:	690b      	ldr	r3, [r1, #16]
 8004656:	b963      	cbnz	r3, 8004672 <_svfiprintf_r+0x32>
 8004658:	2140      	movs	r1, #64	; 0x40
 800465a:	f000 fb19 	bl	8004c90 <_malloc_r>
 800465e:	6028      	str	r0, [r5, #0]
 8004660:	6128      	str	r0, [r5, #16]
 8004662:	b920      	cbnz	r0, 800466e <_svfiprintf_r+0x2e>
 8004664:	230c      	movs	r3, #12
 8004666:	603b      	str	r3, [r7, #0]
 8004668:	f04f 30ff 	mov.w	r0, #4294967295
 800466c:	e0d1      	b.n	8004812 <_svfiprintf_r+0x1d2>
 800466e:	2340      	movs	r3, #64	; 0x40
 8004670:	616b      	str	r3, [r5, #20]
 8004672:	2300      	movs	r3, #0
 8004674:	9309      	str	r3, [sp, #36]	; 0x24
 8004676:	2320      	movs	r3, #32
 8004678:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800467c:	f8cd 800c 	str.w	r8, [sp, #12]
 8004680:	2330      	movs	r3, #48	; 0x30
 8004682:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800482c <_svfiprintf_r+0x1ec>
 8004686:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800468a:	f04f 0901 	mov.w	r9, #1
 800468e:	4623      	mov	r3, r4
 8004690:	469a      	mov	sl, r3
 8004692:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004696:	b10a      	cbz	r2, 800469c <_svfiprintf_r+0x5c>
 8004698:	2a25      	cmp	r2, #37	; 0x25
 800469a:	d1f9      	bne.n	8004690 <_svfiprintf_r+0x50>
 800469c:	ebba 0b04 	subs.w	fp, sl, r4
 80046a0:	d00b      	beq.n	80046ba <_svfiprintf_r+0x7a>
 80046a2:	465b      	mov	r3, fp
 80046a4:	4622      	mov	r2, r4
 80046a6:	4629      	mov	r1, r5
 80046a8:	4638      	mov	r0, r7
 80046aa:	f7ff ff6d 	bl	8004588 <__ssputs_r>
 80046ae:	3001      	adds	r0, #1
 80046b0:	f000 80aa 	beq.w	8004808 <_svfiprintf_r+0x1c8>
 80046b4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80046b6:	445a      	add	r2, fp
 80046b8:	9209      	str	r2, [sp, #36]	; 0x24
 80046ba:	f89a 3000 	ldrb.w	r3, [sl]
 80046be:	2b00      	cmp	r3, #0
 80046c0:	f000 80a2 	beq.w	8004808 <_svfiprintf_r+0x1c8>
 80046c4:	2300      	movs	r3, #0
 80046c6:	f04f 32ff 	mov.w	r2, #4294967295
 80046ca:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80046ce:	f10a 0a01 	add.w	sl, sl, #1
 80046d2:	9304      	str	r3, [sp, #16]
 80046d4:	9307      	str	r3, [sp, #28]
 80046d6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80046da:	931a      	str	r3, [sp, #104]	; 0x68
 80046dc:	4654      	mov	r4, sl
 80046de:	2205      	movs	r2, #5
 80046e0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80046e4:	4851      	ldr	r0, [pc, #324]	; (800482c <_svfiprintf_r+0x1ec>)
 80046e6:	f7fb fd7b 	bl	80001e0 <memchr>
 80046ea:	9a04      	ldr	r2, [sp, #16]
 80046ec:	b9d8      	cbnz	r0, 8004726 <_svfiprintf_r+0xe6>
 80046ee:	06d0      	lsls	r0, r2, #27
 80046f0:	bf44      	itt	mi
 80046f2:	2320      	movmi	r3, #32
 80046f4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80046f8:	0711      	lsls	r1, r2, #28
 80046fa:	bf44      	itt	mi
 80046fc:	232b      	movmi	r3, #43	; 0x2b
 80046fe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004702:	f89a 3000 	ldrb.w	r3, [sl]
 8004706:	2b2a      	cmp	r3, #42	; 0x2a
 8004708:	d015      	beq.n	8004736 <_svfiprintf_r+0xf6>
 800470a:	9a07      	ldr	r2, [sp, #28]
 800470c:	4654      	mov	r4, sl
 800470e:	2000      	movs	r0, #0
 8004710:	f04f 0c0a 	mov.w	ip, #10
 8004714:	4621      	mov	r1, r4
 8004716:	f811 3b01 	ldrb.w	r3, [r1], #1
 800471a:	3b30      	subs	r3, #48	; 0x30
 800471c:	2b09      	cmp	r3, #9
 800471e:	d94e      	bls.n	80047be <_svfiprintf_r+0x17e>
 8004720:	b1b0      	cbz	r0, 8004750 <_svfiprintf_r+0x110>
 8004722:	9207      	str	r2, [sp, #28]
 8004724:	e014      	b.n	8004750 <_svfiprintf_r+0x110>
 8004726:	eba0 0308 	sub.w	r3, r0, r8
 800472a:	fa09 f303 	lsl.w	r3, r9, r3
 800472e:	4313      	orrs	r3, r2
 8004730:	9304      	str	r3, [sp, #16]
 8004732:	46a2      	mov	sl, r4
 8004734:	e7d2      	b.n	80046dc <_svfiprintf_r+0x9c>
 8004736:	9b03      	ldr	r3, [sp, #12]
 8004738:	1d19      	adds	r1, r3, #4
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	9103      	str	r1, [sp, #12]
 800473e:	2b00      	cmp	r3, #0
 8004740:	bfbb      	ittet	lt
 8004742:	425b      	neglt	r3, r3
 8004744:	f042 0202 	orrlt.w	r2, r2, #2
 8004748:	9307      	strge	r3, [sp, #28]
 800474a:	9307      	strlt	r3, [sp, #28]
 800474c:	bfb8      	it	lt
 800474e:	9204      	strlt	r2, [sp, #16]
 8004750:	7823      	ldrb	r3, [r4, #0]
 8004752:	2b2e      	cmp	r3, #46	; 0x2e
 8004754:	d10c      	bne.n	8004770 <_svfiprintf_r+0x130>
 8004756:	7863      	ldrb	r3, [r4, #1]
 8004758:	2b2a      	cmp	r3, #42	; 0x2a
 800475a:	d135      	bne.n	80047c8 <_svfiprintf_r+0x188>
 800475c:	9b03      	ldr	r3, [sp, #12]
 800475e:	1d1a      	adds	r2, r3, #4
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	9203      	str	r2, [sp, #12]
 8004764:	2b00      	cmp	r3, #0
 8004766:	bfb8      	it	lt
 8004768:	f04f 33ff 	movlt.w	r3, #4294967295
 800476c:	3402      	adds	r4, #2
 800476e:	9305      	str	r3, [sp, #20]
 8004770:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800483c <_svfiprintf_r+0x1fc>
 8004774:	7821      	ldrb	r1, [r4, #0]
 8004776:	2203      	movs	r2, #3
 8004778:	4650      	mov	r0, sl
 800477a:	f7fb fd31 	bl	80001e0 <memchr>
 800477e:	b140      	cbz	r0, 8004792 <_svfiprintf_r+0x152>
 8004780:	2340      	movs	r3, #64	; 0x40
 8004782:	eba0 000a 	sub.w	r0, r0, sl
 8004786:	fa03 f000 	lsl.w	r0, r3, r0
 800478a:	9b04      	ldr	r3, [sp, #16]
 800478c:	4303      	orrs	r3, r0
 800478e:	3401      	adds	r4, #1
 8004790:	9304      	str	r3, [sp, #16]
 8004792:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004796:	4826      	ldr	r0, [pc, #152]	; (8004830 <_svfiprintf_r+0x1f0>)
 8004798:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800479c:	2206      	movs	r2, #6
 800479e:	f7fb fd1f 	bl	80001e0 <memchr>
 80047a2:	2800      	cmp	r0, #0
 80047a4:	d038      	beq.n	8004818 <_svfiprintf_r+0x1d8>
 80047a6:	4b23      	ldr	r3, [pc, #140]	; (8004834 <_svfiprintf_r+0x1f4>)
 80047a8:	bb1b      	cbnz	r3, 80047f2 <_svfiprintf_r+0x1b2>
 80047aa:	9b03      	ldr	r3, [sp, #12]
 80047ac:	3307      	adds	r3, #7
 80047ae:	f023 0307 	bic.w	r3, r3, #7
 80047b2:	3308      	adds	r3, #8
 80047b4:	9303      	str	r3, [sp, #12]
 80047b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80047b8:	4433      	add	r3, r6
 80047ba:	9309      	str	r3, [sp, #36]	; 0x24
 80047bc:	e767      	b.n	800468e <_svfiprintf_r+0x4e>
 80047be:	fb0c 3202 	mla	r2, ip, r2, r3
 80047c2:	460c      	mov	r4, r1
 80047c4:	2001      	movs	r0, #1
 80047c6:	e7a5      	b.n	8004714 <_svfiprintf_r+0xd4>
 80047c8:	2300      	movs	r3, #0
 80047ca:	3401      	adds	r4, #1
 80047cc:	9305      	str	r3, [sp, #20]
 80047ce:	4619      	mov	r1, r3
 80047d0:	f04f 0c0a 	mov.w	ip, #10
 80047d4:	4620      	mov	r0, r4
 80047d6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80047da:	3a30      	subs	r2, #48	; 0x30
 80047dc:	2a09      	cmp	r2, #9
 80047de:	d903      	bls.n	80047e8 <_svfiprintf_r+0x1a8>
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d0c5      	beq.n	8004770 <_svfiprintf_r+0x130>
 80047e4:	9105      	str	r1, [sp, #20]
 80047e6:	e7c3      	b.n	8004770 <_svfiprintf_r+0x130>
 80047e8:	fb0c 2101 	mla	r1, ip, r1, r2
 80047ec:	4604      	mov	r4, r0
 80047ee:	2301      	movs	r3, #1
 80047f0:	e7f0      	b.n	80047d4 <_svfiprintf_r+0x194>
 80047f2:	ab03      	add	r3, sp, #12
 80047f4:	9300      	str	r3, [sp, #0]
 80047f6:	462a      	mov	r2, r5
 80047f8:	4b0f      	ldr	r3, [pc, #60]	; (8004838 <_svfiprintf_r+0x1f8>)
 80047fa:	a904      	add	r1, sp, #16
 80047fc:	4638      	mov	r0, r7
 80047fe:	f3af 8000 	nop.w
 8004802:	1c42      	adds	r2, r0, #1
 8004804:	4606      	mov	r6, r0
 8004806:	d1d6      	bne.n	80047b6 <_svfiprintf_r+0x176>
 8004808:	89ab      	ldrh	r3, [r5, #12]
 800480a:	065b      	lsls	r3, r3, #25
 800480c:	f53f af2c 	bmi.w	8004668 <_svfiprintf_r+0x28>
 8004810:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004812:	b01d      	add	sp, #116	; 0x74
 8004814:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004818:	ab03      	add	r3, sp, #12
 800481a:	9300      	str	r3, [sp, #0]
 800481c:	462a      	mov	r2, r5
 800481e:	4b06      	ldr	r3, [pc, #24]	; (8004838 <_svfiprintf_r+0x1f8>)
 8004820:	a904      	add	r1, sp, #16
 8004822:	4638      	mov	r0, r7
 8004824:	f000 f87a 	bl	800491c <_printf_i>
 8004828:	e7eb      	b.n	8004802 <_svfiprintf_r+0x1c2>
 800482a:	bf00      	nop
 800482c:	08005528 	.word	0x08005528
 8004830:	08005532 	.word	0x08005532
 8004834:	00000000 	.word	0x00000000
 8004838:	08004589 	.word	0x08004589
 800483c:	0800552e 	.word	0x0800552e

08004840 <_printf_common>:
 8004840:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004844:	4616      	mov	r6, r2
 8004846:	4699      	mov	r9, r3
 8004848:	688a      	ldr	r2, [r1, #8]
 800484a:	690b      	ldr	r3, [r1, #16]
 800484c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004850:	4293      	cmp	r3, r2
 8004852:	bfb8      	it	lt
 8004854:	4613      	movlt	r3, r2
 8004856:	6033      	str	r3, [r6, #0]
 8004858:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800485c:	4607      	mov	r7, r0
 800485e:	460c      	mov	r4, r1
 8004860:	b10a      	cbz	r2, 8004866 <_printf_common+0x26>
 8004862:	3301      	adds	r3, #1
 8004864:	6033      	str	r3, [r6, #0]
 8004866:	6823      	ldr	r3, [r4, #0]
 8004868:	0699      	lsls	r1, r3, #26
 800486a:	bf42      	ittt	mi
 800486c:	6833      	ldrmi	r3, [r6, #0]
 800486e:	3302      	addmi	r3, #2
 8004870:	6033      	strmi	r3, [r6, #0]
 8004872:	6825      	ldr	r5, [r4, #0]
 8004874:	f015 0506 	ands.w	r5, r5, #6
 8004878:	d106      	bne.n	8004888 <_printf_common+0x48>
 800487a:	f104 0a19 	add.w	sl, r4, #25
 800487e:	68e3      	ldr	r3, [r4, #12]
 8004880:	6832      	ldr	r2, [r6, #0]
 8004882:	1a9b      	subs	r3, r3, r2
 8004884:	42ab      	cmp	r3, r5
 8004886:	dc26      	bgt.n	80048d6 <_printf_common+0x96>
 8004888:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800488c:	1e13      	subs	r3, r2, #0
 800488e:	6822      	ldr	r2, [r4, #0]
 8004890:	bf18      	it	ne
 8004892:	2301      	movne	r3, #1
 8004894:	0692      	lsls	r2, r2, #26
 8004896:	d42b      	bmi.n	80048f0 <_printf_common+0xb0>
 8004898:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800489c:	4649      	mov	r1, r9
 800489e:	4638      	mov	r0, r7
 80048a0:	47c0      	blx	r8
 80048a2:	3001      	adds	r0, #1
 80048a4:	d01e      	beq.n	80048e4 <_printf_common+0xa4>
 80048a6:	6823      	ldr	r3, [r4, #0]
 80048a8:	68e5      	ldr	r5, [r4, #12]
 80048aa:	6832      	ldr	r2, [r6, #0]
 80048ac:	f003 0306 	and.w	r3, r3, #6
 80048b0:	2b04      	cmp	r3, #4
 80048b2:	bf08      	it	eq
 80048b4:	1aad      	subeq	r5, r5, r2
 80048b6:	68a3      	ldr	r3, [r4, #8]
 80048b8:	6922      	ldr	r2, [r4, #16]
 80048ba:	bf0c      	ite	eq
 80048bc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80048c0:	2500      	movne	r5, #0
 80048c2:	4293      	cmp	r3, r2
 80048c4:	bfc4      	itt	gt
 80048c6:	1a9b      	subgt	r3, r3, r2
 80048c8:	18ed      	addgt	r5, r5, r3
 80048ca:	2600      	movs	r6, #0
 80048cc:	341a      	adds	r4, #26
 80048ce:	42b5      	cmp	r5, r6
 80048d0:	d11a      	bne.n	8004908 <_printf_common+0xc8>
 80048d2:	2000      	movs	r0, #0
 80048d4:	e008      	b.n	80048e8 <_printf_common+0xa8>
 80048d6:	2301      	movs	r3, #1
 80048d8:	4652      	mov	r2, sl
 80048da:	4649      	mov	r1, r9
 80048dc:	4638      	mov	r0, r7
 80048de:	47c0      	blx	r8
 80048e0:	3001      	adds	r0, #1
 80048e2:	d103      	bne.n	80048ec <_printf_common+0xac>
 80048e4:	f04f 30ff 	mov.w	r0, #4294967295
 80048e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80048ec:	3501      	adds	r5, #1
 80048ee:	e7c6      	b.n	800487e <_printf_common+0x3e>
 80048f0:	18e1      	adds	r1, r4, r3
 80048f2:	1c5a      	adds	r2, r3, #1
 80048f4:	2030      	movs	r0, #48	; 0x30
 80048f6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80048fa:	4422      	add	r2, r4
 80048fc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004900:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004904:	3302      	adds	r3, #2
 8004906:	e7c7      	b.n	8004898 <_printf_common+0x58>
 8004908:	2301      	movs	r3, #1
 800490a:	4622      	mov	r2, r4
 800490c:	4649      	mov	r1, r9
 800490e:	4638      	mov	r0, r7
 8004910:	47c0      	blx	r8
 8004912:	3001      	adds	r0, #1
 8004914:	d0e6      	beq.n	80048e4 <_printf_common+0xa4>
 8004916:	3601      	adds	r6, #1
 8004918:	e7d9      	b.n	80048ce <_printf_common+0x8e>
	...

0800491c <_printf_i>:
 800491c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004920:	7e0f      	ldrb	r7, [r1, #24]
 8004922:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004924:	2f78      	cmp	r7, #120	; 0x78
 8004926:	4691      	mov	r9, r2
 8004928:	4680      	mov	r8, r0
 800492a:	460c      	mov	r4, r1
 800492c:	469a      	mov	sl, r3
 800492e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004932:	d807      	bhi.n	8004944 <_printf_i+0x28>
 8004934:	2f62      	cmp	r7, #98	; 0x62
 8004936:	d80a      	bhi.n	800494e <_printf_i+0x32>
 8004938:	2f00      	cmp	r7, #0
 800493a:	f000 80d8 	beq.w	8004aee <_printf_i+0x1d2>
 800493e:	2f58      	cmp	r7, #88	; 0x58
 8004940:	f000 80a3 	beq.w	8004a8a <_printf_i+0x16e>
 8004944:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004948:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800494c:	e03a      	b.n	80049c4 <_printf_i+0xa8>
 800494e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004952:	2b15      	cmp	r3, #21
 8004954:	d8f6      	bhi.n	8004944 <_printf_i+0x28>
 8004956:	a101      	add	r1, pc, #4	; (adr r1, 800495c <_printf_i+0x40>)
 8004958:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800495c:	080049b5 	.word	0x080049b5
 8004960:	080049c9 	.word	0x080049c9
 8004964:	08004945 	.word	0x08004945
 8004968:	08004945 	.word	0x08004945
 800496c:	08004945 	.word	0x08004945
 8004970:	08004945 	.word	0x08004945
 8004974:	080049c9 	.word	0x080049c9
 8004978:	08004945 	.word	0x08004945
 800497c:	08004945 	.word	0x08004945
 8004980:	08004945 	.word	0x08004945
 8004984:	08004945 	.word	0x08004945
 8004988:	08004ad5 	.word	0x08004ad5
 800498c:	080049f9 	.word	0x080049f9
 8004990:	08004ab7 	.word	0x08004ab7
 8004994:	08004945 	.word	0x08004945
 8004998:	08004945 	.word	0x08004945
 800499c:	08004af7 	.word	0x08004af7
 80049a0:	08004945 	.word	0x08004945
 80049a4:	080049f9 	.word	0x080049f9
 80049a8:	08004945 	.word	0x08004945
 80049ac:	08004945 	.word	0x08004945
 80049b0:	08004abf 	.word	0x08004abf
 80049b4:	682b      	ldr	r3, [r5, #0]
 80049b6:	1d1a      	adds	r2, r3, #4
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	602a      	str	r2, [r5, #0]
 80049bc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80049c0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80049c4:	2301      	movs	r3, #1
 80049c6:	e0a3      	b.n	8004b10 <_printf_i+0x1f4>
 80049c8:	6820      	ldr	r0, [r4, #0]
 80049ca:	6829      	ldr	r1, [r5, #0]
 80049cc:	0606      	lsls	r6, r0, #24
 80049ce:	f101 0304 	add.w	r3, r1, #4
 80049d2:	d50a      	bpl.n	80049ea <_printf_i+0xce>
 80049d4:	680e      	ldr	r6, [r1, #0]
 80049d6:	602b      	str	r3, [r5, #0]
 80049d8:	2e00      	cmp	r6, #0
 80049da:	da03      	bge.n	80049e4 <_printf_i+0xc8>
 80049dc:	232d      	movs	r3, #45	; 0x2d
 80049de:	4276      	negs	r6, r6
 80049e0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80049e4:	485e      	ldr	r0, [pc, #376]	; (8004b60 <_printf_i+0x244>)
 80049e6:	230a      	movs	r3, #10
 80049e8:	e019      	b.n	8004a1e <_printf_i+0x102>
 80049ea:	680e      	ldr	r6, [r1, #0]
 80049ec:	602b      	str	r3, [r5, #0]
 80049ee:	f010 0f40 	tst.w	r0, #64	; 0x40
 80049f2:	bf18      	it	ne
 80049f4:	b236      	sxthne	r6, r6
 80049f6:	e7ef      	b.n	80049d8 <_printf_i+0xbc>
 80049f8:	682b      	ldr	r3, [r5, #0]
 80049fa:	6820      	ldr	r0, [r4, #0]
 80049fc:	1d19      	adds	r1, r3, #4
 80049fe:	6029      	str	r1, [r5, #0]
 8004a00:	0601      	lsls	r1, r0, #24
 8004a02:	d501      	bpl.n	8004a08 <_printf_i+0xec>
 8004a04:	681e      	ldr	r6, [r3, #0]
 8004a06:	e002      	b.n	8004a0e <_printf_i+0xf2>
 8004a08:	0646      	lsls	r6, r0, #25
 8004a0a:	d5fb      	bpl.n	8004a04 <_printf_i+0xe8>
 8004a0c:	881e      	ldrh	r6, [r3, #0]
 8004a0e:	4854      	ldr	r0, [pc, #336]	; (8004b60 <_printf_i+0x244>)
 8004a10:	2f6f      	cmp	r7, #111	; 0x6f
 8004a12:	bf0c      	ite	eq
 8004a14:	2308      	moveq	r3, #8
 8004a16:	230a      	movne	r3, #10
 8004a18:	2100      	movs	r1, #0
 8004a1a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004a1e:	6865      	ldr	r5, [r4, #4]
 8004a20:	60a5      	str	r5, [r4, #8]
 8004a22:	2d00      	cmp	r5, #0
 8004a24:	bfa2      	ittt	ge
 8004a26:	6821      	ldrge	r1, [r4, #0]
 8004a28:	f021 0104 	bicge.w	r1, r1, #4
 8004a2c:	6021      	strge	r1, [r4, #0]
 8004a2e:	b90e      	cbnz	r6, 8004a34 <_printf_i+0x118>
 8004a30:	2d00      	cmp	r5, #0
 8004a32:	d04d      	beq.n	8004ad0 <_printf_i+0x1b4>
 8004a34:	4615      	mov	r5, r2
 8004a36:	fbb6 f1f3 	udiv	r1, r6, r3
 8004a3a:	fb03 6711 	mls	r7, r3, r1, r6
 8004a3e:	5dc7      	ldrb	r7, [r0, r7]
 8004a40:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004a44:	4637      	mov	r7, r6
 8004a46:	42bb      	cmp	r3, r7
 8004a48:	460e      	mov	r6, r1
 8004a4a:	d9f4      	bls.n	8004a36 <_printf_i+0x11a>
 8004a4c:	2b08      	cmp	r3, #8
 8004a4e:	d10b      	bne.n	8004a68 <_printf_i+0x14c>
 8004a50:	6823      	ldr	r3, [r4, #0]
 8004a52:	07de      	lsls	r6, r3, #31
 8004a54:	d508      	bpl.n	8004a68 <_printf_i+0x14c>
 8004a56:	6923      	ldr	r3, [r4, #16]
 8004a58:	6861      	ldr	r1, [r4, #4]
 8004a5a:	4299      	cmp	r1, r3
 8004a5c:	bfde      	ittt	le
 8004a5e:	2330      	movle	r3, #48	; 0x30
 8004a60:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004a64:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004a68:	1b52      	subs	r2, r2, r5
 8004a6a:	6122      	str	r2, [r4, #16]
 8004a6c:	f8cd a000 	str.w	sl, [sp]
 8004a70:	464b      	mov	r3, r9
 8004a72:	aa03      	add	r2, sp, #12
 8004a74:	4621      	mov	r1, r4
 8004a76:	4640      	mov	r0, r8
 8004a78:	f7ff fee2 	bl	8004840 <_printf_common>
 8004a7c:	3001      	adds	r0, #1
 8004a7e:	d14c      	bne.n	8004b1a <_printf_i+0x1fe>
 8004a80:	f04f 30ff 	mov.w	r0, #4294967295
 8004a84:	b004      	add	sp, #16
 8004a86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004a8a:	4835      	ldr	r0, [pc, #212]	; (8004b60 <_printf_i+0x244>)
 8004a8c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8004a90:	6829      	ldr	r1, [r5, #0]
 8004a92:	6823      	ldr	r3, [r4, #0]
 8004a94:	f851 6b04 	ldr.w	r6, [r1], #4
 8004a98:	6029      	str	r1, [r5, #0]
 8004a9a:	061d      	lsls	r5, r3, #24
 8004a9c:	d514      	bpl.n	8004ac8 <_printf_i+0x1ac>
 8004a9e:	07df      	lsls	r7, r3, #31
 8004aa0:	bf44      	itt	mi
 8004aa2:	f043 0320 	orrmi.w	r3, r3, #32
 8004aa6:	6023      	strmi	r3, [r4, #0]
 8004aa8:	b91e      	cbnz	r6, 8004ab2 <_printf_i+0x196>
 8004aaa:	6823      	ldr	r3, [r4, #0]
 8004aac:	f023 0320 	bic.w	r3, r3, #32
 8004ab0:	6023      	str	r3, [r4, #0]
 8004ab2:	2310      	movs	r3, #16
 8004ab4:	e7b0      	b.n	8004a18 <_printf_i+0xfc>
 8004ab6:	6823      	ldr	r3, [r4, #0]
 8004ab8:	f043 0320 	orr.w	r3, r3, #32
 8004abc:	6023      	str	r3, [r4, #0]
 8004abe:	2378      	movs	r3, #120	; 0x78
 8004ac0:	4828      	ldr	r0, [pc, #160]	; (8004b64 <_printf_i+0x248>)
 8004ac2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004ac6:	e7e3      	b.n	8004a90 <_printf_i+0x174>
 8004ac8:	0659      	lsls	r1, r3, #25
 8004aca:	bf48      	it	mi
 8004acc:	b2b6      	uxthmi	r6, r6
 8004ace:	e7e6      	b.n	8004a9e <_printf_i+0x182>
 8004ad0:	4615      	mov	r5, r2
 8004ad2:	e7bb      	b.n	8004a4c <_printf_i+0x130>
 8004ad4:	682b      	ldr	r3, [r5, #0]
 8004ad6:	6826      	ldr	r6, [r4, #0]
 8004ad8:	6961      	ldr	r1, [r4, #20]
 8004ada:	1d18      	adds	r0, r3, #4
 8004adc:	6028      	str	r0, [r5, #0]
 8004ade:	0635      	lsls	r5, r6, #24
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	d501      	bpl.n	8004ae8 <_printf_i+0x1cc>
 8004ae4:	6019      	str	r1, [r3, #0]
 8004ae6:	e002      	b.n	8004aee <_printf_i+0x1d2>
 8004ae8:	0670      	lsls	r0, r6, #25
 8004aea:	d5fb      	bpl.n	8004ae4 <_printf_i+0x1c8>
 8004aec:	8019      	strh	r1, [r3, #0]
 8004aee:	2300      	movs	r3, #0
 8004af0:	6123      	str	r3, [r4, #16]
 8004af2:	4615      	mov	r5, r2
 8004af4:	e7ba      	b.n	8004a6c <_printf_i+0x150>
 8004af6:	682b      	ldr	r3, [r5, #0]
 8004af8:	1d1a      	adds	r2, r3, #4
 8004afa:	602a      	str	r2, [r5, #0]
 8004afc:	681d      	ldr	r5, [r3, #0]
 8004afe:	6862      	ldr	r2, [r4, #4]
 8004b00:	2100      	movs	r1, #0
 8004b02:	4628      	mov	r0, r5
 8004b04:	f7fb fb6c 	bl	80001e0 <memchr>
 8004b08:	b108      	cbz	r0, 8004b0e <_printf_i+0x1f2>
 8004b0a:	1b40      	subs	r0, r0, r5
 8004b0c:	6060      	str	r0, [r4, #4]
 8004b0e:	6863      	ldr	r3, [r4, #4]
 8004b10:	6123      	str	r3, [r4, #16]
 8004b12:	2300      	movs	r3, #0
 8004b14:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004b18:	e7a8      	b.n	8004a6c <_printf_i+0x150>
 8004b1a:	6923      	ldr	r3, [r4, #16]
 8004b1c:	462a      	mov	r2, r5
 8004b1e:	4649      	mov	r1, r9
 8004b20:	4640      	mov	r0, r8
 8004b22:	47d0      	blx	sl
 8004b24:	3001      	adds	r0, #1
 8004b26:	d0ab      	beq.n	8004a80 <_printf_i+0x164>
 8004b28:	6823      	ldr	r3, [r4, #0]
 8004b2a:	079b      	lsls	r3, r3, #30
 8004b2c:	d413      	bmi.n	8004b56 <_printf_i+0x23a>
 8004b2e:	68e0      	ldr	r0, [r4, #12]
 8004b30:	9b03      	ldr	r3, [sp, #12]
 8004b32:	4298      	cmp	r0, r3
 8004b34:	bfb8      	it	lt
 8004b36:	4618      	movlt	r0, r3
 8004b38:	e7a4      	b.n	8004a84 <_printf_i+0x168>
 8004b3a:	2301      	movs	r3, #1
 8004b3c:	4632      	mov	r2, r6
 8004b3e:	4649      	mov	r1, r9
 8004b40:	4640      	mov	r0, r8
 8004b42:	47d0      	blx	sl
 8004b44:	3001      	adds	r0, #1
 8004b46:	d09b      	beq.n	8004a80 <_printf_i+0x164>
 8004b48:	3501      	adds	r5, #1
 8004b4a:	68e3      	ldr	r3, [r4, #12]
 8004b4c:	9903      	ldr	r1, [sp, #12]
 8004b4e:	1a5b      	subs	r3, r3, r1
 8004b50:	42ab      	cmp	r3, r5
 8004b52:	dcf2      	bgt.n	8004b3a <_printf_i+0x21e>
 8004b54:	e7eb      	b.n	8004b2e <_printf_i+0x212>
 8004b56:	2500      	movs	r5, #0
 8004b58:	f104 0619 	add.w	r6, r4, #25
 8004b5c:	e7f5      	b.n	8004b4a <_printf_i+0x22e>
 8004b5e:	bf00      	nop
 8004b60:	08005539 	.word	0x08005539
 8004b64:	0800554a 	.word	0x0800554a

08004b68 <memcpy>:
 8004b68:	440a      	add	r2, r1
 8004b6a:	4291      	cmp	r1, r2
 8004b6c:	f100 33ff 	add.w	r3, r0, #4294967295
 8004b70:	d100      	bne.n	8004b74 <memcpy+0xc>
 8004b72:	4770      	bx	lr
 8004b74:	b510      	push	{r4, lr}
 8004b76:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004b7a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004b7e:	4291      	cmp	r1, r2
 8004b80:	d1f9      	bne.n	8004b76 <memcpy+0xe>
 8004b82:	bd10      	pop	{r4, pc}

08004b84 <memmove>:
 8004b84:	4288      	cmp	r0, r1
 8004b86:	b510      	push	{r4, lr}
 8004b88:	eb01 0402 	add.w	r4, r1, r2
 8004b8c:	d902      	bls.n	8004b94 <memmove+0x10>
 8004b8e:	4284      	cmp	r4, r0
 8004b90:	4623      	mov	r3, r4
 8004b92:	d807      	bhi.n	8004ba4 <memmove+0x20>
 8004b94:	1e43      	subs	r3, r0, #1
 8004b96:	42a1      	cmp	r1, r4
 8004b98:	d008      	beq.n	8004bac <memmove+0x28>
 8004b9a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004b9e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004ba2:	e7f8      	b.n	8004b96 <memmove+0x12>
 8004ba4:	4402      	add	r2, r0
 8004ba6:	4601      	mov	r1, r0
 8004ba8:	428a      	cmp	r2, r1
 8004baa:	d100      	bne.n	8004bae <memmove+0x2a>
 8004bac:	bd10      	pop	{r4, pc}
 8004bae:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004bb2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004bb6:	e7f7      	b.n	8004ba8 <memmove+0x24>

08004bb8 <_free_r>:
 8004bb8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004bba:	2900      	cmp	r1, #0
 8004bbc:	d044      	beq.n	8004c48 <_free_r+0x90>
 8004bbe:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004bc2:	9001      	str	r0, [sp, #4]
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	f1a1 0404 	sub.w	r4, r1, #4
 8004bca:	bfb8      	it	lt
 8004bcc:	18e4      	addlt	r4, r4, r3
 8004bce:	f000 f913 	bl	8004df8 <__malloc_lock>
 8004bd2:	4a1e      	ldr	r2, [pc, #120]	; (8004c4c <_free_r+0x94>)
 8004bd4:	9801      	ldr	r0, [sp, #4]
 8004bd6:	6813      	ldr	r3, [r2, #0]
 8004bd8:	b933      	cbnz	r3, 8004be8 <_free_r+0x30>
 8004bda:	6063      	str	r3, [r4, #4]
 8004bdc:	6014      	str	r4, [r2, #0]
 8004bde:	b003      	add	sp, #12
 8004be0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004be4:	f000 b90e 	b.w	8004e04 <__malloc_unlock>
 8004be8:	42a3      	cmp	r3, r4
 8004bea:	d908      	bls.n	8004bfe <_free_r+0x46>
 8004bec:	6825      	ldr	r5, [r4, #0]
 8004bee:	1961      	adds	r1, r4, r5
 8004bf0:	428b      	cmp	r3, r1
 8004bf2:	bf01      	itttt	eq
 8004bf4:	6819      	ldreq	r1, [r3, #0]
 8004bf6:	685b      	ldreq	r3, [r3, #4]
 8004bf8:	1949      	addeq	r1, r1, r5
 8004bfa:	6021      	streq	r1, [r4, #0]
 8004bfc:	e7ed      	b.n	8004bda <_free_r+0x22>
 8004bfe:	461a      	mov	r2, r3
 8004c00:	685b      	ldr	r3, [r3, #4]
 8004c02:	b10b      	cbz	r3, 8004c08 <_free_r+0x50>
 8004c04:	42a3      	cmp	r3, r4
 8004c06:	d9fa      	bls.n	8004bfe <_free_r+0x46>
 8004c08:	6811      	ldr	r1, [r2, #0]
 8004c0a:	1855      	adds	r5, r2, r1
 8004c0c:	42a5      	cmp	r5, r4
 8004c0e:	d10b      	bne.n	8004c28 <_free_r+0x70>
 8004c10:	6824      	ldr	r4, [r4, #0]
 8004c12:	4421      	add	r1, r4
 8004c14:	1854      	adds	r4, r2, r1
 8004c16:	42a3      	cmp	r3, r4
 8004c18:	6011      	str	r1, [r2, #0]
 8004c1a:	d1e0      	bne.n	8004bde <_free_r+0x26>
 8004c1c:	681c      	ldr	r4, [r3, #0]
 8004c1e:	685b      	ldr	r3, [r3, #4]
 8004c20:	6053      	str	r3, [r2, #4]
 8004c22:	4421      	add	r1, r4
 8004c24:	6011      	str	r1, [r2, #0]
 8004c26:	e7da      	b.n	8004bde <_free_r+0x26>
 8004c28:	d902      	bls.n	8004c30 <_free_r+0x78>
 8004c2a:	230c      	movs	r3, #12
 8004c2c:	6003      	str	r3, [r0, #0]
 8004c2e:	e7d6      	b.n	8004bde <_free_r+0x26>
 8004c30:	6825      	ldr	r5, [r4, #0]
 8004c32:	1961      	adds	r1, r4, r5
 8004c34:	428b      	cmp	r3, r1
 8004c36:	bf04      	itt	eq
 8004c38:	6819      	ldreq	r1, [r3, #0]
 8004c3a:	685b      	ldreq	r3, [r3, #4]
 8004c3c:	6063      	str	r3, [r4, #4]
 8004c3e:	bf04      	itt	eq
 8004c40:	1949      	addeq	r1, r1, r5
 8004c42:	6021      	streq	r1, [r4, #0]
 8004c44:	6054      	str	r4, [r2, #4]
 8004c46:	e7ca      	b.n	8004bde <_free_r+0x26>
 8004c48:	b003      	add	sp, #12
 8004c4a:	bd30      	pop	{r4, r5, pc}
 8004c4c:	20000224 	.word	0x20000224

08004c50 <sbrk_aligned>:
 8004c50:	b570      	push	{r4, r5, r6, lr}
 8004c52:	4e0e      	ldr	r6, [pc, #56]	; (8004c8c <sbrk_aligned+0x3c>)
 8004c54:	460c      	mov	r4, r1
 8004c56:	6831      	ldr	r1, [r6, #0]
 8004c58:	4605      	mov	r5, r0
 8004c5a:	b911      	cbnz	r1, 8004c62 <sbrk_aligned+0x12>
 8004c5c:	f000 f8bc 	bl	8004dd8 <_sbrk_r>
 8004c60:	6030      	str	r0, [r6, #0]
 8004c62:	4621      	mov	r1, r4
 8004c64:	4628      	mov	r0, r5
 8004c66:	f000 f8b7 	bl	8004dd8 <_sbrk_r>
 8004c6a:	1c43      	adds	r3, r0, #1
 8004c6c:	d00a      	beq.n	8004c84 <sbrk_aligned+0x34>
 8004c6e:	1cc4      	adds	r4, r0, #3
 8004c70:	f024 0403 	bic.w	r4, r4, #3
 8004c74:	42a0      	cmp	r0, r4
 8004c76:	d007      	beq.n	8004c88 <sbrk_aligned+0x38>
 8004c78:	1a21      	subs	r1, r4, r0
 8004c7a:	4628      	mov	r0, r5
 8004c7c:	f000 f8ac 	bl	8004dd8 <_sbrk_r>
 8004c80:	3001      	adds	r0, #1
 8004c82:	d101      	bne.n	8004c88 <sbrk_aligned+0x38>
 8004c84:	f04f 34ff 	mov.w	r4, #4294967295
 8004c88:	4620      	mov	r0, r4
 8004c8a:	bd70      	pop	{r4, r5, r6, pc}
 8004c8c:	20000228 	.word	0x20000228

08004c90 <_malloc_r>:
 8004c90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004c94:	1ccd      	adds	r5, r1, #3
 8004c96:	f025 0503 	bic.w	r5, r5, #3
 8004c9a:	3508      	adds	r5, #8
 8004c9c:	2d0c      	cmp	r5, #12
 8004c9e:	bf38      	it	cc
 8004ca0:	250c      	movcc	r5, #12
 8004ca2:	2d00      	cmp	r5, #0
 8004ca4:	4607      	mov	r7, r0
 8004ca6:	db01      	blt.n	8004cac <_malloc_r+0x1c>
 8004ca8:	42a9      	cmp	r1, r5
 8004caa:	d905      	bls.n	8004cb8 <_malloc_r+0x28>
 8004cac:	230c      	movs	r3, #12
 8004cae:	603b      	str	r3, [r7, #0]
 8004cb0:	2600      	movs	r6, #0
 8004cb2:	4630      	mov	r0, r6
 8004cb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004cb8:	4e2e      	ldr	r6, [pc, #184]	; (8004d74 <_malloc_r+0xe4>)
 8004cba:	f000 f89d 	bl	8004df8 <__malloc_lock>
 8004cbe:	6833      	ldr	r3, [r6, #0]
 8004cc0:	461c      	mov	r4, r3
 8004cc2:	bb34      	cbnz	r4, 8004d12 <_malloc_r+0x82>
 8004cc4:	4629      	mov	r1, r5
 8004cc6:	4638      	mov	r0, r7
 8004cc8:	f7ff ffc2 	bl	8004c50 <sbrk_aligned>
 8004ccc:	1c43      	adds	r3, r0, #1
 8004cce:	4604      	mov	r4, r0
 8004cd0:	d14d      	bne.n	8004d6e <_malloc_r+0xde>
 8004cd2:	6834      	ldr	r4, [r6, #0]
 8004cd4:	4626      	mov	r6, r4
 8004cd6:	2e00      	cmp	r6, #0
 8004cd8:	d140      	bne.n	8004d5c <_malloc_r+0xcc>
 8004cda:	6823      	ldr	r3, [r4, #0]
 8004cdc:	4631      	mov	r1, r6
 8004cde:	4638      	mov	r0, r7
 8004ce0:	eb04 0803 	add.w	r8, r4, r3
 8004ce4:	f000 f878 	bl	8004dd8 <_sbrk_r>
 8004ce8:	4580      	cmp	r8, r0
 8004cea:	d13a      	bne.n	8004d62 <_malloc_r+0xd2>
 8004cec:	6821      	ldr	r1, [r4, #0]
 8004cee:	3503      	adds	r5, #3
 8004cf0:	1a6d      	subs	r5, r5, r1
 8004cf2:	f025 0503 	bic.w	r5, r5, #3
 8004cf6:	3508      	adds	r5, #8
 8004cf8:	2d0c      	cmp	r5, #12
 8004cfa:	bf38      	it	cc
 8004cfc:	250c      	movcc	r5, #12
 8004cfe:	4629      	mov	r1, r5
 8004d00:	4638      	mov	r0, r7
 8004d02:	f7ff ffa5 	bl	8004c50 <sbrk_aligned>
 8004d06:	3001      	adds	r0, #1
 8004d08:	d02b      	beq.n	8004d62 <_malloc_r+0xd2>
 8004d0a:	6823      	ldr	r3, [r4, #0]
 8004d0c:	442b      	add	r3, r5
 8004d0e:	6023      	str	r3, [r4, #0]
 8004d10:	e00e      	b.n	8004d30 <_malloc_r+0xa0>
 8004d12:	6822      	ldr	r2, [r4, #0]
 8004d14:	1b52      	subs	r2, r2, r5
 8004d16:	d41e      	bmi.n	8004d56 <_malloc_r+0xc6>
 8004d18:	2a0b      	cmp	r2, #11
 8004d1a:	d916      	bls.n	8004d4a <_malloc_r+0xba>
 8004d1c:	1961      	adds	r1, r4, r5
 8004d1e:	42a3      	cmp	r3, r4
 8004d20:	6025      	str	r5, [r4, #0]
 8004d22:	bf18      	it	ne
 8004d24:	6059      	strne	r1, [r3, #4]
 8004d26:	6863      	ldr	r3, [r4, #4]
 8004d28:	bf08      	it	eq
 8004d2a:	6031      	streq	r1, [r6, #0]
 8004d2c:	5162      	str	r2, [r4, r5]
 8004d2e:	604b      	str	r3, [r1, #4]
 8004d30:	4638      	mov	r0, r7
 8004d32:	f104 060b 	add.w	r6, r4, #11
 8004d36:	f000 f865 	bl	8004e04 <__malloc_unlock>
 8004d3a:	f026 0607 	bic.w	r6, r6, #7
 8004d3e:	1d23      	adds	r3, r4, #4
 8004d40:	1af2      	subs	r2, r6, r3
 8004d42:	d0b6      	beq.n	8004cb2 <_malloc_r+0x22>
 8004d44:	1b9b      	subs	r3, r3, r6
 8004d46:	50a3      	str	r3, [r4, r2]
 8004d48:	e7b3      	b.n	8004cb2 <_malloc_r+0x22>
 8004d4a:	6862      	ldr	r2, [r4, #4]
 8004d4c:	42a3      	cmp	r3, r4
 8004d4e:	bf0c      	ite	eq
 8004d50:	6032      	streq	r2, [r6, #0]
 8004d52:	605a      	strne	r2, [r3, #4]
 8004d54:	e7ec      	b.n	8004d30 <_malloc_r+0xa0>
 8004d56:	4623      	mov	r3, r4
 8004d58:	6864      	ldr	r4, [r4, #4]
 8004d5a:	e7b2      	b.n	8004cc2 <_malloc_r+0x32>
 8004d5c:	4634      	mov	r4, r6
 8004d5e:	6876      	ldr	r6, [r6, #4]
 8004d60:	e7b9      	b.n	8004cd6 <_malloc_r+0x46>
 8004d62:	230c      	movs	r3, #12
 8004d64:	603b      	str	r3, [r7, #0]
 8004d66:	4638      	mov	r0, r7
 8004d68:	f000 f84c 	bl	8004e04 <__malloc_unlock>
 8004d6c:	e7a1      	b.n	8004cb2 <_malloc_r+0x22>
 8004d6e:	6025      	str	r5, [r4, #0]
 8004d70:	e7de      	b.n	8004d30 <_malloc_r+0xa0>
 8004d72:	bf00      	nop
 8004d74:	20000224 	.word	0x20000224

08004d78 <_realloc_r>:
 8004d78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004d7c:	4680      	mov	r8, r0
 8004d7e:	4614      	mov	r4, r2
 8004d80:	460e      	mov	r6, r1
 8004d82:	b921      	cbnz	r1, 8004d8e <_realloc_r+0x16>
 8004d84:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004d88:	4611      	mov	r1, r2
 8004d8a:	f7ff bf81 	b.w	8004c90 <_malloc_r>
 8004d8e:	b92a      	cbnz	r2, 8004d9c <_realloc_r+0x24>
 8004d90:	f7ff ff12 	bl	8004bb8 <_free_r>
 8004d94:	4625      	mov	r5, r4
 8004d96:	4628      	mov	r0, r5
 8004d98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004d9c:	f000 f838 	bl	8004e10 <_malloc_usable_size_r>
 8004da0:	4284      	cmp	r4, r0
 8004da2:	4607      	mov	r7, r0
 8004da4:	d802      	bhi.n	8004dac <_realloc_r+0x34>
 8004da6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8004daa:	d812      	bhi.n	8004dd2 <_realloc_r+0x5a>
 8004dac:	4621      	mov	r1, r4
 8004dae:	4640      	mov	r0, r8
 8004db0:	f7ff ff6e 	bl	8004c90 <_malloc_r>
 8004db4:	4605      	mov	r5, r0
 8004db6:	2800      	cmp	r0, #0
 8004db8:	d0ed      	beq.n	8004d96 <_realloc_r+0x1e>
 8004dba:	42bc      	cmp	r4, r7
 8004dbc:	4622      	mov	r2, r4
 8004dbe:	4631      	mov	r1, r6
 8004dc0:	bf28      	it	cs
 8004dc2:	463a      	movcs	r2, r7
 8004dc4:	f7ff fed0 	bl	8004b68 <memcpy>
 8004dc8:	4631      	mov	r1, r6
 8004dca:	4640      	mov	r0, r8
 8004dcc:	f7ff fef4 	bl	8004bb8 <_free_r>
 8004dd0:	e7e1      	b.n	8004d96 <_realloc_r+0x1e>
 8004dd2:	4635      	mov	r5, r6
 8004dd4:	e7df      	b.n	8004d96 <_realloc_r+0x1e>
	...

08004dd8 <_sbrk_r>:
 8004dd8:	b538      	push	{r3, r4, r5, lr}
 8004dda:	4d06      	ldr	r5, [pc, #24]	; (8004df4 <_sbrk_r+0x1c>)
 8004ddc:	2300      	movs	r3, #0
 8004dde:	4604      	mov	r4, r0
 8004de0:	4608      	mov	r0, r1
 8004de2:	602b      	str	r3, [r5, #0]
 8004de4:	f7fc ff58 	bl	8001c98 <_sbrk>
 8004de8:	1c43      	adds	r3, r0, #1
 8004dea:	d102      	bne.n	8004df2 <_sbrk_r+0x1a>
 8004dec:	682b      	ldr	r3, [r5, #0]
 8004dee:	b103      	cbz	r3, 8004df2 <_sbrk_r+0x1a>
 8004df0:	6023      	str	r3, [r4, #0]
 8004df2:	bd38      	pop	{r3, r4, r5, pc}
 8004df4:	2000022c 	.word	0x2000022c

08004df8 <__malloc_lock>:
 8004df8:	4801      	ldr	r0, [pc, #4]	; (8004e00 <__malloc_lock+0x8>)
 8004dfa:	f000 b811 	b.w	8004e20 <__retarget_lock_acquire_recursive>
 8004dfe:	bf00      	nop
 8004e00:	20000230 	.word	0x20000230

08004e04 <__malloc_unlock>:
 8004e04:	4801      	ldr	r0, [pc, #4]	; (8004e0c <__malloc_unlock+0x8>)
 8004e06:	f000 b80c 	b.w	8004e22 <__retarget_lock_release_recursive>
 8004e0a:	bf00      	nop
 8004e0c:	20000230 	.word	0x20000230

08004e10 <_malloc_usable_size_r>:
 8004e10:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004e14:	1f18      	subs	r0, r3, #4
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	bfbc      	itt	lt
 8004e1a:	580b      	ldrlt	r3, [r1, r0]
 8004e1c:	18c0      	addlt	r0, r0, r3
 8004e1e:	4770      	bx	lr

08004e20 <__retarget_lock_acquire_recursive>:
 8004e20:	4770      	bx	lr

08004e22 <__retarget_lock_release_recursive>:
 8004e22:	4770      	bx	lr
 8004e24:	0000      	movs	r0, r0
	...

08004e28 <atan>:
 8004e28:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e2c:	ec55 4b10 	vmov	r4, r5, d0
 8004e30:	4bc3      	ldr	r3, [pc, #780]	; (8005140 <atan+0x318>)
 8004e32:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8004e36:	429e      	cmp	r6, r3
 8004e38:	46ab      	mov	fp, r5
 8004e3a:	dd18      	ble.n	8004e6e <atan+0x46>
 8004e3c:	4bc1      	ldr	r3, [pc, #772]	; (8005144 <atan+0x31c>)
 8004e3e:	429e      	cmp	r6, r3
 8004e40:	dc01      	bgt.n	8004e46 <atan+0x1e>
 8004e42:	d109      	bne.n	8004e58 <atan+0x30>
 8004e44:	b144      	cbz	r4, 8004e58 <atan+0x30>
 8004e46:	4622      	mov	r2, r4
 8004e48:	462b      	mov	r3, r5
 8004e4a:	4620      	mov	r0, r4
 8004e4c:	4629      	mov	r1, r5
 8004e4e:	f7fb fa1d 	bl	800028c <__adddf3>
 8004e52:	4604      	mov	r4, r0
 8004e54:	460d      	mov	r5, r1
 8004e56:	e006      	b.n	8004e66 <atan+0x3e>
 8004e58:	f1bb 0f00 	cmp.w	fp, #0
 8004e5c:	f300 8131 	bgt.w	80050c2 <atan+0x29a>
 8004e60:	a59b      	add	r5, pc, #620	; (adr r5, 80050d0 <atan+0x2a8>)
 8004e62:	e9d5 4500 	ldrd	r4, r5, [r5]
 8004e66:	ec45 4b10 	vmov	d0, r4, r5
 8004e6a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004e6e:	4bb6      	ldr	r3, [pc, #728]	; (8005148 <atan+0x320>)
 8004e70:	429e      	cmp	r6, r3
 8004e72:	dc14      	bgt.n	8004e9e <atan+0x76>
 8004e74:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 8004e78:	429e      	cmp	r6, r3
 8004e7a:	dc0d      	bgt.n	8004e98 <atan+0x70>
 8004e7c:	a396      	add	r3, pc, #600	; (adr r3, 80050d8 <atan+0x2b0>)
 8004e7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e82:	ee10 0a10 	vmov	r0, s0
 8004e86:	4629      	mov	r1, r5
 8004e88:	f7fb fa00 	bl	800028c <__adddf3>
 8004e8c:	4baf      	ldr	r3, [pc, #700]	; (800514c <atan+0x324>)
 8004e8e:	2200      	movs	r2, #0
 8004e90:	f7fb fe42 	bl	8000b18 <__aeabi_dcmpgt>
 8004e94:	2800      	cmp	r0, #0
 8004e96:	d1e6      	bne.n	8004e66 <atan+0x3e>
 8004e98:	f04f 3aff 	mov.w	sl, #4294967295
 8004e9c:	e02b      	b.n	8004ef6 <atan+0xce>
 8004e9e:	f000 f963 	bl	8005168 <fabs>
 8004ea2:	4bab      	ldr	r3, [pc, #684]	; (8005150 <atan+0x328>)
 8004ea4:	429e      	cmp	r6, r3
 8004ea6:	ec55 4b10 	vmov	r4, r5, d0
 8004eaa:	f300 80bf 	bgt.w	800502c <atan+0x204>
 8004eae:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 8004eb2:	429e      	cmp	r6, r3
 8004eb4:	f300 80a0 	bgt.w	8004ff8 <atan+0x1d0>
 8004eb8:	ee10 2a10 	vmov	r2, s0
 8004ebc:	ee10 0a10 	vmov	r0, s0
 8004ec0:	462b      	mov	r3, r5
 8004ec2:	4629      	mov	r1, r5
 8004ec4:	f7fb f9e2 	bl	800028c <__adddf3>
 8004ec8:	4ba0      	ldr	r3, [pc, #640]	; (800514c <atan+0x324>)
 8004eca:	2200      	movs	r2, #0
 8004ecc:	f7fb f9dc 	bl	8000288 <__aeabi_dsub>
 8004ed0:	2200      	movs	r2, #0
 8004ed2:	4606      	mov	r6, r0
 8004ed4:	460f      	mov	r7, r1
 8004ed6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004eda:	4620      	mov	r0, r4
 8004edc:	4629      	mov	r1, r5
 8004ede:	f7fb f9d5 	bl	800028c <__adddf3>
 8004ee2:	4602      	mov	r2, r0
 8004ee4:	460b      	mov	r3, r1
 8004ee6:	4630      	mov	r0, r6
 8004ee8:	4639      	mov	r1, r7
 8004eea:	f7fb fcaf 	bl	800084c <__aeabi_ddiv>
 8004eee:	f04f 0a00 	mov.w	sl, #0
 8004ef2:	4604      	mov	r4, r0
 8004ef4:	460d      	mov	r5, r1
 8004ef6:	4622      	mov	r2, r4
 8004ef8:	462b      	mov	r3, r5
 8004efa:	4620      	mov	r0, r4
 8004efc:	4629      	mov	r1, r5
 8004efe:	f7fb fb7b 	bl	80005f8 <__aeabi_dmul>
 8004f02:	4602      	mov	r2, r0
 8004f04:	460b      	mov	r3, r1
 8004f06:	4680      	mov	r8, r0
 8004f08:	4689      	mov	r9, r1
 8004f0a:	f7fb fb75 	bl	80005f8 <__aeabi_dmul>
 8004f0e:	a374      	add	r3, pc, #464	; (adr r3, 80050e0 <atan+0x2b8>)
 8004f10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f14:	4606      	mov	r6, r0
 8004f16:	460f      	mov	r7, r1
 8004f18:	f7fb fb6e 	bl	80005f8 <__aeabi_dmul>
 8004f1c:	a372      	add	r3, pc, #456	; (adr r3, 80050e8 <atan+0x2c0>)
 8004f1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f22:	f7fb f9b3 	bl	800028c <__adddf3>
 8004f26:	4632      	mov	r2, r6
 8004f28:	463b      	mov	r3, r7
 8004f2a:	f7fb fb65 	bl	80005f8 <__aeabi_dmul>
 8004f2e:	a370      	add	r3, pc, #448	; (adr r3, 80050f0 <atan+0x2c8>)
 8004f30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f34:	f7fb f9aa 	bl	800028c <__adddf3>
 8004f38:	4632      	mov	r2, r6
 8004f3a:	463b      	mov	r3, r7
 8004f3c:	f7fb fb5c 	bl	80005f8 <__aeabi_dmul>
 8004f40:	a36d      	add	r3, pc, #436	; (adr r3, 80050f8 <atan+0x2d0>)
 8004f42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f46:	f7fb f9a1 	bl	800028c <__adddf3>
 8004f4a:	4632      	mov	r2, r6
 8004f4c:	463b      	mov	r3, r7
 8004f4e:	f7fb fb53 	bl	80005f8 <__aeabi_dmul>
 8004f52:	a36b      	add	r3, pc, #428	; (adr r3, 8005100 <atan+0x2d8>)
 8004f54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f58:	f7fb f998 	bl	800028c <__adddf3>
 8004f5c:	4632      	mov	r2, r6
 8004f5e:	463b      	mov	r3, r7
 8004f60:	f7fb fb4a 	bl	80005f8 <__aeabi_dmul>
 8004f64:	a368      	add	r3, pc, #416	; (adr r3, 8005108 <atan+0x2e0>)
 8004f66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f6a:	f7fb f98f 	bl	800028c <__adddf3>
 8004f6e:	4642      	mov	r2, r8
 8004f70:	464b      	mov	r3, r9
 8004f72:	f7fb fb41 	bl	80005f8 <__aeabi_dmul>
 8004f76:	a366      	add	r3, pc, #408	; (adr r3, 8005110 <atan+0x2e8>)
 8004f78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f7c:	4680      	mov	r8, r0
 8004f7e:	4689      	mov	r9, r1
 8004f80:	4630      	mov	r0, r6
 8004f82:	4639      	mov	r1, r7
 8004f84:	f7fb fb38 	bl	80005f8 <__aeabi_dmul>
 8004f88:	a363      	add	r3, pc, #396	; (adr r3, 8005118 <atan+0x2f0>)
 8004f8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f8e:	f7fb f97b 	bl	8000288 <__aeabi_dsub>
 8004f92:	4632      	mov	r2, r6
 8004f94:	463b      	mov	r3, r7
 8004f96:	f7fb fb2f 	bl	80005f8 <__aeabi_dmul>
 8004f9a:	a361      	add	r3, pc, #388	; (adr r3, 8005120 <atan+0x2f8>)
 8004f9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fa0:	f7fb f972 	bl	8000288 <__aeabi_dsub>
 8004fa4:	4632      	mov	r2, r6
 8004fa6:	463b      	mov	r3, r7
 8004fa8:	f7fb fb26 	bl	80005f8 <__aeabi_dmul>
 8004fac:	a35e      	add	r3, pc, #376	; (adr r3, 8005128 <atan+0x300>)
 8004fae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fb2:	f7fb f969 	bl	8000288 <__aeabi_dsub>
 8004fb6:	4632      	mov	r2, r6
 8004fb8:	463b      	mov	r3, r7
 8004fba:	f7fb fb1d 	bl	80005f8 <__aeabi_dmul>
 8004fbe:	a35c      	add	r3, pc, #368	; (adr r3, 8005130 <atan+0x308>)
 8004fc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fc4:	f7fb f960 	bl	8000288 <__aeabi_dsub>
 8004fc8:	4632      	mov	r2, r6
 8004fca:	463b      	mov	r3, r7
 8004fcc:	f7fb fb14 	bl	80005f8 <__aeabi_dmul>
 8004fd0:	4602      	mov	r2, r0
 8004fd2:	460b      	mov	r3, r1
 8004fd4:	4640      	mov	r0, r8
 8004fd6:	4649      	mov	r1, r9
 8004fd8:	f7fb f958 	bl	800028c <__adddf3>
 8004fdc:	4622      	mov	r2, r4
 8004fde:	462b      	mov	r3, r5
 8004fe0:	f7fb fb0a 	bl	80005f8 <__aeabi_dmul>
 8004fe4:	f1ba 3fff 	cmp.w	sl, #4294967295
 8004fe8:	4602      	mov	r2, r0
 8004fea:	460b      	mov	r3, r1
 8004fec:	d14b      	bne.n	8005086 <atan+0x25e>
 8004fee:	4620      	mov	r0, r4
 8004ff0:	4629      	mov	r1, r5
 8004ff2:	f7fb f949 	bl	8000288 <__aeabi_dsub>
 8004ff6:	e72c      	b.n	8004e52 <atan+0x2a>
 8004ff8:	ee10 0a10 	vmov	r0, s0
 8004ffc:	4b53      	ldr	r3, [pc, #332]	; (800514c <atan+0x324>)
 8004ffe:	2200      	movs	r2, #0
 8005000:	4629      	mov	r1, r5
 8005002:	f7fb f941 	bl	8000288 <__aeabi_dsub>
 8005006:	4b51      	ldr	r3, [pc, #324]	; (800514c <atan+0x324>)
 8005008:	4606      	mov	r6, r0
 800500a:	460f      	mov	r7, r1
 800500c:	2200      	movs	r2, #0
 800500e:	4620      	mov	r0, r4
 8005010:	4629      	mov	r1, r5
 8005012:	f7fb f93b 	bl	800028c <__adddf3>
 8005016:	4602      	mov	r2, r0
 8005018:	460b      	mov	r3, r1
 800501a:	4630      	mov	r0, r6
 800501c:	4639      	mov	r1, r7
 800501e:	f7fb fc15 	bl	800084c <__aeabi_ddiv>
 8005022:	f04f 0a01 	mov.w	sl, #1
 8005026:	4604      	mov	r4, r0
 8005028:	460d      	mov	r5, r1
 800502a:	e764      	b.n	8004ef6 <atan+0xce>
 800502c:	4b49      	ldr	r3, [pc, #292]	; (8005154 <atan+0x32c>)
 800502e:	429e      	cmp	r6, r3
 8005030:	da1d      	bge.n	800506e <atan+0x246>
 8005032:	ee10 0a10 	vmov	r0, s0
 8005036:	4b48      	ldr	r3, [pc, #288]	; (8005158 <atan+0x330>)
 8005038:	2200      	movs	r2, #0
 800503a:	4629      	mov	r1, r5
 800503c:	f7fb f924 	bl	8000288 <__aeabi_dsub>
 8005040:	4b45      	ldr	r3, [pc, #276]	; (8005158 <atan+0x330>)
 8005042:	4606      	mov	r6, r0
 8005044:	460f      	mov	r7, r1
 8005046:	2200      	movs	r2, #0
 8005048:	4620      	mov	r0, r4
 800504a:	4629      	mov	r1, r5
 800504c:	f7fb fad4 	bl	80005f8 <__aeabi_dmul>
 8005050:	4b3e      	ldr	r3, [pc, #248]	; (800514c <atan+0x324>)
 8005052:	2200      	movs	r2, #0
 8005054:	f7fb f91a 	bl	800028c <__adddf3>
 8005058:	4602      	mov	r2, r0
 800505a:	460b      	mov	r3, r1
 800505c:	4630      	mov	r0, r6
 800505e:	4639      	mov	r1, r7
 8005060:	f7fb fbf4 	bl	800084c <__aeabi_ddiv>
 8005064:	f04f 0a02 	mov.w	sl, #2
 8005068:	4604      	mov	r4, r0
 800506a:	460d      	mov	r5, r1
 800506c:	e743      	b.n	8004ef6 <atan+0xce>
 800506e:	462b      	mov	r3, r5
 8005070:	ee10 2a10 	vmov	r2, s0
 8005074:	4939      	ldr	r1, [pc, #228]	; (800515c <atan+0x334>)
 8005076:	2000      	movs	r0, #0
 8005078:	f7fb fbe8 	bl	800084c <__aeabi_ddiv>
 800507c:	f04f 0a03 	mov.w	sl, #3
 8005080:	4604      	mov	r4, r0
 8005082:	460d      	mov	r5, r1
 8005084:	e737      	b.n	8004ef6 <atan+0xce>
 8005086:	4b36      	ldr	r3, [pc, #216]	; (8005160 <atan+0x338>)
 8005088:	4e36      	ldr	r6, [pc, #216]	; (8005164 <atan+0x33c>)
 800508a:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800508e:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 8005092:	e9da 2300 	ldrd	r2, r3, [sl]
 8005096:	f7fb f8f7 	bl	8000288 <__aeabi_dsub>
 800509a:	4622      	mov	r2, r4
 800509c:	462b      	mov	r3, r5
 800509e:	f7fb f8f3 	bl	8000288 <__aeabi_dsub>
 80050a2:	4602      	mov	r2, r0
 80050a4:	460b      	mov	r3, r1
 80050a6:	e9d6 0100 	ldrd	r0, r1, [r6]
 80050aa:	f7fb f8ed 	bl	8000288 <__aeabi_dsub>
 80050ae:	f1bb 0f00 	cmp.w	fp, #0
 80050b2:	4604      	mov	r4, r0
 80050b4:	460d      	mov	r5, r1
 80050b6:	f6bf aed6 	bge.w	8004e66 <atan+0x3e>
 80050ba:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80050be:	461d      	mov	r5, r3
 80050c0:	e6d1      	b.n	8004e66 <atan+0x3e>
 80050c2:	a51d      	add	r5, pc, #116	; (adr r5, 8005138 <atan+0x310>)
 80050c4:	e9d5 4500 	ldrd	r4, r5, [r5]
 80050c8:	e6cd      	b.n	8004e66 <atan+0x3e>
 80050ca:	bf00      	nop
 80050cc:	f3af 8000 	nop.w
 80050d0:	54442d18 	.word	0x54442d18
 80050d4:	bff921fb 	.word	0xbff921fb
 80050d8:	8800759c 	.word	0x8800759c
 80050dc:	7e37e43c 	.word	0x7e37e43c
 80050e0:	e322da11 	.word	0xe322da11
 80050e4:	3f90ad3a 	.word	0x3f90ad3a
 80050e8:	24760deb 	.word	0x24760deb
 80050ec:	3fa97b4b 	.word	0x3fa97b4b
 80050f0:	a0d03d51 	.word	0xa0d03d51
 80050f4:	3fb10d66 	.word	0x3fb10d66
 80050f8:	c54c206e 	.word	0xc54c206e
 80050fc:	3fb745cd 	.word	0x3fb745cd
 8005100:	920083ff 	.word	0x920083ff
 8005104:	3fc24924 	.word	0x3fc24924
 8005108:	5555550d 	.word	0x5555550d
 800510c:	3fd55555 	.word	0x3fd55555
 8005110:	2c6a6c2f 	.word	0x2c6a6c2f
 8005114:	bfa2b444 	.word	0xbfa2b444
 8005118:	52defd9a 	.word	0x52defd9a
 800511c:	3fadde2d 	.word	0x3fadde2d
 8005120:	af749a6d 	.word	0xaf749a6d
 8005124:	3fb3b0f2 	.word	0x3fb3b0f2
 8005128:	fe231671 	.word	0xfe231671
 800512c:	3fbc71c6 	.word	0x3fbc71c6
 8005130:	9998ebc4 	.word	0x9998ebc4
 8005134:	3fc99999 	.word	0x3fc99999
 8005138:	54442d18 	.word	0x54442d18
 800513c:	3ff921fb 	.word	0x3ff921fb
 8005140:	440fffff 	.word	0x440fffff
 8005144:	7ff00000 	.word	0x7ff00000
 8005148:	3fdbffff 	.word	0x3fdbffff
 800514c:	3ff00000 	.word	0x3ff00000
 8005150:	3ff2ffff 	.word	0x3ff2ffff
 8005154:	40038000 	.word	0x40038000
 8005158:	3ff80000 	.word	0x3ff80000
 800515c:	bff00000 	.word	0xbff00000
 8005160:	08005580 	.word	0x08005580
 8005164:	08005560 	.word	0x08005560

08005168 <fabs>:
 8005168:	ec51 0b10 	vmov	r0, r1, d0
 800516c:	ee10 2a10 	vmov	r2, s0
 8005170:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8005174:	ec43 2b10 	vmov	d0, r2, r3
 8005178:	4770      	bx	lr

0800517a <atan2>:
 800517a:	f000 b82d 	b.w	80051d8 <__ieee754_atan2>

0800517e <sqrt>:
 800517e:	b538      	push	{r3, r4, r5, lr}
 8005180:	ed2d 8b02 	vpush	{d8}
 8005184:	ec55 4b10 	vmov	r4, r5, d0
 8005188:	f000 f8f0 	bl	800536c <__ieee754_sqrt>
 800518c:	4622      	mov	r2, r4
 800518e:	462b      	mov	r3, r5
 8005190:	4620      	mov	r0, r4
 8005192:	4629      	mov	r1, r5
 8005194:	eeb0 8a40 	vmov.f32	s16, s0
 8005198:	eef0 8a60 	vmov.f32	s17, s1
 800519c:	f7fb fcc6 	bl	8000b2c <__aeabi_dcmpun>
 80051a0:	b990      	cbnz	r0, 80051c8 <sqrt+0x4a>
 80051a2:	2200      	movs	r2, #0
 80051a4:	2300      	movs	r3, #0
 80051a6:	4620      	mov	r0, r4
 80051a8:	4629      	mov	r1, r5
 80051aa:	f7fb fc97 	bl	8000adc <__aeabi_dcmplt>
 80051ae:	b158      	cbz	r0, 80051c8 <sqrt+0x4a>
 80051b0:	f7ff f998 	bl	80044e4 <__errno>
 80051b4:	2321      	movs	r3, #33	; 0x21
 80051b6:	6003      	str	r3, [r0, #0]
 80051b8:	2200      	movs	r2, #0
 80051ba:	2300      	movs	r3, #0
 80051bc:	4610      	mov	r0, r2
 80051be:	4619      	mov	r1, r3
 80051c0:	f7fb fb44 	bl	800084c <__aeabi_ddiv>
 80051c4:	ec41 0b18 	vmov	d8, r0, r1
 80051c8:	eeb0 0a48 	vmov.f32	s0, s16
 80051cc:	eef0 0a68 	vmov.f32	s1, s17
 80051d0:	ecbd 8b02 	vpop	{d8}
 80051d4:	bd38      	pop	{r3, r4, r5, pc}
	...

080051d8 <__ieee754_atan2>:
 80051d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80051dc:	ec57 6b11 	vmov	r6, r7, d1
 80051e0:	4273      	negs	r3, r6
 80051e2:	f8df e184 	ldr.w	lr, [pc, #388]	; 8005368 <__ieee754_atan2+0x190>
 80051e6:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 80051ea:	4333      	orrs	r3, r6
 80051ec:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 80051f0:	4573      	cmp	r3, lr
 80051f2:	ec51 0b10 	vmov	r0, r1, d0
 80051f6:	ee11 8a10 	vmov	r8, s2
 80051fa:	d80a      	bhi.n	8005212 <__ieee754_atan2+0x3a>
 80051fc:	4244      	negs	r4, r0
 80051fe:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8005202:	4304      	orrs	r4, r0
 8005204:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 8005208:	4574      	cmp	r4, lr
 800520a:	ee10 9a10 	vmov	r9, s0
 800520e:	468c      	mov	ip, r1
 8005210:	d907      	bls.n	8005222 <__ieee754_atan2+0x4a>
 8005212:	4632      	mov	r2, r6
 8005214:	463b      	mov	r3, r7
 8005216:	f7fb f839 	bl	800028c <__adddf3>
 800521a:	ec41 0b10 	vmov	d0, r0, r1
 800521e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005222:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 8005226:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800522a:	4334      	orrs	r4, r6
 800522c:	d103      	bne.n	8005236 <__ieee754_atan2+0x5e>
 800522e:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005232:	f7ff bdf9 	b.w	8004e28 <atan>
 8005236:	17bc      	asrs	r4, r7, #30
 8005238:	f004 0402 	and.w	r4, r4, #2
 800523c:	ea53 0909 	orrs.w	r9, r3, r9
 8005240:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 8005244:	d107      	bne.n	8005256 <__ieee754_atan2+0x7e>
 8005246:	2c02      	cmp	r4, #2
 8005248:	d060      	beq.n	800530c <__ieee754_atan2+0x134>
 800524a:	2c03      	cmp	r4, #3
 800524c:	d1e5      	bne.n	800521a <__ieee754_atan2+0x42>
 800524e:	a142      	add	r1, pc, #264	; (adr r1, 8005358 <__ieee754_atan2+0x180>)
 8005250:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005254:	e7e1      	b.n	800521a <__ieee754_atan2+0x42>
 8005256:	ea52 0808 	orrs.w	r8, r2, r8
 800525a:	d106      	bne.n	800526a <__ieee754_atan2+0x92>
 800525c:	f1bc 0f00 	cmp.w	ip, #0
 8005260:	da5f      	bge.n	8005322 <__ieee754_atan2+0x14a>
 8005262:	a13f      	add	r1, pc, #252	; (adr r1, 8005360 <__ieee754_atan2+0x188>)
 8005264:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005268:	e7d7      	b.n	800521a <__ieee754_atan2+0x42>
 800526a:	4572      	cmp	r2, lr
 800526c:	d10f      	bne.n	800528e <__ieee754_atan2+0xb6>
 800526e:	4293      	cmp	r3, r2
 8005270:	f104 34ff 	add.w	r4, r4, #4294967295
 8005274:	d107      	bne.n	8005286 <__ieee754_atan2+0xae>
 8005276:	2c02      	cmp	r4, #2
 8005278:	d84c      	bhi.n	8005314 <__ieee754_atan2+0x13c>
 800527a:	4b35      	ldr	r3, [pc, #212]	; (8005350 <__ieee754_atan2+0x178>)
 800527c:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 8005280:	e9d4 0100 	ldrd	r0, r1, [r4]
 8005284:	e7c9      	b.n	800521a <__ieee754_atan2+0x42>
 8005286:	2c02      	cmp	r4, #2
 8005288:	d848      	bhi.n	800531c <__ieee754_atan2+0x144>
 800528a:	4b32      	ldr	r3, [pc, #200]	; (8005354 <__ieee754_atan2+0x17c>)
 800528c:	e7f6      	b.n	800527c <__ieee754_atan2+0xa4>
 800528e:	4573      	cmp	r3, lr
 8005290:	d0e4      	beq.n	800525c <__ieee754_atan2+0x84>
 8005292:	1a9b      	subs	r3, r3, r2
 8005294:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 8005298:	ea4f 5223 	mov.w	r2, r3, asr #20
 800529c:	da1e      	bge.n	80052dc <__ieee754_atan2+0x104>
 800529e:	2f00      	cmp	r7, #0
 80052a0:	da01      	bge.n	80052a6 <__ieee754_atan2+0xce>
 80052a2:	323c      	adds	r2, #60	; 0x3c
 80052a4:	db1e      	blt.n	80052e4 <__ieee754_atan2+0x10c>
 80052a6:	4632      	mov	r2, r6
 80052a8:	463b      	mov	r3, r7
 80052aa:	f7fb facf 	bl	800084c <__aeabi_ddiv>
 80052ae:	ec41 0b10 	vmov	d0, r0, r1
 80052b2:	f7ff ff59 	bl	8005168 <fabs>
 80052b6:	f7ff fdb7 	bl	8004e28 <atan>
 80052ba:	ec51 0b10 	vmov	r0, r1, d0
 80052be:	2c01      	cmp	r4, #1
 80052c0:	d013      	beq.n	80052ea <__ieee754_atan2+0x112>
 80052c2:	2c02      	cmp	r4, #2
 80052c4:	d015      	beq.n	80052f2 <__ieee754_atan2+0x11a>
 80052c6:	2c00      	cmp	r4, #0
 80052c8:	d0a7      	beq.n	800521a <__ieee754_atan2+0x42>
 80052ca:	a319      	add	r3, pc, #100	; (adr r3, 8005330 <__ieee754_atan2+0x158>)
 80052cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052d0:	f7fa ffda 	bl	8000288 <__aeabi_dsub>
 80052d4:	a318      	add	r3, pc, #96	; (adr r3, 8005338 <__ieee754_atan2+0x160>)
 80052d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052da:	e014      	b.n	8005306 <__ieee754_atan2+0x12e>
 80052dc:	a118      	add	r1, pc, #96	; (adr r1, 8005340 <__ieee754_atan2+0x168>)
 80052de:	e9d1 0100 	ldrd	r0, r1, [r1]
 80052e2:	e7ec      	b.n	80052be <__ieee754_atan2+0xe6>
 80052e4:	2000      	movs	r0, #0
 80052e6:	2100      	movs	r1, #0
 80052e8:	e7e9      	b.n	80052be <__ieee754_atan2+0xe6>
 80052ea:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80052ee:	4619      	mov	r1, r3
 80052f0:	e793      	b.n	800521a <__ieee754_atan2+0x42>
 80052f2:	a30f      	add	r3, pc, #60	; (adr r3, 8005330 <__ieee754_atan2+0x158>)
 80052f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052f8:	f7fa ffc6 	bl	8000288 <__aeabi_dsub>
 80052fc:	4602      	mov	r2, r0
 80052fe:	460b      	mov	r3, r1
 8005300:	a10d      	add	r1, pc, #52	; (adr r1, 8005338 <__ieee754_atan2+0x160>)
 8005302:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005306:	f7fa ffbf 	bl	8000288 <__aeabi_dsub>
 800530a:	e786      	b.n	800521a <__ieee754_atan2+0x42>
 800530c:	a10a      	add	r1, pc, #40	; (adr r1, 8005338 <__ieee754_atan2+0x160>)
 800530e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005312:	e782      	b.n	800521a <__ieee754_atan2+0x42>
 8005314:	a10c      	add	r1, pc, #48	; (adr r1, 8005348 <__ieee754_atan2+0x170>)
 8005316:	e9d1 0100 	ldrd	r0, r1, [r1]
 800531a:	e77e      	b.n	800521a <__ieee754_atan2+0x42>
 800531c:	2000      	movs	r0, #0
 800531e:	2100      	movs	r1, #0
 8005320:	e77b      	b.n	800521a <__ieee754_atan2+0x42>
 8005322:	a107      	add	r1, pc, #28	; (adr r1, 8005340 <__ieee754_atan2+0x168>)
 8005324:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005328:	e777      	b.n	800521a <__ieee754_atan2+0x42>
 800532a:	bf00      	nop
 800532c:	f3af 8000 	nop.w
 8005330:	33145c07 	.word	0x33145c07
 8005334:	3ca1a626 	.word	0x3ca1a626
 8005338:	54442d18 	.word	0x54442d18
 800533c:	400921fb 	.word	0x400921fb
 8005340:	54442d18 	.word	0x54442d18
 8005344:	3ff921fb 	.word	0x3ff921fb
 8005348:	54442d18 	.word	0x54442d18
 800534c:	3fe921fb 	.word	0x3fe921fb
 8005350:	080055a0 	.word	0x080055a0
 8005354:	080055b8 	.word	0x080055b8
 8005358:	54442d18 	.word	0x54442d18
 800535c:	c00921fb 	.word	0xc00921fb
 8005360:	54442d18 	.word	0x54442d18
 8005364:	bff921fb 	.word	0xbff921fb
 8005368:	7ff00000 	.word	0x7ff00000

0800536c <__ieee754_sqrt>:
 800536c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005370:	ec55 4b10 	vmov	r4, r5, d0
 8005374:	4e55      	ldr	r6, [pc, #340]	; (80054cc <__ieee754_sqrt+0x160>)
 8005376:	43ae      	bics	r6, r5
 8005378:	ee10 0a10 	vmov	r0, s0
 800537c:	ee10 3a10 	vmov	r3, s0
 8005380:	462a      	mov	r2, r5
 8005382:	4629      	mov	r1, r5
 8005384:	d110      	bne.n	80053a8 <__ieee754_sqrt+0x3c>
 8005386:	ee10 2a10 	vmov	r2, s0
 800538a:	462b      	mov	r3, r5
 800538c:	f7fb f934 	bl	80005f8 <__aeabi_dmul>
 8005390:	4602      	mov	r2, r0
 8005392:	460b      	mov	r3, r1
 8005394:	4620      	mov	r0, r4
 8005396:	4629      	mov	r1, r5
 8005398:	f7fa ff78 	bl	800028c <__adddf3>
 800539c:	4604      	mov	r4, r0
 800539e:	460d      	mov	r5, r1
 80053a0:	ec45 4b10 	vmov	d0, r4, r5
 80053a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80053a8:	2d00      	cmp	r5, #0
 80053aa:	dc10      	bgt.n	80053ce <__ieee754_sqrt+0x62>
 80053ac:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 80053b0:	4330      	orrs	r0, r6
 80053b2:	d0f5      	beq.n	80053a0 <__ieee754_sqrt+0x34>
 80053b4:	b15d      	cbz	r5, 80053ce <__ieee754_sqrt+0x62>
 80053b6:	ee10 2a10 	vmov	r2, s0
 80053ba:	462b      	mov	r3, r5
 80053bc:	ee10 0a10 	vmov	r0, s0
 80053c0:	f7fa ff62 	bl	8000288 <__aeabi_dsub>
 80053c4:	4602      	mov	r2, r0
 80053c6:	460b      	mov	r3, r1
 80053c8:	f7fb fa40 	bl	800084c <__aeabi_ddiv>
 80053cc:	e7e6      	b.n	800539c <__ieee754_sqrt+0x30>
 80053ce:	1512      	asrs	r2, r2, #20
 80053d0:	d074      	beq.n	80054bc <__ieee754_sqrt+0x150>
 80053d2:	07d4      	lsls	r4, r2, #31
 80053d4:	f3c1 0113 	ubfx	r1, r1, #0, #20
 80053d8:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 80053dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80053e0:	bf5e      	ittt	pl
 80053e2:	0fda      	lsrpl	r2, r3, #31
 80053e4:	005b      	lslpl	r3, r3, #1
 80053e6:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 80053ea:	2400      	movs	r4, #0
 80053ec:	0fda      	lsrs	r2, r3, #31
 80053ee:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 80053f2:	107f      	asrs	r7, r7, #1
 80053f4:	005b      	lsls	r3, r3, #1
 80053f6:	2516      	movs	r5, #22
 80053f8:	4620      	mov	r0, r4
 80053fa:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80053fe:	1886      	adds	r6, r0, r2
 8005400:	428e      	cmp	r6, r1
 8005402:	bfde      	ittt	le
 8005404:	1b89      	suble	r1, r1, r6
 8005406:	18b0      	addle	r0, r6, r2
 8005408:	18a4      	addle	r4, r4, r2
 800540a:	0049      	lsls	r1, r1, #1
 800540c:	3d01      	subs	r5, #1
 800540e:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 8005412:	ea4f 0252 	mov.w	r2, r2, lsr #1
 8005416:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800541a:	d1f0      	bne.n	80053fe <__ieee754_sqrt+0x92>
 800541c:	462a      	mov	r2, r5
 800541e:	f04f 0e20 	mov.w	lr, #32
 8005422:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8005426:	4281      	cmp	r1, r0
 8005428:	eb06 0c05 	add.w	ip, r6, r5
 800542c:	dc02      	bgt.n	8005434 <__ieee754_sqrt+0xc8>
 800542e:	d113      	bne.n	8005458 <__ieee754_sqrt+0xec>
 8005430:	459c      	cmp	ip, r3
 8005432:	d811      	bhi.n	8005458 <__ieee754_sqrt+0xec>
 8005434:	f1bc 0f00 	cmp.w	ip, #0
 8005438:	eb0c 0506 	add.w	r5, ip, r6
 800543c:	da43      	bge.n	80054c6 <__ieee754_sqrt+0x15a>
 800543e:	2d00      	cmp	r5, #0
 8005440:	db41      	blt.n	80054c6 <__ieee754_sqrt+0x15a>
 8005442:	f100 0801 	add.w	r8, r0, #1
 8005446:	1a09      	subs	r1, r1, r0
 8005448:	459c      	cmp	ip, r3
 800544a:	bf88      	it	hi
 800544c:	f101 31ff 	addhi.w	r1, r1, #4294967295
 8005450:	eba3 030c 	sub.w	r3, r3, ip
 8005454:	4432      	add	r2, r6
 8005456:	4640      	mov	r0, r8
 8005458:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 800545c:	f1be 0e01 	subs.w	lr, lr, #1
 8005460:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 8005464:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8005468:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800546c:	d1db      	bne.n	8005426 <__ieee754_sqrt+0xba>
 800546e:	430b      	orrs	r3, r1
 8005470:	d006      	beq.n	8005480 <__ieee754_sqrt+0x114>
 8005472:	1c50      	adds	r0, r2, #1
 8005474:	bf13      	iteet	ne
 8005476:	3201      	addne	r2, #1
 8005478:	3401      	addeq	r4, #1
 800547a:	4672      	moveq	r2, lr
 800547c:	f022 0201 	bicne.w	r2, r2, #1
 8005480:	1063      	asrs	r3, r4, #1
 8005482:	0852      	lsrs	r2, r2, #1
 8005484:	07e1      	lsls	r1, r4, #31
 8005486:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800548a:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800548e:	bf48      	it	mi
 8005490:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 8005494:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 8005498:	4614      	mov	r4, r2
 800549a:	e781      	b.n	80053a0 <__ieee754_sqrt+0x34>
 800549c:	0ad9      	lsrs	r1, r3, #11
 800549e:	3815      	subs	r0, #21
 80054a0:	055b      	lsls	r3, r3, #21
 80054a2:	2900      	cmp	r1, #0
 80054a4:	d0fa      	beq.n	800549c <__ieee754_sqrt+0x130>
 80054a6:	02cd      	lsls	r5, r1, #11
 80054a8:	d50a      	bpl.n	80054c0 <__ieee754_sqrt+0x154>
 80054aa:	f1c2 0420 	rsb	r4, r2, #32
 80054ae:	fa23 f404 	lsr.w	r4, r3, r4
 80054b2:	1e55      	subs	r5, r2, #1
 80054b4:	4093      	lsls	r3, r2
 80054b6:	4321      	orrs	r1, r4
 80054b8:	1b42      	subs	r2, r0, r5
 80054ba:	e78a      	b.n	80053d2 <__ieee754_sqrt+0x66>
 80054bc:	4610      	mov	r0, r2
 80054be:	e7f0      	b.n	80054a2 <__ieee754_sqrt+0x136>
 80054c0:	0049      	lsls	r1, r1, #1
 80054c2:	3201      	adds	r2, #1
 80054c4:	e7ef      	b.n	80054a6 <__ieee754_sqrt+0x13a>
 80054c6:	4680      	mov	r8, r0
 80054c8:	e7bd      	b.n	8005446 <__ieee754_sqrt+0xda>
 80054ca:	bf00      	nop
 80054cc:	7ff00000 	.word	0x7ff00000

080054d0 <_init>:
 80054d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80054d2:	bf00      	nop
 80054d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80054d6:	bc08      	pop	{r3}
 80054d8:	469e      	mov	lr, r3
 80054da:	4770      	bx	lr

080054dc <_fini>:
 80054dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80054de:	bf00      	nop
 80054e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80054e2:	bc08      	pop	{r3}
 80054e4:	469e      	mov	lr, r3
 80054e6:	4770      	bx	lr
